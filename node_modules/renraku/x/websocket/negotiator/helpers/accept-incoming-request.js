import { ApiError } from "../../../error.js";
import { stopwatch } from "../../../tools/stopwatch.js";
export async function acceptIncomingRequest({ logger, exposeErrors, headers, request, servelet, respond, }) {
    var _a;
    const { id, meta, method, params } = request;
    try {
        const timer = stopwatch();
        const result = await servelet({
            meta,
            method,
            params,
            headers,
        });
        const duration = timer();
        respond({
            jsonrpc: "2.0",
            id,
            result,
        });
        logger.log(`ðŸ”» ${method}() - ${duration}ms`);
    }
    catch (error) {
        if (!(error instanceof ApiError)) {
            error = new ApiError(500, exposeErrors
                ? error.message
                : "hidden error");
        }
        respond({
            jsonrpc: "2.0",
            id,
            error: {
                code: error.code,
                message: error.message,
            },
        });
        logger.error(`ðŸš¨ ${(_a = error.code) !== null && _a !== void 0 ? _a : 500}`, error.stack);
    }
}
//# sourceMappingURL=accept-incoming-request.js.map