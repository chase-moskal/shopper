import { createServer } from "http";
import { WebSocketServer } from "ws";
import { servelet } from "../servelet.js";
import { negotiator } from "./negotiator/negotiator.js";
import { healthCheck } from "../http/node-utils/health-check.js";
import { colorfulLogger } from "../tools/fancy-logging/colorful-logger.js";
import { remoteWithMetaMap } from "../http/mapping/remote-with-meta-map.js";
import { timestampedLogger } from "../tools/fancy-logging/timestamped-logger.js";
export function webSocketServer({ port, timeout, exposeErrors, maxPayloadSize, logger = timestampedLogger(colorfulLogger(console)), acceptConnection, }) {
    const server = createServer();
    const wss = new WebSocketServer({
        noServer: true,
        maxPayload: maxPayloadSize,
    });
    let count = 1;
    wss.on("connection", async (socket, req) => {
        const clientCount = count++;
        logger.log(`ðŸ“– connected ${clientCount}`);
        const logDisconnect = () => logger.log(`ðŸ“• disconnected ${clientCount}`);
        const { startWaitingForResponse, acceptIncoming } = negotiator({
            logger,
            timeout,
            exposeErrors,
        });
        const { api, handleConnectionClosed } = acceptConnection({
            headers: req.headers,
            controls: {
                ping() {
                    socket.ping();
                },
                close() {
                    socket.close();
                    handleConnectionClosed();
                    logDisconnect();
                },
            },
            prepareClientApi(map) {
                const requester = async ({ meta, method, params }) => {
                    const { id, response } = startWaitingForResponse();
                    socket.send(JSON.stringify({
                        id,
                        jsonrpc: "2.0",
                        meta,
                        method,
                        params,
                    }));
                    logger.log(`ðŸ”º ${method}()`);
                    return response;
                };
                return remoteWithMetaMap(requester, map);
            },
        });
        const serversideServelet = servelet(api);
        socket.onclose = () => {
            handleConnectionClosed();
            logDisconnect();
        };
        socket.onerror = event => {
            logger.error(`ðŸš¨ socket error`, event.message, event.error);
            socket.close();
            handleConnectionClosed();
            logDisconnect();
        };
        socket.onmessage = async (event) => acceptIncoming({
            servelet: serversideServelet,
            headers: req.headers,
            incoming: JSON.parse(event.data.toString()),
            respond: response => socket.send(JSON.stringify(response)),
        });
    });
    server.prependListener("request", healthCheck("/health", logger, () => { }));
    server.on("upgrade", (request, socket, head) => {
        wss.handleUpgrade(request, socket, head, ws => {
            wss.emit("connection", ws, request);
        });
    });
    server.listen(port);
    logger.log(`ðŸ’¡ started web socket server ${port}`);
    return {
        close: () => {
            wss.close();
            server.close();
            logger.log(`ðŸ›‘ stopped web socket server`);
        },
    };
}
//# sourceMappingURL=socket-server.js.map