import { readStream } from "./read-stream.js";
import { stopwatch } from "../../tools/stopwatch.js";
import { respondWithError } from "./respond-with-error.js";
import { colorfulLogger } from "../../tools/fancy-logging/colorful-logger.js";
import { timestampedLogger } from "../../tools/fancy-logging/timestamped-logger.js";
export function makeRequestListener({ exposeErrors, maxPayloadSize, logger = timestampedLogger(colorfulLogger(console)), execute, }) {
    return async (req, res) => {
        var _a;
        let id = -1;
        try {
            const body = await readStream(req, maxPayloadSize);
            const request = JSON.parse(body);
            id = request.id;
            res.setHeader("Content-Type", "application/json; charset=utf-8");
            const timer = stopwatch();
            const result = await execute({
                meta: request.meta,
                method: request.method,
                params: request.params,
                headers: req.headers,
            });
            const duration = timer();
            res.statusCode = 200;
            res.end(JSON.stringify({
                jsonrpc: "2.0",
                id,
                result,
            }));
            logger.log(`ðŸ”” ${request.method}() - ${duration.toFixed(0)}ms`);
        }
        catch (error) {
            logger.error(`ðŸš¨ ${(_a = error.code) !== null && _a !== void 0 ? _a : 500}`, error.stack);
            return respondWithError({
                id,
                error,
                res,
                exposeErrors,
            });
        }
    };
}
//# sourceMappingURL=make-request-listener.js.map