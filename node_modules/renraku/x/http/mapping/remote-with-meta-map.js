import { objectMap } from "../../tools/object-map.js";
export function remoteWithMetaMap(requester, map, options = {}) {
    function recurse(mapGroup, path = []) {
        return objectMap(mapGroup, (value, key) => {
            const newPath = [...path, key];
            if (typeof value === "function") {
                const getMeta = value;
                const overrides = {};
                return new Proxy({}, {
                    set: (t, key, value) => {
                        overrides[key] = value;
                        return true;
                    },
                    get: (t, property) => {
                        var _a;
                        return ((_a = overrides[key]) !== null && _a !== void 0 ? _a : (async (...params) => {
                            const joinedPath = [...newPath, property].join(".");
                            const method = "." + joinedPath;
                            const meta = await getMeta();
                            return options.spike
                                ? options.spike(joinedPath, async (...params2) => requester({
                                    meta, method, params: params2
                                }), ...params)
                                : requester({ meta, method, params });
                        }));
                    },
                });
            }
            else {
                return recurse(value, newPath);
            }
        });
    }
    return recurse(map);
}
//# sourceMappingURL=remote-with-meta-map.js.map