import { Id } from "../id.js";
import { isNode as stockIsNode } from "../tools/is-node.js";
export async function getRando({ isNode = stockIsNode } = {}) {
    const randomBuffer = isNode
        ? await (async () => {
            const crypto = await import("crypto");
            return (bytes) => crypto.randomBytes(bytes).buffer;
        })()
        : (bytes) => crypto.getRandomValues(new Uint8Array(bytes)).buffer;
    const compare = isNode
        ? await (async () => {
            const crypto = await import("crypto");
            return (a, b) => crypto.timingSafeEqual(Buffer.from(a, "utf8"), Buffer.from(b, "utf8"));
        })()
        : (a, b) => {
            console.warn("insecure compare");
            return a === b;
        };
    function random() {
        const buffer = randomBuffer(8);
        const ints = new Int8Array(buffer);
        ints[7] = 63;
        ints[6] |= 0xf0;
        const view = new DataView(buffer);
        return view.getFloat64(0, true) - 1;
    }
    function randomId() {
        const buffer = randomBuffer(32);
        return new Id(buffer);
    }
    function randomSample(palette) {
        return palette[Math.floor(random() * palette.length)];
    }
    function randomSequence(length, palette) {
        const results = [];
        while (results.length < length) {
            const sample = randomSample(palette);
            results.push(sample);
        }
        return results.join("");
    }
    return {
        random,
        compare,
        randomId,
        randomBuffer,
        randomSample,
        randomSequence,
    };
}
//# sourceMappingURL=get-rando.js.map