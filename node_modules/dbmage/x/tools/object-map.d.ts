export declare function objectMap<OutputValue = any, InputValue = any, Input extends {} = {}>(input: Input, mapper: (value: InputValue, key: string) => OutputValue): {
    [P in keyof Input]: OutputValue;
};
export declare function objectMap2<Input extends {}, Output extends {}>(input: Input, mapper: (value: any, key: string) => any): Output;
export declare function objectMap3<InputObject extends {}, OutputValue>(input: InputObject, mapper: (value: InputObject[keyof InputObject], key: string) => OutputValue): { [P in keyof InputObject]: OutputValue; };
export declare function objectTransform<I extends {}, O>(input: I, mapper: (entry: [string, I[keyof I]]) => [string, O]): {
    [key: string]: O;
};
