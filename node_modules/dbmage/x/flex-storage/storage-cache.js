export function storageCache({ storage, lifespan, storageKey, load, }) {
    async function getValidCache() {
        let valid = false;
        const cache = await storage.read(storageKey);
        if (cache) {
            const since = Date.now() - cache.time;
            const alive = since < lifespan;
            if (alive)
                valid = true;
        }
        return valid
            ? cache
            : undefined;
    }
    async function loadFreshAndWriteCache() {
        const data = await load();
        const time = Date.now();
        await storage.write(storageKey, { data, time });
        return data;
    }
    return {
        async read() {
            const cache = await getValidCache();
            return cache
                ? cache.data
                : loadFreshAndWriteCache();
        },
        async readFresh() {
            return loadFreshAndWriteCache();
        },
        async readCached() {
            const cache = await getValidCache();
            return cache === null || cache === void 0 ? void 0 : cache.data;
        },
        async clear() {
            await storage.write(storageKey, undefined);
        },
        async write(data, time = Date.now()) {
            await storage.write(storageKey, { data, time });
        },
    };
}
//# sourceMappingURL=storage-cache.js.map