var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RowStorage_storage;
import { deserialize, serialize } from "./id-serialization.js";
export class RowStorage {
    constructor(storage) {
        _RowStorage_storage.set(this, void 0);
        __classPrivateFieldSet(this, _RowStorage_storage, storage, "f");
    }
    async save(key, rows) {
        return __classPrivateFieldGet(this, _RowStorage_storage, "f").write(key, rows.map(serialize));
    }
    async load(key) {
        var _a;
        const serializedRows = (_a = await __classPrivateFieldGet(this, _RowStorage_storage, "f").read(key)) !== null && _a !== void 0 ? _a : [];
        return serializedRows.map(deserialize);
    }
}
_RowStorage_storage = new WeakMap();
//# sourceMappingURL=row-storage.js.map