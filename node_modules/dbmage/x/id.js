var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Id_binary, _Id_string;
import { encodeHex, decodeHex, isHex } from "./tools/binary/hex.js";
export class Id {
    static fromBinary(binary) {
        return new Id(binary);
    }
    static fromString(text) {
        const binary = decodeHex(text);
        return new Id(binary);
    }
    static isId(text) {
        return text.length === 64 && isHex(text);
    }
    constructor(binary) {
        _Id_binary.set(this, void 0);
        _Id_string.set(this, void 0);
        __classPrivateFieldSet(this, _Id_binary, binary, "f");
        __classPrivateFieldSet(this, _Id_string, encodeHex(binary), "f");
    }
    get binary() { return __classPrivateFieldGet(this, _Id_binary, "f"); }
    get string() { return __classPrivateFieldGet(this, _Id_string, "f"); }
    toBinary() { return __classPrivateFieldGet(this, _Id_binary, "f"); }
    toString() { return __classPrivateFieldGet(this, _Id_string, "f"); }
    equals(id) {
        return typeof id === "string"
            ? __classPrivateFieldGet(this, _Id_string, "f") === id
            : __classPrivateFieldGet(this, _Id_string, "f") === id.toString();
    }
}
_Id_binary = new WeakMap(), _Id_string = new WeakMap();
//# sourceMappingURL=id.js.map