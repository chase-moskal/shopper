import { Row, ConditionLeaf, Table, Conditional } from "./types.js";
export declare function and<xRow extends Row, C extends ConditionLeaf<xRow>[] = ConditionLeaf<xRow>[]>(...conditions: C): ["and", ...C];
export declare function or<xRow extends Row, C extends ConditionLeaf<xRow>[] = ConditionLeaf<xRow>[]>(...conditions: C): ["or", ...C];
export declare function find<xRow extends Row>(...rows: Partial<xRow>[]): {
    conditions: ["or", ...{
        equal: Partial<xRow>;
    }[]];
} | {
    conditions: false;
};
export declare function findAll<V, xRow extends Row = Row>(values: V[], valueForRow: (v: V) => Partial<xRow>): {
    conditions: ["or", ...{
        equal: Partial<xRow>;
    }[]];
};
export declare function assert<xRow extends Row>(table: Table<xRow>, conditional: Conditional<xRow>, make: () => Promise<xRow>): Promise<xRow>;
