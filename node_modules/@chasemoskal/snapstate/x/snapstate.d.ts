import type { StateTree, Snapstate, RestrictedSnapstate, GetTree } from "./types.js";
export * from "./types.js";
export * from "./parts/paths.js";
export * from "./parts/errors.js";
export * from "./parts/symbol-to-allow-proxy-into-state.js";
export * from "./tools/debounce/debounce.js";
export * from "./tools/attempt-nested-property.js";
export * from "./tools/is-plain-object.js";
export * from "./tools/is-void.js";
export * from "./tools/nap.js";
export * from "./tools/object-map.js";
export * from "./tools/obtain.js";
export * from "./tools/unproxy.js";
export declare function snapstate<xTree extends StateTree>(tree: xTree): Snapstate<xTree>;
export declare function substate<xTree extends StateTree, xSubtree extends StateTree, xSnap extends RestrictedSnapstate<xTree> | Snapstate<xTree>>(state: xSnap, grabber: (tree: GetTree<xSnap>) => xSubtree): (xSnap extends Snapstate<xTree> ? Snapstate<xSubtree> : RestrictedSnapstate<xSubtree>);
export declare function restricted<xTree extends StateTree>(snap: Snapstate<xTree>): RestrictedSnapstate<xTree>;
