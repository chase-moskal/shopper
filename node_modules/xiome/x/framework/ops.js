export var Ops;
(function (Ops) {
    let Mode;
    (function (Mode) {
        Mode[Mode["None"] = 0] = "None";
        Mode[Mode["Loading"] = 1] = "Loading";
        Mode[Mode["Error"] = 2] = "Error";
        Mode[Mode["Ready"] = 3] = "Ready";
    })(Mode = Ops.Mode || (Ops.Mode = {}));
})(Ops || (Ops = {}));
export const ops = {
    none: () => ({
        mode: Ops.Mode.None,
    }),
    loading: () => ({
        mode: Ops.Mode.Loading,
    }),
    error: (reason) => ({
        mode: Ops.Mode.Error,
        reason,
    }),
    ready: (value) => ({
        mode: Ops.Mode.Ready,
        value,
    }),
    replaceValue(op, value) {
        return op.mode === Ops.Mode.Ready
            ? { ...op, value }
            : op;
    },
    isNone: (op) => op.mode === Ops.Mode.None,
    isLoading: (op) => op.mode === Ops.Mode.Loading,
    isError: (op) => op.mode === Ops.Mode.Error,
    isReady: (op) => op.mode === Ops.Mode.Ready,
    value(op) {
        return op.mode === Ops.Mode.Ready
            ? op.value
            : undefined;
    },
    select(op, options) {
        switch (op.mode) {
            case Ops.Mode.None: return options.none();
            case Ops.Mode.Loading: return options.loading();
            case Ops.Mode.Error: return options.error(op.reason);
            case Ops.Mode.Ready: return options.ready(op.value);
        }
    },
    async operation({ promise, errorReason = "an error occurred", setOp, }) {
        await setOp(ops.loading());
        try {
            const value = await promise;
            await setOp(ops.ready(value));
            return value;
        }
        catch (error) {
            await setOp(ops.error(errorReason));
            throw error;
        }
    },
    mode(op) {
        return ops.select(op, {
            none: () => "none",
            loading: () => "loading",
            error: () => "error",
            ready: () => "ready",
        });
    },
    combine(...ops) {
        const isAnyError = !!ops.find(op => op.mode === Ops.Mode.Error);
        const isAnyLoading = !!ops.find(op => op.mode === Ops.Mode.Loading);
        const isAnyNotReady = !!ops.find(op => op.mode !== Ops.Mode.Ready);
        return isAnyError
            ? { mode: Ops.Mode.Error, reason: "error" }
            : isAnyLoading
                ? { mode: Ops.Mode.Loading }
                : isAnyNotReady
                    ? { mode: Ops.Mode.None }
                    : { mode: Ops.Mode.Ready, value: undefined };
    },
    debug(op) {
        return ops.select(op, {
            none: () => [`<op {mode: None}>`],
            loading: () => [`<op {mode: Loading}>`],
            error: reason => [`<op {mode: Error, reason: "${reason}"}>`],
            ready: value => [`<op {mode: Ready, value: `, value, `}>`],
        });
    },
};
//# sourceMappingURL=ops.js.map