var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Component_subscriptions, _Component_unsubscribe;
import { LitElement } from "lit";
import { mixinInitiallyHidden } from "./component/mixins/mixin-initially-hidden.js";
export * from "lit";
export * from "lit/decorators.js";
export * from "./component/theme-components.js";
export * from "./component/register-components.js";
export * from "./component/mixins/mixin-focusable.js";
export * from "./component/mixins/mixin-initially-hidden.js";
export * from "./component/mixins/mixin-light-dom.js";
export * from "./component/mixins/mixin-snapstate.js";
export * from "./component/mixins/mixin-share.js";
export * from "./component/mixins/mixin-styles.js";
export * from "./component/mixins/mixin-ticker.js";
export class Component extends mixinInitiallyHidden(LitElement) {
    constructor() {
        super(...arguments);
        _Component_subscriptions.set(this, []);
        _Component_unsubscribe.set(this, () => { });
    }
    init() { }
    firstUpdated(changes) {
        super.firstUpdated(changes);
        this.init();
    }
    addSubscription(subscribe) {
        __classPrivateFieldGet(this, _Component_subscriptions, "f").push(subscribe);
        if (this.isConnected) {
            const unsubscribe = subscribe();
            const existingUnsubscribe = __classPrivateFieldGet(this, _Component_unsubscribe, "f");
            __classPrivateFieldSet(this, _Component_unsubscribe, () => {
                unsubscribe();
                existingUnsubscribe();
            }, "f");
        }
    }
    subscribe() {
        const unsubscribes = __classPrivateFieldGet(this, _Component_subscriptions, "f").map(s => s());
        return () => unsubscribes.forEach(u => u());
    }
    connectedCallback() {
        super.connectedCallback();
        __classPrivateFieldSet(this, _Component_unsubscribe, this.subscribe(), "f");
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        __classPrivateFieldGet(this, _Component_unsubscribe, "f").call(this);
        __classPrivateFieldSet(this, _Component_unsubscribe, () => { }, "f");
    }
    render() {
        throw new Error("component render method not implemented");
    }
}
_Component_subscriptions = new WeakMap(), _Component_unsubscribe = new WeakMap();
//# sourceMappingURL=component.js.map