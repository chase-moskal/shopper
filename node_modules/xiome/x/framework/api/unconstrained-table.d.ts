import * as dbmage from "dbmage";
import { AppConstraint } from "../../assembly/backend/types/database.js";
import { ConstrainMixedTables, SchemaToUnconstrainedTables, TablesMixed } from "./types/unconstrained-tables.js";
export declare class UnconstrainedTable<xRow extends dbmage.Row> {
    static wrapTables<xSchema extends dbmage.Schema>(tables: dbmage.SchemaToTables<xSchema>): SchemaToUnconstrainedTables<xSchema>;
    static unwrapTables<xSchema extends dbmage.Schema>(unconstrainedTables: SchemaToUnconstrainedTables<xSchema>): dbmage.ConstrainTables<{
        "namespace-appId": dbmage.Id;
    }, dbmage.SchemaToTables<xSchema>>;
    static wrapDatabase<xSchema extends dbmage.Schema>(database: dbmage.Database<xSchema>): dbmage.DatabaseLike<SchemaToUnconstrainedTables<xSchema>>;
    static constrainTablesForApp<xTables extends TablesMixed>({ appId, unconstrainedTables, }: {
        appId: dbmage.Id;
        unconstrainedTables: xTables;
    }): ConstrainMixedTables<xTables>;
    static constrainDatabaseForApp<xDatabase extends dbmage.DatabaseLike<TablesMixed>>({ appId, database, }: {
        appId: dbmage.Id;
        database: xDatabase;
    }): {
        tables: ConstrainMixedTables<xDatabase["tables"]>;
        transaction: <xResult>(action: ({}: {
            tables: ConstrainMixedTables<xDatabase["tables"]>;
            abort: () => Promise<void>;
        }) => xResult) => Promise<xResult>;
    };
    unconstrained: dbmage.UnconstrainTable<AppConstraint, dbmage.Table<xRow>>;
    constructor(table: dbmage.Table<xRow>);
    constrainForApp(appId: dbmage.Id): dbmage.Table<dbmage.ConstrainRow<{
        "namespace-appId": dbmage.Id;
    }, dbmage.UnconstrainRow<{
        "namespace-appId": dbmage.Id;
    }, xRow>>>;
}
