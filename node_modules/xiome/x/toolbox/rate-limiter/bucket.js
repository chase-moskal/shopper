var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Bucket_maximum, _Bucket_storage;
export class Bucket {
    constructor({ maximum }) {
        _Bucket_maximum.set(this, void 0);
        _Bucket_storage.set(this, []);
        __classPrivateFieldSet(this, _Bucket_maximum, maximum, "f");
    }
    add(item) {
        __classPrivateFieldGet(this, _Bucket_storage, "f").push(item);
        if (__classPrivateFieldGet(this, _Bucket_storage, "f").length > __classPrivateFieldGet(this, _Bucket_maximum, "f"))
            __classPrivateFieldSet(this, _Bucket_storage, __classPrivateFieldGet(this, _Bucket_storage, "f").slice(-__classPrivateFieldGet(this, _Bucket_maximum, "f")), "f");
    }
    read() {
        return [...__classPrivateFieldGet(this, _Bucket_storage, "f")];
    }
}
_Bucket_maximum = new WeakMap(), _Bucket_storage = new WeakMap();
//# sourceMappingURL=bucket.js.map