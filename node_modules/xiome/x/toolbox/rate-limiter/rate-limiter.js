var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RateLimiter_timeframe, _RateLimiter_maximum, _RateLimiter_bucket;
import { Bucket } from "./bucket.js";
export class RateLimiter {
    constructor({ timeframe, maximum }) {
        _RateLimiter_timeframe.set(this, void 0);
        _RateLimiter_maximum.set(this, void 0);
        _RateLimiter_bucket.set(this, void 0);
        __classPrivateFieldSet(this, _RateLimiter_timeframe, timeframe, "f");
        __classPrivateFieldSet(this, _RateLimiter_maximum, maximum, "f");
        __classPrivateFieldSet(this, _RateLimiter_bucket, new Bucket({ maximum }), "f");
    }
    hit() {
        const now = Date.now();
        const old = now - __classPrivateFieldGet(this, _RateLimiter_timeframe, "f");
        const hitsWithinTimeframe = __classPrivateFieldGet(this, _RateLimiter_bucket, "f").read().filter(time => time > old);
        if (hitsWithinTimeframe.length < __classPrivateFieldGet(this, _RateLimiter_maximum, "f")) {
            __classPrivateFieldGet(this, _RateLimiter_bucket, "f").add(now);
            return true;
        }
        else {
            return false;
        }
    }
    tooMany() {
        return !this.hit();
    }
}
_RateLimiter_timeframe = new WeakMap(), _RateLimiter_maximum = new WeakMap(), _RateLimiter_bucket = new WeakMap();
//# sourceMappingURL=rate-limiter.js.map