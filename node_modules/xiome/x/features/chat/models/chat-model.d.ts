import { Op } from "../../../framework/ops.js";
import { AccessPayload } from "../../auth/types/auth-tokens.js";
import { ChatMeta, ChatConnect } from "../common/types/chat-concepts.js";
export declare function makeChatModel({ chatConnect, getChatMeta }: {
    chatConnect: ChatConnect;
    getChatMeta: () => Promise<ChatMeta>;
}): {
    state: {
        accessOp: Op<AccessPayload>;
        connectionOp: Op<import("../common/types/chat-concepts.js").ChatConnection>;
        cache: {
            mutedUserIds: string[];
            roomStats: import("../common/types/chat-concepts.js").ChatStats;
            rooms: {
                [key: string]: {
                    status: import("../common/types/chat-concepts.js").ChatStatus;
                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                };
            };
        };
    };
    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
        accessOp: Op<AccessPayload>;
        connectionOp: Op<import("../common/types/chat-concepts.js").ChatConnection>;
        cache: {
            mutedUserIds: string[];
            roomStats: import("../common/types/chat-concepts.js").ChatStats;
            rooms: {
                [key: string]: {
                    status: import("../common/types/chat-concepts.js").ChatStatus;
                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                };
            };
        };
    }>) => () => void;
    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
    readonly allowance: {
        moderateAllChats: boolean;
        participateInAllChats: boolean;
        viewAllChats: boolean;
        banned: boolean;
    };
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
    session: (label: string) => Promise<{
        dispose: () => void;
        room: {
            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
            readonly status: import("../common/types/chat-concepts.js").ChatStatus;
            readonly muted: string[];
            readonly weAreMuted: boolean;
            readonly weAreBanned: boolean;
            setRoomStatus(status: import("../common/types/chat-concepts.js").ChatStatus): void;
            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
            remove(postIds: string[]): void;
            clear(): void;
            mute(userId: string): void;
            unmute(userId: string): void;
            unmuteAll(): void;
        };
    }>;
    disconnect: () => Promise<void>;
    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
};
