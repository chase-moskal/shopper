import { ops } from "../../../../framework/ops.js";
import { ChatStatus } from "../../common/types/chat-concepts.js";
import { appPermissions } from "../../../../assembly/backend/permissions/standard-permissions.js";
export function makeChatRoom({ label, serverside, state }) {
    const getRoomCache = () => state.readable.cache.rooms[label];
    const getAccess = () => ops.value(state.readable.accessOp);
    return {
        get posts() {
            var _a, _b;
            return (_b = (_a = getRoomCache()) === null || _a === void 0 ? void 0 : _a.posts) !== null && _b !== void 0 ? _b : [];
        },
        get status() {
            var _a, _b;
            return (_b = (_a = getRoomCache()) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : ChatStatus.Offline;
        },
        get muted() {
            return state.readable.cache.mutedUserIds;
        },
        get weAreMuted() {
            const { user: { userId } } = getAccess();
            return state.readable.cache.mutedUserIds.includes(userId);
        },
        get weAreBanned() {
            const { permit: { privileges } } = getAccess();
            return privileges.includes(appPermissions.privileges["banned"]);
        },
        setRoomStatus(status) {
            serverside.chatServer.setRoomStatus(label, status);
        },
        post(draft) {
            serverside.chatServer.post(label, draft);
        },
        remove(postIds) {
            serverside.chatServer.remove(label, postIds);
        },
        clear() {
            serverside.chatServer.clear(label);
        },
        mute(userId) {
            serverside.chatServer.mute([userId]);
        },
        unmute(userId) {
            serverside.chatServer.unmute([userId]);
        },
        unmuteAll() {
            serverside.chatServer.unmuteAll();
        },
    };
}
//# sourceMappingURL=make-chat-room.js.map