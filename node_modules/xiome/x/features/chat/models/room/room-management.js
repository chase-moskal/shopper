import { ops } from "../../../../framework/ops.js";
import { makeChatRoom } from "./make-chat-room.js";
export function setupRoomManagement({ state, reconnect, disconnect }) {
    async function assertConnection() {
        return ops.isReady(state.readable.connectionOp)
            ? ops.value(state.readable.connectionOp)
            : reconnect();
    }
    const followers = new Map();
    const rooms = new Map();
    function assertFollowing(label) {
        let following = followers.get(label);
        if (!following) {
            following = new Set();
            followers.set(label, following);
        }
        return following;
    }
    function assertRoom(label) {
        let room = rooms.get(label);
        if (!room) {
            room = assertConnection()
                .then(connection => connection.serverside.chatServer.roomSubscribe(label)
                .then(() => connection))
                .then(connection => makeChatRoom({
                label,
                state,
                serverside: connection.serverside,
            }));
            rooms.set(label, room);
        }
        return room;
    }
    function removeRoom(label) {
        const room = rooms.get(label);
        assertConnection()
            .then(connection => room.then(r => {
            connection.serverside.chatServer.roomUnsubscribe(label);
        }))
            .then(() => {
            rooms.delete(label);
            if (rooms.size === 0) {
                return disconnect();
            }
        });
    }
    async function getRoomSession(label) {
        const following = assertFollowing(label);
        const follower = Symbol();
        following.add(follower);
        function dispose() {
            following.delete(follower);
            if (following.size === 0)
                removeRoom(label);
        }
        return {
            dispose,
            room: await assertRoom(label),
        };
    }
    async function updateAuthSituation(auth) {
        if (auth) {
            if (rooms.size > 0)
                await assertConnection();
        }
        else if (rooms.size === 0)
            await disconnect();
    }
    return { getRoomSession, updateAuthSituation };
}
//# sourceMappingURL=room-management.js.map