import { ChatStatus } from "../common/types/chat-concepts.js";
import { chatPrivileges } from "../common/chat-privileges.js";
export declare function testChatSetup(): Promise<{
    makeServer: () => Promise<{
        makeClientFor: {
            forbidden: (appId?: string) => Promise<{
                clone: () => Promise<{
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                userId: string;
                chatModel: {
                    state: {
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    };
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    }>) => () => void;
                    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                    readonly allowance: {
                        moderateAllChats: boolean;
                        participateInAllChats: boolean;
                        viewAllChats: boolean;
                        banned: boolean;
                    };
                    updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    session: (label: string) => Promise<{
                        dispose: () => void;
                        room: {
                            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                            readonly status: ChatStatus;
                            readonly muted: string[];
                            readonly weAreMuted: boolean;
                            readonly weAreBanned: boolean;
                            setRoomStatus(status: ChatStatus): void;
                            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                            remove(postIds: string[]): void;
                            clear(): void;
                            mute(userId: string): void;
                            unmute(userId: string): void;
                            unmuteAll(): void;
                        };
                    }>;
                    disconnect: () => Promise<void>;
                    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                };
                addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
            }>;
            viewer: (appId?: string) => Promise<{
                clone: () => Promise<{
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                userId: string;
                chatModel: {
                    state: {
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    };
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    }>) => () => void;
                    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                    readonly allowance: {
                        moderateAllChats: boolean;
                        participateInAllChats: boolean;
                        viewAllChats: boolean;
                        banned: boolean;
                    };
                    updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    session: (label: string) => Promise<{
                        dispose: () => void;
                        room: {
                            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                            readonly status: ChatStatus;
                            readonly muted: string[];
                            readonly weAreMuted: boolean;
                            readonly weAreBanned: boolean;
                            setRoomStatus(status: ChatStatus): void;
                            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                            remove(postIds: string[]): void;
                            clear(): void;
                            mute(userId: string): void;
                            unmute(userId: string): void;
                            unmuteAll(): void;
                        };
                    }>;
                    disconnect: () => Promise<void>;
                    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                };
                addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
            }>;
            participant: (appId?: string) => Promise<{
                clone: () => Promise<{
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                userId: string;
                chatModel: {
                    state: {
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    };
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    }>) => () => void;
                    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                    readonly allowance: {
                        moderateAllChats: boolean;
                        participateInAllChats: boolean;
                        viewAllChats: boolean;
                        banned: boolean;
                    };
                    updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    session: (label: string) => Promise<{
                        dispose: () => void;
                        room: {
                            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                            readonly status: ChatStatus;
                            readonly muted: string[];
                            readonly weAreMuted: boolean;
                            readonly weAreBanned: boolean;
                            setRoomStatus(status: ChatStatus): void;
                            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                            remove(postIds: string[]): void;
                            clear(): void;
                            mute(userId: string): void;
                            unmute(userId: string): void;
                            unmuteAll(): void;
                        };
                    }>;
                    disconnect: () => Promise<void>;
                    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                };
                addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
            }>;
            moderator: (appId?: string) => Promise<{
                clone: () => Promise<{
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                userId: string;
                chatModel: {
                    state: {
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    };
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    }>) => () => void;
                    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                    readonly allowance: {
                        moderateAllChats: boolean;
                        participateInAllChats: boolean;
                        viewAllChats: boolean;
                        banned: boolean;
                    };
                    updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    session: (label: string) => Promise<{
                        dispose: () => void;
                        room: {
                            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                            readonly status: ChatStatus;
                            readonly muted: string[];
                            readonly weAreMuted: boolean;
                            readonly weAreBanned: boolean;
                            setRoomStatus(status: ChatStatus): void;
                            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                            remove(postIds: string[]): void;
                            clear(): void;
                            mute(userId: string): void;
                            unmute(userId: string): void;
                            unmuteAll(): void;
                        };
                    }>;
                    disconnect: () => Promise<void>;
                    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                };
                addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
            }>;
            bannedParticipant: (appId?: string) => Promise<{
                clone: () => Promise<{
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                userId: string;
                chatModel: {
                    state: {
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    };
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    }>) => () => void;
                    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                    readonly allowance: {
                        moderateAllChats: boolean;
                        participateInAllChats: boolean;
                        viewAllChats: boolean;
                        banned: boolean;
                    };
                    updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    session: (label: string) => Promise<{
                        dispose: () => void;
                        room: {
                            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                            readonly status: ChatStatus;
                            readonly muted: string[];
                            readonly weAreMuted: boolean;
                            readonly weAreBanned: boolean;
                            setRoomStatus(status: ChatStatus): void;
                            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                            remove(postIds: string[]): void;
                            clear(): void;
                            mute(userId: string): void;
                            unmute(userId: string): void;
                            unmuteAll(): void;
                        };
                    }>;
                    disconnect: () => Promise<void>;
                    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                };
                addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
            }>;
        };
    }>;
    startOnline(): Promise<{
        server: {
            makeClientFor: {
                forbidden: (appId?: string) => Promise<{
                    clone: () => Promise<{
                        userId: string;
                        chatModel: {
                            state: {
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            }>) => () => void;
                            subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                            readonly allowance: {
                                moderateAllChats: boolean;
                                participateInAllChats: boolean;
                                viewAllChats: boolean;
                                banned: boolean;
                            };
                            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            session: (label: string) => Promise<{
                                dispose: () => void;
                                room: {
                                    readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    readonly status: ChatStatus;
                                    readonly muted: string[];
                                    readonly weAreMuted: boolean;
                                    readonly weAreBanned: boolean;
                                    setRoomStatus(status: ChatStatus): void;
                                    post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                    remove(postIds: string[]): void;
                                    clear(): void;
                                    mute(userId: string): void;
                                    unmute(userId: string): void;
                                    unmuteAll(): void;
                                };
                            }>;
                            disconnect: () => Promise<void>;
                            reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                        };
                        addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                    }>;
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                viewer: (appId?: string) => Promise<{
                    clone: () => Promise<{
                        userId: string;
                        chatModel: {
                            state: {
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            }>) => () => void;
                            subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                            readonly allowance: {
                                moderateAllChats: boolean;
                                participateInAllChats: boolean;
                                viewAllChats: boolean;
                                banned: boolean;
                            };
                            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            session: (label: string) => Promise<{
                                dispose: () => void;
                                room: {
                                    readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    readonly status: ChatStatus;
                                    readonly muted: string[];
                                    readonly weAreMuted: boolean;
                                    readonly weAreBanned: boolean;
                                    setRoomStatus(status: ChatStatus): void;
                                    post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                    remove(postIds: string[]): void;
                                    clear(): void;
                                    mute(userId: string): void;
                                    unmute(userId: string): void;
                                    unmuteAll(): void;
                                };
                            }>;
                            disconnect: () => Promise<void>;
                            reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                        };
                        addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                    }>;
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                participant: (appId?: string) => Promise<{
                    clone: () => Promise<{
                        userId: string;
                        chatModel: {
                            state: {
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            }>) => () => void;
                            subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                            readonly allowance: {
                                moderateAllChats: boolean;
                                participateInAllChats: boolean;
                                viewAllChats: boolean;
                                banned: boolean;
                            };
                            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            session: (label: string) => Promise<{
                                dispose: () => void;
                                room: {
                                    readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    readonly status: ChatStatus;
                                    readonly muted: string[];
                                    readonly weAreMuted: boolean;
                                    readonly weAreBanned: boolean;
                                    setRoomStatus(status: ChatStatus): void;
                                    post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                    remove(postIds: string[]): void;
                                    clear(): void;
                                    mute(userId: string): void;
                                    unmute(userId: string): void;
                                    unmuteAll(): void;
                                };
                            }>;
                            disconnect: () => Promise<void>;
                            reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                        };
                        addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                    }>;
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                moderator: (appId?: string) => Promise<{
                    clone: () => Promise<{
                        userId: string;
                        chatModel: {
                            state: {
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            }>) => () => void;
                            subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                            readonly allowance: {
                                moderateAllChats: boolean;
                                participateInAllChats: boolean;
                                viewAllChats: boolean;
                                banned: boolean;
                            };
                            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            session: (label: string) => Promise<{
                                dispose: () => void;
                                room: {
                                    readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    readonly status: ChatStatus;
                                    readonly muted: string[];
                                    readonly weAreMuted: boolean;
                                    readonly weAreBanned: boolean;
                                    setRoomStatus(status: ChatStatus): void;
                                    post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                    remove(postIds: string[]): void;
                                    clear(): void;
                                    mute(userId: string): void;
                                    unmute(userId: string): void;
                                    unmuteAll(): void;
                                };
                            }>;
                            disconnect: () => Promise<void>;
                            reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                        };
                        addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                    }>;
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
                bannedParticipant: (appId?: string) => Promise<{
                    clone: () => Promise<{
                        userId: string;
                        chatModel: {
                            state: {
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                                cache: {
                                    mutedUserIds: string[];
                                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                    rooms: {
                                        [key: string]: {
                                            status: ChatStatus;
                                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                                        };
                                    };
                                };
                            }>) => () => void;
                            subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                            readonly allowance: {
                                moderateAllChats: boolean;
                                participateInAllChats: boolean;
                                viewAllChats: boolean;
                                banned: boolean;
                            };
                            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            session: (label: string) => Promise<{
                                dispose: () => void;
                                room: {
                                    readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    readonly status: ChatStatus;
                                    readonly muted: string[];
                                    readonly weAreMuted: boolean;
                                    readonly weAreBanned: boolean;
                                    setRoomStatus(status: ChatStatus): void;
                                    post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                    remove(postIds: string[]): void;
                                    clear(): void;
                                    mute(userId: string): void;
                                    unmute(userId: string): void;
                                    unmuteAll(): void;
                                };
                            }>;
                            disconnect: () => Promise<void>;
                            reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                        };
                        addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                    }>;
                    userId: string;
                    chatModel: {
                        state: {
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: ChatStatus;
                                        posts: import("../common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                                readonly status: ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: ChatStatus): void;
                                post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                    };
                    addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
                }>;
            };
        };
        moderator: {
            clone: () => Promise<{
                userId: string;
                chatModel: {
                    state: {
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    };
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                        connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                        cache: {
                            mutedUserIds: string[];
                            roomStats: import("../common/types/chat-concepts.js").ChatStats;
                            rooms: {
                                [key: string]: {
                                    status: ChatStatus;
                                    posts: import("../common/types/chat-concepts.js").ChatPost[];
                                };
                            };
                        };
                    }>) => () => void;
                    subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                    readonly allowance: {
                        moderateAllChats: boolean;
                        participateInAllChats: boolean;
                        viewAllChats: boolean;
                        banned: boolean;
                    };
                    updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    session: (label: string) => Promise<{
                        dispose: () => void;
                        room: {
                            readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                            readonly status: ChatStatus;
                            readonly muted: string[];
                            readonly weAreMuted: boolean;
                            readonly weAreBanned: boolean;
                            setRoomStatus(status: ChatStatus): void;
                            post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                            remove(postIds: string[]): void;
                            clear(): void;
                            mute(userId: string): void;
                            unmute(userId: string): void;
                            unmuteAll(): void;
                        };
                    }>;
                    disconnect: () => Promise<void>;
                    reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
                };
                addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
            }>;
            userId: string;
            chatModel: {
                state: {
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                    cache: {
                        mutedUserIds: string[];
                        roomStats: import("../common/types/chat-concepts.js").ChatStats;
                        rooms: {
                            [key: string]: {
                                status: ChatStatus;
                                posts: import("../common/types/chat-concepts.js").ChatPost[];
                            };
                        };
                    };
                };
                subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                    cache: {
                        mutedUserIds: string[];
                        roomStats: import("../common/types/chat-concepts.js").ChatStats;
                        rooms: {
                            [key: string]: {
                                status: ChatStatus;
                                posts: import("../common/types/chat-concepts.js").ChatPost[];
                            };
                        };
                    };
                }>) => () => void;
                subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                readonly allowance: {
                    moderateAllChats: boolean;
                    participateInAllChats: boolean;
                    viewAllChats: boolean;
                    banned: boolean;
                };
                updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                session: (label: string) => Promise<{
                    dispose: () => void;
                    room: {
                        readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                        readonly status: ChatStatus;
                        readonly muted: string[];
                        readonly weAreMuted: boolean;
                        readonly weAreBanned: boolean;
                        setRoomStatus(status: ChatStatus): void;
                        post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                        remove(postIds: string[]): void;
                        clear(): void;
                        mute(userId: string): void;
                        unmute(userId: string): void;
                        unmuteAll(): void;
                    };
                }>;
                disconnect: () => Promise<void>;
                reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
            };
            addPrivilege(...privilegeKeys: (keyof typeof chatPrivileges)[]): Promise<void>;
        };
        roomLabel: string;
    }>;
}>;
