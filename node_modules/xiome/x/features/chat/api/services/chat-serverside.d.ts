import * as renraku from "renraku";
import { Rando } from "dbmage";
import { RateLimiter } from "../../../../toolbox/rate-limiter/rate-limiter.js";
import { ChatDraft, ChatMeta, ChatPersistence, ChatPolicy, ChatPost, ChatStats, ChatStatus, ClientRecord } from "../../common/types/chat-concepts.js";
export declare const makeChatServerside: ({ rando, rateLimiter, clientRecord, persistence, headers, policy, getStatsFromServerCore, }: {
    rando: Rando;
    rateLimiter: RateLimiter;
    clientRecord: ClientRecord;
    persistence: ChatPersistence;
    headers: renraku.HttpHeaders;
    policy: ChatPolicy;
    getStatsFromServerCore: (appId: string) => ChatStats;
}) => {
    chatServer: renraku.Service<unknown, {
        persistenceActions: {
            isMuted(userId: string): boolean;
            addPosts(room: string, posts: ChatPost[]): Promise<void>;
            removePosts(room: string, postIds: string[]): Promise<void>;
            fetchRecentPosts(room: string): Promise<ChatPost[]>;
            fetchMutes(): Promise<import("../../common/types/chat-concepts.js").ChatMute[]>;
            clearRoom(room: string): Promise<void>;
            addMute(userIds: string[]): Promise<void>;
            removeMute(userIds: string[]): Promise<void>;
            unmuteAll(): Promise<void>;
            setRoomStatus(room: string, status: ChatStatus): Promise<void>;
            getRoomStatus(room: string): Promise<ChatStatus>;
        };
        headers: renraku.HttpHeaders;
    }, {
        updateUserMeta(meta: ChatMeta): Promise<void>;
        getStats(): Promise<ChatStats>;
        roomSubscribe(room: string): Promise<any>;
        roomUnsubscribe(room: string): Promise<any>;
        post(room: string, draft: ChatDraft): Promise<any>;
        remove(room: string, postIds: string[]): Promise<any>;
        clear(room: string): Promise<any>;
        mute(userIds: string[]): Promise<any>;
        unmute(userIds: string[]): Promise<any>;
        unmuteAll(): Promise<any>;
        setRoomStatus(room: string, status: ChatStatus): Promise<any>;
    }>;
};
