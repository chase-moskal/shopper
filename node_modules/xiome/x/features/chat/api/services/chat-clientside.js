import * as renraku from "renraku";
import { maximumNumberOfPostsShownAtOnce } from "../../common/chat-constants.js";
export const makeChatClientside = ({ state, onChange }) => renraku.api({
    chatClient: renraku.service()
        .policy(async () => { })
        .expose(() => {
        async function triggerChange() {
            await state.wait();
            onChange();
        }
        return {
            async roomStatusChanged(room, status) {
                state.writable.cache = {
                    ...state.writable.cache,
                    rooms: {
                        ...state.writable.cache.rooms,
                        [room]: {
                            ...state.writable.cache.rooms[room],
                            status,
                        },
                    },
                };
                await triggerChange();
            },
            async postsAdded(room, posts) {
                var _a, _b;
                state.writable.cache = {
                    ...state.writable.cache,
                    rooms: {
                        ...state.writable.cache.rooms,
                        [room]: {
                            ...state.writable.cache.rooms[room],
                            posts: [
                                ...(_b = (_a = state.writable.cache.rooms[room]) === null || _a === void 0 ? void 0 : _a.posts) !== null && _b !== void 0 ? _b : [],
                                ...posts,
                            ].slice(0, maximumNumberOfPostsShownAtOnce)
                        },
                    },
                };
                await triggerChange();
            },
            async postsRemoved(room, postIds) {
                var _a, _b;
                state.writable.cache = {
                    ...state.writable.cache,
                    rooms: {
                        ...state.writable.cache.rooms,
                        [room]: {
                            ...state.writable.cache.rooms[room],
                            posts: ((_b = (_a = state.writable.cache.rooms[room]) === null || _a === void 0 ? void 0 : _a.posts) !== null && _b !== void 0 ? _b : [])
                                .filter(post => !postIds.includes(post.postId))
                        },
                    },
                };
                await triggerChange();
            },
            async roomCleared(room) {
                state.writable.cache = {
                    ...state.writable.cache,
                    rooms: {
                        ...state.writable.cache.rooms,
                        [room]: {
                            ...state.writable.cache.rooms[room],
                            posts: [],
                        },
                    },
                };
                await triggerChange();
            },
            async usersMuted(userIds) {
                state.writable.cache = {
                    ...state.writable.cache,
                    mutedUserIds: [
                        ...state.writable.cache.mutedUserIds,
                        ...userIds,
                    ],
                };
                await triggerChange();
            },
            async usersUnmuted(userIds) {
                state.writable.cache = {
                    ...state.writable.cache,
                    mutedUserIds: state.writable.cache.mutedUserIds
                        .filter(userId => !userIds.includes(userId)),
                };
                await triggerChange();
            },
            async unmuteAll() {
                state.writable.cache = {
                    ...state.writable.cache,
                    mutedUserIds: [],
                };
                await triggerChange();
            },
        };
    })
});
//# sourceMappingURL=chat-clientside.js.map