import * as renraku from "renraku";
import { Rando } from "dbmage";
import { makeChatClientside } from "../services/chat-clientside.js";
import { ChatPersistence, ChatPolicy, ChatStats } from "../../common/types/chat-concepts.js";
export declare function makeChatServerCore({ rando, persistence, policy, }: {
    rando: Rando;
    persistence: ChatPersistence;
    policy: ChatPolicy;
}): {
    acceptNewClient: ({ headers, controls, clientside, handleDisconnect }: {
        headers: renraku.HttpHeaders;
        controls: renraku.ConnectionControls;
        clientside: renraku.Remote<ReturnType<typeof makeChatClientside>>;
        handleDisconnect: () => void;
    }) => {
        api: {
            chatServer: renraku.Service<unknown, {
                persistenceActions: {
                    isMuted(userId: string): boolean;
                    addPosts(room: string, posts: import("../../common/types/chat-concepts.js").ChatPost[]): Promise<void>;
                    removePosts(room: string, postIds: string[]): Promise<void>;
                    fetchRecentPosts(room: string): Promise<import("../../common/types/chat-concepts.js").ChatPost[]>;
                    fetchMutes(): Promise<import("../../common/types/chat-concepts.js").ChatMute[]>;
                    clearRoom(room: string): Promise<void>;
                    addMute(userIds: string[]): Promise<void>;
                    removeMute(userIds: string[]): Promise<void>;
                    unmuteAll(): Promise<void>;
                    setRoomStatus(room: string, status: import("../../common/types/chat-concepts.js").ChatStatus): Promise<void>;
                    getRoomStatus(room: string): Promise<import("../../common/types/chat-concepts.js").ChatStatus>;
                };
                headers: renraku.HttpHeaders;
            }, {
                updateUserMeta(meta: import("../../common/types/chat-concepts.js").ChatMeta): Promise<void>;
                getStats(): Promise<ChatStats>;
                roomSubscribe(room: string): Promise<any>;
                roomUnsubscribe(room: string): Promise<any>;
                post(room: string, draft: import("../../common/types/chat-concepts.js").ChatDraft): Promise<any>;
                remove(room: string, postIds: string[]): Promise<any>;
                clear(room: string): Promise<any>;
                mute(userIds: string[]): Promise<any>;
                unmute(userIds: string[]): Promise<any>;
                unmuteAll(): Promise<any>;
                setRoomStatus(room: string, status: import("../../common/types/chat-concepts.js").ChatStatus): Promise<any>;
            }>;
        };
        disconnect(): void;
    };
    readonly clientCount: number;
};
