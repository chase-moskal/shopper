import { FlexStorage } from "dbmage";
import { ChatMute, ChatPost, ChatStatus } from "../../../common/types/chat-concepts.js";
export declare function mockChatPersistence(storage: FlexStorage): Promise<{
    events: {
        roomStatusChanged: (listener: (context: {
            appId: string;
            room: string;
            status: ChatStatus;
        }) => void) => () => void;
        postsAdded: (listener: (context: {
            appId: string;
            room: string;
            posts: ChatPost[];
        }) => void) => () => void;
        postsRemoved: (listener: (context: {
            appId: string;
            room: string;
            postIds: string[];
        }) => void) => () => void;
        roomCleared: (listener: (context: {
            appId: string;
            room: string;
        }) => void) => () => void;
        mutes: (listener: (context: {
            appId: string;
            userIds: string[];
        }) => void) => () => void;
        unmutes: (listener: (context: {
            appId: string;
            userIds: string[];
        }) => void) => () => void;
        unmuteAll: (listener: (context: {
            appId: string;
        }) => void) => () => void;
    };
    namespaceForApp: (appId: string) => {
        isMuted(userId: string): boolean;
        addPosts(room: string, posts: ChatPost[]): Promise<void>;
        removePosts(room: string, postIds: string[]): Promise<void>;
        fetchRecentPosts(room: string): Promise<ChatPost[]>;
        fetchMutes(): Promise<ChatMute[]>;
        clearRoom(room: string): Promise<void>;
        addMute(userIds: string[]): Promise<void>;
        removeMute(userIds: string[]): Promise<void>;
        unmuteAll(): Promise<void>;
        setRoomStatus(room: string, status: ChatStatus): Promise<void>;
        getRoomStatus(room: string): Promise<ChatStatus>;
    };
}>;
