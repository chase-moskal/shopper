var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XiomeChat_instances, _XiomeChat_model_get, _XiomeChat_roomStats_get, _XiomeChat_room, _XiomeChat_dispose, _XiomeChat_scrolledToBottom, _XiomeChat_updateScrolledToBottom, _XiomeChat_coordinateScrollingBehavior, _XiomeChat_renderRoomStats, _XiomeChat_renderModerationHeader, _XiomeChat_renderHistory, _XiomeChat_lastSend, _XiomeChat_updateTooSoon, _XiomeChat_subscribeTooSoon, _XiomeChat_postToChat, _XiomeChat_renderParticipation;
import usersSvg from "../../../../framework/icons/users.svg.js";
import clearIcon from "../../../../framework/icons/clear.svg.js";
import unmuteIcon from "../../../../framework/icons/unmute.svg.js";
import onOffIcon from "../../../../framework/icons/on-off-button.svg.js";
import { pluralize } from "../../../../toolbox/pluralize.js";
import { renderChatPost } from "./renderers/render-chat-post.js";
import { chatPostCoolOff } from "../../common/chat-constants.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { ChatStatus } from "../../common/types/chat-concepts.js";
import { renderChatAuthorship } from "./renderers/render-chat-authorship.js";
import { whenOpReady } from "../../../../framework/op-rendering/when-op-ready.js";
import { Component, html, mixinRequireShare, mixinStyles, property, query } from "../../../../framework/component.js";
import xiomeChatCss from "./xiome-chat.css.js";
let XiomeChat = class XiomeChat extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomeChat_instances.add(this);
        this.room = "default";
        _XiomeChat_room.set(this, void 0);
        _XiomeChat_dispose.set(this, () => { });
        _XiomeChat_scrolledToBottom.set(this, true);
        _XiomeChat_coordinateScrollingBehavior.set(this, () => {
            const ol = this.shadowRoot.querySelector(".history ol");
            if (ol) {
                if (ol.scrollHeight <= ol.clientHeight)
                    __classPrivateFieldSet(this, _XiomeChat_scrolledToBottom, true, "f");
                else if (__classPrivateFieldGet(this, _XiomeChat_scrolledToBottom, "f"))
                    ol.scrollTo(0, ol.scrollHeight - ol.clientHeight);
            }
            else
                __classPrivateFieldSet(this, _XiomeChat_scrolledToBottom, true, "f");
        });
        this.draftValid = false;
        this.tooSoon = false;
        _XiomeChat_lastSend.set(this, Date.now());
        _XiomeChat_updateTooSoon.set(this, () => {
            const since = Date.now() - __classPrivateFieldGet(this, _XiomeChat_lastSend, "f");
            this.tooSoon = since < chatPostCoolOff;
        });
        _XiomeChat_postToChat.set(this, (event) => {
            event.preventDefault();
            const { tooSoon } = this;
            if (!tooSoon) {
                const { value } = this.authorshipInput;
                const draft = { content: value };
                __classPrivateFieldSet(this, _XiomeChat_lastSend, Date.now(), "f");
                this.authorshipInput.text = "";
                __classPrivateFieldGet(this, _XiomeChat_updateTooSoon, "f").call(this);
                __classPrivateFieldGet(this, _XiomeChat_room, "f").post(draft);
            }
        });
    }
    subscribe() {
        __classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).session(this.room)
            .then(({ room, dispose }) => {
            __classPrivateFieldSet(this, _XiomeChat_room, room, "f");
            __classPrivateFieldSet(this, _XiomeChat_dispose, dispose, "f");
        })
            .then(() => this.requestUpdate());
        const unsubs = [
            super.subscribe(),
            () => __classPrivateFieldGet(this, _XiomeChat_dispose, "f").call(this),
            __classPrivateFieldGet(this, _XiomeChat_instances, "m", _XiomeChat_subscribeTooSoon).call(this),
            __classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).subscribeToChange(__classPrivateFieldGet(this, _XiomeChat_coordinateScrollingBehavior, "f")),
        ];
        return () => {
            for (const unsub of unsubs)
                unsub();
        };
    }
    render() {
        return renderOp(__classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).state.connectionOp, () => {
            var _a;
            return html `
			<div class=chatbox>
				${__classPrivateFieldGet(this, _XiomeChat_room, "f") ?
                html `
						${__classPrivateFieldGet(this, _XiomeChat_instances, "m", _XiomeChat_renderModerationHeader).call(this)}
						${((_a = __classPrivateFieldGet(this, _XiomeChat_room, "f")) === null || _a === void 0 ? void 0 : _a.status) === ChatStatus.Online
                    ? [
                        __classPrivateFieldGet(this, _XiomeChat_instances, "m", _XiomeChat_renderHistory).call(this),
                        __classPrivateFieldGet(this, _XiomeChat_instances, "m", _XiomeChat_renderParticipation).call(this),
                        __classPrivateFieldGet(this, _XiomeChat_instances, "m", _XiomeChat_renderRoomStats).call(this)
                    ]
                    : html `
								<slot name=offline>
									chat is offline
								</slot>
							`}
					` :
                null}
			</div>
		`;
        });
    }
};
_XiomeChat_room = new WeakMap();
_XiomeChat_dispose = new WeakMap();
_XiomeChat_scrolledToBottom = new WeakMap();
_XiomeChat_coordinateScrollingBehavior = new WeakMap();
_XiomeChat_lastSend = new WeakMap();
_XiomeChat_updateTooSoon = new WeakMap();
_XiomeChat_postToChat = new WeakMap();
_XiomeChat_instances = new WeakSet();
_XiomeChat_model_get = function _XiomeChat_model_get() {
    return this.share.chatModel;
};
_XiomeChat_roomStats_get = function _XiomeChat_roomStats_get() {
    var _a;
    const statsForRooms = (_a = __classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).state.cache.roomStats) === null || _a === void 0 ? void 0 : _a.statsForRooms;
    if (statsForRooms) {
        return statsForRooms[this.room];
    }
};
_XiomeChat_updateScrolledToBottom = function _XiomeChat_updateScrolledToBottom() {
    const ol = this.shadowRoot.querySelector("ol");
    const { scrollTop, scrollHeight, clientHeight } = ol;
    const scrollTotal = scrollHeight - clientHeight;
    const scrollFromBottom = scrollTotal - scrollTop;
    __classPrivateFieldSet(this, _XiomeChat_scrolledToBottom, scrollFromBottom < 50, "f");
};
_XiomeChat_renderRoomStats = function _XiomeChat_renderRoomStats() {
    const roomStats = __classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_roomStats_get);
    if (roomStats) {
        const { moderators, viewers, participants, totalUsers } = roomStats;
        return __classPrivateFieldGet(this, _XiomeChat_room, "f")
            ? html `
					<p class=chatfooter>
						${usersSvg}
						<span class=user-count>
							${totalUsers} ${pluralize(totalUsers, "user", "users")}
						</span>
						<span class=user-counting-details>
							(${moderators} ${pluralize(moderators, "moderator", "moderators")},
							${participants} ${pluralize(participants, "participant", "participants")},
							${viewers} ${pluralize(viewers, "viewer", "viewers")})
						</span>
					</p>
				`
            : null;
    }
};
_XiomeChat_renderModerationHeader = function _XiomeChat_renderModerationHeader() {
    const status = __classPrivateFieldGet(this, _XiomeChat_room, "f").status;
    const toggleStatus = () => {
        __classPrivateFieldGet(this, _XiomeChat_room, "f").setRoomStatus(__classPrivateFieldGet(this, _XiomeChat_room, "f").status === ChatStatus.Offline
            ? ChatStatus.Online
            : ChatStatus.Offline);
    };
    const muteCount = __classPrivateFieldGet(this, _XiomeChat_room, "f").muted.length;
    return __classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).allowance.moderateAllChats
        ? html `
				<header class=modheader>
					<span>room="${this.room}"</span>
					<span>
						<xio-button
							title="unmute ${muteCount} users"
							?disabled=${muteCount === 0}
							@press=${() => __classPrivateFieldGet(this, _XiomeChat_room, "f").unmuteAll()}>
								${unmuteIcon} ${muteCount}
						</xio-button>
						<xio-button
							title="clear chat room"
							@press=${() => __classPrivateFieldGet(this, _XiomeChat_room, "f").clear()}>
								${clearIcon}
						</xio-button>
						<xio-button
							title="set chat ${status === ChatStatus.Offline ? "online" : "offline"}"
							@press=${toggleStatus}>
								${onOffIcon}
						</xio-button>
					</span>
				</header>
			`
        : null;
};
_XiomeChat_renderHistory = function _XiomeChat_renderHistory() {
    return html `
			<div class=history>
				${__classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).allowance.viewAllChats
        ? html `
						${__classPrivateFieldGet(this, _XiomeChat_room, "f").posts.length
            ? html `
								<ol @scroll=${__classPrivateFieldGet(this, _XiomeChat_instances, "m", _XiomeChat_updateScrolledToBottom)}>
									${__classPrivateFieldGet(this, _XiomeChat_room, "f").posts.map(post => renderChatPost({
                post,
                isModerator: __classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).allowance.moderateAllChats,
                mute: () => __classPrivateFieldGet(this, _XiomeChat_room, "f").mute(post.userId),
                remove: () => __classPrivateFieldGet(this, _XiomeChat_room, "f").remove([post.postId]),
                mutedIds: __classPrivateFieldGet(this, _XiomeChat_room, "f").muted
            }))}
								</ol>
							`
            : html `
								<slot name=no-messages>
									no messages
								</slot>
							`}
					`
        : html `
						<slot name=cannot-view>
							you are not privileged to view the chat
						</slot>
					`}
			</div>
		`;
};
_XiomeChat_subscribeTooSoon = function _XiomeChat_subscribeTooSoon() {
    const interval = setInterval(__classPrivateFieldGet(this, _XiomeChat_updateTooSoon, "f"), 1000);
    return () => clearInterval(interval);
};
_XiomeChat_renderParticipation = function _XiomeChat_renderParticipation() {
    const authorshipArea = () => {
        return __classPrivateFieldGet(this, _XiomeChat_room, "f").weAreBanned
            ? html `<slot name=banned>you are banned</slot>`
            : __classPrivateFieldGet(this, _XiomeChat_room, "f").weAreMuted
                ? html `<slot name=muted>you are muted</slot>`
                : renderChatAuthorship({
                    sendable: !!this.draftValid && !this.tooSoon,
                    onSendClick: __classPrivateFieldGet(this, _XiomeChat_postToChat, "f"),
                    onEnterPress: __classPrivateFieldGet(this, _XiomeChat_postToChat, "f"),
                    onValidityChange: valid => this.draftValid = valid,
                });
    };
    return html `
			<xiome-login-panel>
				${whenOpReady(__classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).state.accessOp, () => html `
					<slot name=logged-out slot=logged-out>
						login to participate in the chat
					</slot>
					<div class=participation>
						${__classPrivateFieldGet(this, _XiomeChat_instances, "a", _XiomeChat_model_get).allowance.participateInAllChats
        ? authorshipArea()
        : html `
								<slot name=cannot-participate>
									you do not have privilege to participate in the chat
								</slot>
							`}
					</div>
				`)}
			</xiome-login-panel>
		`;
};
__decorate([
    property({ type: String })
], XiomeChat.prototype, "room", void 0);
__decorate([
    property()
], XiomeChat.prototype, "draftValid", void 0);
__decorate([
    query(".authorship xio-text-input")
], XiomeChat.prototype, "authorshipInput", void 0);
__decorate([
    property()
], XiomeChat.prototype, "tooSoon", void 0);
XiomeChat = __decorate([
    mixinStyles(xiomeChatCss)
], XiomeChat);
export { XiomeChat };
//# sourceMappingURL=xiome-chat.js.map