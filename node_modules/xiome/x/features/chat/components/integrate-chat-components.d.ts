import { XiomeChat } from "./xiome-chat/xiome-chat.js";
import { XiomeComponentOptions } from "../../../assembly/frontend/components/types/xiome-component-options.js";
export declare function integrateChatComponents({ models, modals }: XiomeComponentOptions): {
    XiomeChat: import("../../../types/mixin.js").Mixin<typeof XiomeChat, import("../../../framework/component.js").WithShare<{
        modals: import("../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        chatModel: {
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                cache: {
                    mutedUserIds: string[];
                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                    rooms: {
                        [key: string]: {
                            status: import("../common/types/chat-concepts.js").ChatStatus;
                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                        };
                    };
                };
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectionOp: import("../../../framework/ops.js").Op<import("../common/types/chat-concepts.js").ChatConnection>;
                cache: {
                    mutedUserIds: string[];
                    roomStats: import("../common/types/chat-concepts.js").ChatStats;
                    rooms: {
                        [key: string]: {
                            status: import("../common/types/chat-concepts.js").ChatStatus;
                            posts: import("../common/types/chat-concepts.js").ChatPost[];
                        };
                    };
                };
            }>) => () => void;
            subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
            readonly allowance: {
                moderateAllChats: boolean;
                participateInAllChats: boolean;
                viewAllChats: boolean;
                banned: boolean;
            };
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            session: (label: string) => Promise<{
                dispose: () => void;
                room: {
                    readonly posts: import("../common/types/chat-concepts.js").ChatPost[];
                    readonly status: import("../common/types/chat-concepts.js").ChatStatus;
                    readonly muted: string[];
                    readonly weAreMuted: boolean;
                    readonly weAreBanned: boolean;
                    setRoomStatus(status: import("../common/types/chat-concepts.js").ChatStatus): void;
                    post(draft: import("../common/types/chat-concepts.js").ChatDraft): void;
                    remove(postIds: string[]): void;
                    clear(): void;
                    mute(userId: string): void;
                    unmute(userId: string): void;
                    unmuteAll(): void;
                };
            }>;
            disconnect: () => Promise<void>;
            reconnect: () => Promise<import("../common/types/chat-concepts.js").ChatConnection>;
        };
    }>>;
};
