import { snapstate } from "@chasemoskal/snapstate";
import { merge } from "../../../../toolbox/merge.js";
import { ops } from "../../../../framework/ops.js";
export function makeQuestionsModelHappy() {
    const adminstate = snapstate({
        access: undefined,
        users: [],
        questions: [],
        boardOps: {},
        postingOp: ops.ready(undefined),
    });
    const state = adminstate.writable;
    const actions = {
        setAccess(access) {
            state.access = access;
        },
        setBoardOp(board, op) {
            state.boardOps = { ...state.boardOps, [board]: op };
        },
        setPostingOp(op) {
            state.postingOp = op;
        },
        addUsers(newUsers) {
            state.users = [...merge(newUsers.filter(u => !!u), state.users, (a, b) => a.userId === b.userId)];
        },
        addQuestions(newQuestions) {
            state.questions = [...merge(newQuestions, state.questions, (a, b) => a.questionId === b.questionId)];
        },
        addAnswer(newAnswer) {
            const question = state.questions
                .find(q => q.questionId === newAnswer.questionId);
            if (!question)
                throw new Error(`can't find question to add answer, question id: "${newAnswer.questionId}"`);
            const newQuestion = {
                ...question,
                answers: [...question.answers, newAnswer],
            };
            state.questions = [...merge([newQuestion], state.questions, (a, b) => a.questionId === b.questionId)];
        },
        setQuestionLike(questionId, like) {
            state.questions = state.questions.map(question => question.questionId === questionId
                ? {
                    ...question,
                    liked: like,
                    likes: question.liked === like
                        ? question.likes
                        : like
                            ? question.likes + 1
                            : question.likes - 1
                }
                : { ...question });
        },
        setAnswerLike(questionId, answerId, status) {
            state.questions = state.questions.map(question => question.questionId === questionId
                ? {
                    ...question,
                    answers: question.answers.map(answer => answer.answerId === answerId
                        ? {
                            ...answer,
                            liked: status,
                            likes: answer.liked === status
                                ? answer.likes
                                : status
                                    ? answer.likes + 1
                                    : answer.likes - 1
                        }
                        : { ...answer })
                }
                : { ...question });
        },
        setAnswerReport(questionId, answerId, status) {
            state.questions = state.questions.map(question => question.questionId === questionId
                ? {
                    ...question,
                    answers: question.answers.map(answer => answer.answerId === answerId
                        ? {
                            ...answer,
                            reported: status,
                            reports: answer.reported === status
                                ? answer.reports
                                : status
                                    ? answer.reports + 1
                                    : answer.reports - 1
                        }
                        : { ...answer })
                }
                : { ...question });
        },
        setQuestionReport(questionId, report) {
            state.questions = state.questions.map(question => question.questionId === questionId
                ? {
                    ...question,
                    reported: report,
                    reports: question.reported === report
                        ? question.reports
                        : report
                            ? question.reports + 1
                            : question.reports - 1
                }
                : { ...question });
        },
        setQuestionArchive(questionId, archive) {
            state.questions = state.questions.map(question => question.questionId === questionId
                ? { ...question, archive }
                : { ...question });
        },
        setAnswerArchive(questionId, answerId, archive) {
            state.questions = state.questions.map(question => question.questionId === questionId
                ? {
                    ...question,
                    answers: question.answers.map(answer => answer.answerId === answerId
                        ? { ...answer, archive }
                        : { ...answer })
                }
                : { ...question });
        },
    };
    return {
        actions,
        state: adminstate.readable,
        subscribe: adminstate.subscribe,
    };
}
//# sourceMappingURL=questions-model-state.js.map