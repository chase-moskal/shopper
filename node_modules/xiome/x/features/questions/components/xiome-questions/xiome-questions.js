var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XiomeQuestions_boardModel, _XiomeQuestions_questionEditor, _XiomeQuestions_getAnswerEditor, _XiomeQuestions_now;
import styles from "./xiome-questions.css.js";
import { sortQuestions } from "./helpers/sort-questions.js";
import { renderQuestion } from "./parts/render-question.js";
import { makeQuestionEditor } from "./parts/editors/question-editor.js";
import { makeAnswerEditorGetter } from "./parts/editors/answer-editor.js";
import { renderModerationPanel } from "./parts/render-moderation-panel.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { renderQuestionEditor } from "./parts/editors/render-question-editor.js";
import { mixinStyles, mixinTicker, html, property, Component, mixinRequireShare } from "../../../../framework/component.js";
let XiomeQuestions = class XiomeQuestions extends mixinTicker(1000)(mixinRequireShare()(Component)) {
    constructor() {
        super(...arguments);
        _XiomeQuestions_boardModel.set(this, void 0);
        _XiomeQuestions_questionEditor.set(this, makeQuestionEditor({
            getBoardModel: () => __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f"),
            requestUpdate: () => this.requestUpdate(),
            getTextInput: () => (this.shadowRoot.querySelector(".question-editor xio-text-input")),
        }));
        _XiomeQuestions_getAnswerEditor.set(this, makeAnswerEditorGetter({
            getBoardModel: () => __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f"),
            requestUpdate: () => this.requestUpdate(),
            getTextInput: (questionId) => (this.shadowRoot.querySelector(`[part="questions-list"] li[data-question-id="${questionId}"] xio-text-input`)),
        }));
        _XiomeQuestions_now.set(this, Date.now());
        this.board = "default";
    }
    tick() {
        __classPrivateFieldSet(this, _XiomeQuestions_now, Date.now(), "f");
    }
    init() {
        __classPrivateFieldSet(this, _XiomeQuestions_boardModel, this.share.questionsModel.makeBoardModel(this.board), "f");
        __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").loadQuestions();
    }
    renderQuestionsBoard() {
        var _a;
        const now = __classPrivateFieldGet(this, _XiomeQuestions_now, "f");
        const { modals } = this.share;
        const questionEditor = __classPrivateFieldGet(this, _XiomeQuestions_questionEditor, "f");
        const { archiveBoard } = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f");
        const access = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getAccess();
        const board = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardName();
        const boardOp = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardOp();
        const postingOp = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getPostingOp();
        const permissions = __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getPermissions();
        const questions = sortQuestions(__classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getQuestions(), (_a = access === null || access === void 0 ? void 0 : access.user) === null || _a === void 0 ? void 0 : _a.userId);
        return renderOp(boardOp, () => html `

			${permissions["moderate questions"]
            ? renderModerationPanel({ modals, board, archiveBoard })
            : null}

			${permissions["post questions"]
            ? renderQuestionEditor({ now, access, postingOp, questionEditor })
            : null}

			${questions.length > 0
            ? html `
					<ol part=questions-list>
						${questions.map(question => html `
							<li data-question-id="${question.questionId}">
								${renderQuestion({
                question,
                now: __classPrivateFieldGet(this, _XiomeQuestions_now, "f"),
                modals: this.share.modals,
                boardModel: __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f"),
                answerEditor: __classPrivateFieldGet(this, _XiomeQuestions_getAnswerEditor, "f").call(this, question.questionId),
            })}
							</li>
						`)}
					</ol>
				`
            : html `<slot name=empty><p>Be the first to post a question!</p></slot>`}
		`);
    }
    render() {
        return __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f") && __classPrivateFieldGet(this, _XiomeQuestions_boardModel, "f").getBoardOp()
            ? this.renderQuestionsBoard()
            : null;
    }
};
_XiomeQuestions_boardModel = new WeakMap();
_XiomeQuestions_questionEditor = new WeakMap();
_XiomeQuestions_getAnswerEditor = new WeakMap();
_XiomeQuestions_now = new WeakMap();
__decorate([
    property({ type: String, reflect: true })
], XiomeQuestions.prototype, "board", void 0);
XiomeQuestions = __decorate([
    mixinStyles(styles)
], XiomeQuestions);
export { XiomeQuestions };
//# sourceMappingURL=xiome-questions.js.map