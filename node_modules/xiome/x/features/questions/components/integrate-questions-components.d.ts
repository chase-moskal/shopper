import { XiomeQuestions } from "./xiome-questions/xiome-questions.js";
import { XiomeComponentOptions } from "../../../assembly/frontend/components/types/xiome-component-options.js";
export declare function integrateQuestionsComponents({ models, modals }: XiomeComponentOptions): {
    XiomeQuestions: import("../../../types/mixin.js").Mixin<typeof XiomeQuestions, import("../../../framework/component.js").WithShare<{
        modals: import("../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        questionsModel: {
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                access: import("../../auth/types/auth-tokens.js").AccessPayload;
                users: import("../../auth/aspects/users/types/user.js").User[];
                questions: import("../api/types/questions-and-answers.js").Question[];
                boardOps: {
                    [key: string]: import("../../../framework/ops.js").Op<void>;
                };
                postingOp: import("../../../framework/ops.js").Op<void>;
            }>) => () => void;
            makeBoardModel: (board: string) => {
                getPermissions(): {
                    readonly "read questions": boolean;
                    readonly "post questions": boolean;
                    readonly "moderate questions": boolean;
                    readonly "answer questions": boolean;
                    readonly "like questions": boolean;
                    readonly "report questions": boolean;
                };
                getBoardName(): string;
                getAccess(): import("../../auth/types/auth-tokens.js").AccessPayload;
                getBoardOp(): import("../../../framework/ops.js").Op<void>;
                getPostingOp(): import("../../../framework/ops.js").Op<void>;
                getQuestions(): {
                    answers: import("../api/types/questions-and-answers.js").Answer[];
                    questionId: string;
                    authorUserId: string;
                    board: string;
                    content: string;
                    archive: boolean;
                    timePosted: number;
                    liked: boolean;
                    likes: number;
                    reports: number;
                    reported: boolean;
                }[];
                getUser(userId: string): import("../../auth/aspects/users/types/user.js").User;
                loadQuestions(): Promise<void>;
                postQuestion({ content }: {
                    content: string;
                }): Promise<import("../api/types/questions-and-answers.js").Question>;
                postAnswer(questionId: string, answerDraft: import("../api/types/answer-draft.js").AnswerDraft): Promise<import("../api/types/questions-and-answers.js").Answer>;
                likeQuestion(questionId: string, like: boolean): Promise<void>;
                likeAnswer(questionId: string, answerId: string, like: boolean): Promise<void>;
                reportQuestion(questionId: string, report: boolean): Promise<void>;
                reportAnswer(questionId: string, answerId: string, report: boolean): Promise<void>;
                archiveQuestion(questionId: string, archive: boolean): Promise<void>;
                archiveAnswer(questionId: string, answerId: string, archive: boolean): Promise<void>;
                archiveBoard(): Promise<void>;
            };
            accessChange: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => void;
        };
    }>>;
};
