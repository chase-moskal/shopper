import * as renraku from "renraku";
import { QuestionsApiOptions } from "./types/questions-api-options.js";
export declare function questionsApi(options: QuestionsApiOptions): {
    questionsReadingService: renraku.Service<import("../../auth/types/auth-metas.js").AnonMeta, import("./types/questions-metas-and-auths.js").QuestionsAnonAuth, {
        fetchQuestions({ board }: {
            board: string;
        }): Promise<{
            users: {
                userId: string;
                profile: import("../../auth/aspects/users/types/profile.js").Profile;
                roles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                stats: import("../../auth/aspects/users/types/user-stats.js").UserStats;
            }[];
            questions: {
                answers: import("./types/questions-and-answers.js").Answer[];
                questionId: string;
                authorUserId: string;
                board: string;
                content: string;
                archive: boolean;
                timePosted: number;
                liked: boolean;
                likes: number;
                reports: number;
                reported: boolean;
            }[];
        }>;
    }>;
    questionsPostingService: renraku.Service<import("../../auth/types/auth-metas.js").UserMeta, import("./types/questions-metas-and-auths.js").QuestionsUserAuth, {
        postQuestion(inputs: {
            questionDraft: import("./types/question-draft.js").QuestionDraft;
        }): Promise<import("./types/questions-and-answers.js").Question>;
        archiveQuestion(inputs: {
            archive: boolean;
            questionId: string;
        }): Promise<void>;
        likeQuestion(inputs: {
            like: boolean;
            questionId: string;
        }): Promise<void>;
        reportQuestion(inputs: {
            report: boolean;
            questionId: string;
        }): Promise<void>;
    }>;
    questionsAnsweringService: renraku.Service<import("../../auth/types/auth-metas.js").UserMeta, import("./types/questions-metas-and-auths.js").QuestionsUserAuth, {
        postAnswer(inputs: {
            questionId: string;
            answerDraft: import("./types/answer-draft.js").AnswerDraft;
        }): Promise<import("./types/questions-and-answers.js").Answer>;
        archiveAnswer(inputs: {
            archive: boolean;
            answerId: string;
        }): Promise<void>;
        likeAnswer(inputs: {
            like: boolean;
            answerId: string;
        }): Promise<void>;
        reportAnswer(inputs: {
            report: boolean;
            answerId: string;
        }): Promise<void>;
    }>;
    questionsModerationService: renraku.Service<import("../../auth/types/auth-metas.js").UserMeta, import("./types/questions-metas-and-auths.js").QuestionsUserAuth, {
        archiveBoard({ board }: {
            board: string;
        }): Promise<void>;
        fetchReportedQuestions(): Promise<void>;
    }>;
};
