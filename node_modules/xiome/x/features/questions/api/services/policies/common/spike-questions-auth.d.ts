import * as renraku from "renraku";
import * as dbmage from "dbmage";
import { AnonAuth, AnonMeta } from "../../../../../auth/types/auth-metas.js";
import { DatabaseSelect } from "../../../../../../assembly/backend/types/database.js";
export declare function spikeQuestionsAuth<xMeta extends AnonMeta, xAuth extends AnonAuth>(meta: xMeta, headers: renraku.HttpHeaders, questionsDatabase: DatabaseSelect<"questions">, basePolicy: renraku.Policy<xMeta, xAuth>): Promise<xAuth & {
    questionsDatabase: {
        tables: import("../../../../../../framework/api/types/unconstrained-tables.js").ConstrainMixedTables<Pick<import("../../../../../../toolbox/types/remove-index.js").RemoveIndex<dbmage.Tables & {
            apps: dbmage.SchemaToTables<{
                registrations: {
                    appId: dbmage.Id;
                    label: string;
                    home: string;
                    origins: string;
                    archived: boolean;
                };
                owners: {
                    appId: dbmage.Id;
                    userId: dbmage.Id;
                };
            }>;
        } & import("../../../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
            auth: {
                users: {
                    accounts: {
                        userId: dbmage.Id;
                        created: number;
                    };
                    profiles: {
                        userId: dbmage.Id;
                        nickname: string;
                        tagline: string;
                        avatar: string;
                    };
                    emails: {
                        userId: dbmage.Id;
                        email: string;
                    };
                    latestLogins: {
                        userId: dbmage.Id;
                        time: number;
                    };
                };
                permissions: {
                    role: {
                        roleId: dbmage.Id;
                        label: string;
                        time: number;
                        hard: boolean;
                        public: boolean;
                        assignable: boolean;
                    };
                    privilege: {
                        privilegeId: dbmage.Id;
                        label: string;
                        hard: boolean;
                        time: number;
                    };
                    userHasRole: {
                        userId: dbmage.Id;
                        roleId: dbmage.Id;
                        timeframeStart: number;
                        timeframeEnd: number;
                        public: boolean;
                        hard: boolean;
                        time: number;
                    };
                    roleHasPrivilege: {
                        roleId: dbmage.Id;
                        privilegeId: dbmage.Id;
                        immutable: boolean;
                        active: boolean;
                        time: number;
                    };
                };
            };
            notes: {
                notes: import("../../../../../notes/types/notes-concepts.js").Database.NoteBase;
                questionDetails: import("../../../../../notes/types/notes-concepts.js").Database.NoteDetails.Question;
            };
            store: import("../../../../../store/backend/database/types/schema.js").StoreSchemaUnconnected;
            videos: {
                dacastAccountLinks: import("../../../../../videos/types/dacast-link.js").DacastLinkRow;
                viewPrivileges: {
                    label: string;
                    privilegeId: dbmage.Id;
                };
                viewDacast: {
                    label: string;
                    dacastId: string;
                    type: import("../../../../../videos/dacast/types/dacast-data.js").DacastData.ContentType;
                };
            };
            example: {
                examplePosts: {
                    exampleId: dbmage.Id;
                    something: string;
                };
            };
            questions: {
                questionPosts: {
                    questionId: dbmage.Id;
                    authorUserId: dbmage.Id;
                    board: string;
                    content: string;
                    archive: boolean;
                    timePosted: number;
                };
                answerPosts: import("../../../types/questions-schema.js").AnswerPostRow;
                likes: {
                    userId: dbmage.Id;
                    itemId: dbmage.Id;
                };
                reports: {
                    userId: dbmage.Id;
                    itemId: dbmage.Id;
                };
            };
        }>>, "questions">>;
        transaction: <xResult>(action: ({}: {
            tables: import("../../../../../../framework/api/types/unconstrained-tables.js").ConstrainMixedTables<Pick<import("../../../../../../toolbox/types/remove-index.js").RemoveIndex<dbmage.Tables & {
                apps: dbmage.SchemaToTables<{
                    registrations: {
                        appId: dbmage.Id;
                        label: string;
                        home: string;
                        origins: string;
                        archived: boolean;
                    };
                    owners: {
                        appId: dbmage.Id;
                        userId: dbmage.Id;
                    };
                }>;
            } & import("../../../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
                auth: {
                    users: {
                        accounts: {
                            userId: dbmage.Id;
                            created: number;
                        };
                        profiles: {
                            userId: dbmage.Id;
                            nickname: string;
                            tagline: string;
                            avatar: string;
                        };
                        emails: {
                            userId: dbmage.Id;
                            email: string;
                        };
                        latestLogins: {
                            userId: dbmage.Id;
                            time: number;
                        };
                    };
                    permissions: {
                        role: {
                            roleId: dbmage.Id;
                            label: string;
                            time: number;
                            hard: boolean;
                            public: boolean;
                            assignable: boolean;
                        };
                        privilege: {
                            privilegeId: dbmage.Id;
                            label: string;
                            hard: boolean;
                            time: number;
                        };
                        userHasRole: {
                            userId: dbmage.Id;
                            roleId: dbmage.Id;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        };
                        roleHasPrivilege: {
                            roleId: dbmage.Id;
                            privilegeId: dbmage.Id;
                            immutable: boolean;
                            active: boolean;
                            time: number;
                        };
                    };
                };
                notes: {
                    notes: import("../../../../../notes/types/notes-concepts.js").Database.NoteBase;
                    questionDetails: import("../../../../../notes/types/notes-concepts.js").Database.NoteDetails.Question;
                };
                store: import("../../../../../store/backend/database/types/schema.js").StoreSchemaUnconnected;
                videos: {
                    dacastAccountLinks: import("../../../../../videos/types/dacast-link.js").DacastLinkRow;
                    viewPrivileges: {
                        label: string;
                        privilegeId: dbmage.Id;
                    };
                    viewDacast: {
                        label: string;
                        dacastId: string;
                        type: import("../../../../../videos/dacast/types/dacast-data.js").DacastData.ContentType;
                    };
                };
                example: {
                    examplePosts: {
                        exampleId: dbmage.Id;
                        something: string;
                    };
                };
                questions: {
                    questionPosts: {
                        questionId: dbmage.Id;
                        authorUserId: dbmage.Id;
                        board: string;
                        content: string;
                        archive: boolean;
                        timePosted: number;
                    };
                    answerPosts: import("../../../types/questions-schema.js").AnswerPostRow;
                    likes: {
                        userId: dbmage.Id;
                        itemId: dbmage.Id;
                    };
                    reports: {
                        userId: dbmage.Id;
                        itemId: dbmage.Id;
                    };
                };
            }>>, "questions">>;
            abort: () => Promise<void>;
        }) => xResult) => Promise<xResult>;
    };
}>;
