var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xio-checkbox.css.js";
import { CheckEvent } from "./events/check-event.js";
import { Component, html, mixinStyles, property, mixinFocusable } from "../../../framework/component.js";
import { ops } from "../../../framework/ops.js";
import checkIcon from "../../../framework/icons/check.svg.js";
import spinnerIcon from "../../../framework/icons/spinner.svg.js";
import warningIcon from "../../../framework/icons/warning.svg.js";
let XioCheckbox = class XioCheckbox extends Component {
    constructor() {
        super(...arguments);
        this.loading = ops.none();
        this["initially-checked"] = false;
        this["error-message"] = "error";
        this.disabled = false;
        this.handleClick = () => {
            if (!this.disabled) {
                this.toggle();
                const activeElement = document.activeElement;
                if (activeElement)
                    activeElement.blur();
            }
        };
    }
    init() {
        this.loading = ops.ready(this["initially-checked"]);
    }
    get checked() {
        return ops.value(this.loading);
    }
    set checked(value) {
        this.loading = ops.ready(value);
    }
    async toggle(previousChecked = ops.value(this.loading), dispatchEvent = true) {
        const checked = !previousChecked;
        const isNotDisabled = !this.disabled;
        const isLoadingDone = ops.isReady(this.loading);
        return (isNotDisabled && isLoadingDone)
            ? ops.operation({
                setOp: op => this.loading = op,
                errorReason: this["error-message"],
                promise: (async () => {
                    var _a;
                    await ((_a = this.save) !== null && _a !== void 0 ? _a : (async () => { }))(checked);
                    if (dispatchEvent) {
                        const event = new CheckEvent(this);
                        if (this.oncheck)
                            this.oncheck(event);
                        this.dispatchEvent(event);
                        event.stopPropagation();
                    }
                    return checked;
                })(),
            })
            : checked;
    }
    render() {
        return html `
			<button
				data-mode="${ops.mode(this.loading)}"
				?data-checked=${ops.value(this.loading)}
				@click=${this.handleClick}>
					${ops.select(this.loading, {
            none: () => null,
            loading: () => spinnerIcon,
            error: reason => html `${warningIcon}<div class=error>${reason}</div>`,
            ready: checked => checked
                ? checkIcon
                : null,
        })}
			</button>
		`;
    }
};
__decorate([
    property()
], XioCheckbox.prototype, "loading", void 0);
__decorate([
    property({ type: Boolean })
], XioCheckbox.prototype, "initially-checked", void 0);
__decorate([
    property({ type: String })
], XioCheckbox.prototype, "error-message", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioCheckbox.prototype, "disabled", void 0);
__decorate([
    property({ type: Function })
], XioCheckbox.prototype, "oncheck", void 0);
__decorate([
    property({ type: Function })
], XioCheckbox.prototype, "save", void 0);
XioCheckbox = __decorate([
    mixinFocusable,
    mixinStyles(styles)
], XioCheckbox);
export { XioCheckbox };
//# sourceMappingURL=xio-checkbox.js.map