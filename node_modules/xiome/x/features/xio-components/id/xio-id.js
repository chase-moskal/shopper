var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xio-id.css.js";
import clipboardIcon from "../../../framework/icons/clipboard.svg.js";
import { Component, html, mixinStyles, property, mixinFocusable } from "../../../framework/component.js";
let XioId = class XioId extends Component {
    constructor() {
        super(...arguments);
        this.copied = false;
    }
    async copy() {
        try {
            await navigator.clipboard.writeText(this.id);
            const activeElement = document.activeElement;
            if (activeElement)
                activeElement.blur();
            if (this.copyTimeout) {
                clearTimeout(this.copyTimeout);
            }
            this.copied = true;
            this.copyTimeout = setTimeout(() => {
                this.copied = false;
                this.copyTimeout = undefined;
            }, 1000);
        }
        catch (error) {
            console.error("failed to copy");
        }
    }
    render() {
        return html `
			<button class=container @click=${this.copy}>
				<div class=id>${this.id}</div>
				<div class=copy>
					${clipboardIcon}
				</div>
			</button>
		`;
    }
};
__decorate([
    property()
], XioId.prototype, "id", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioId.prototype, "copied", void 0);
XioId = __decorate([
    mixinFocusable,
    mixinStyles(styles)
], XioId);
export { XioId };
//# sourceMappingURL=xio-id.js.map