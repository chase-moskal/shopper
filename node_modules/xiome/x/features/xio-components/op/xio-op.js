var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xio-op.css.js";
import { ops } from "../../../framework/ops.js";
import svgWarning from "../../../framework/icons/warning.svg.js";
import svgSpinner from "../../../framework/icons/spinner.svg.js";
import { Component, html, mixinStyles, property } from "../../../framework/component.js";
let XioOp = class XioOp extends Component {
    constructor() {
        super(...arguments);
        this.mode = "none";
        this._op = ops.none();
        this.errorIcon = svgWarning;
        this.loadingIcon = svgSpinner;
        this["loading-message"] = "";
        this["error-message"] = "error";
        this["hide-error-text"] = false;
    }
    get op() {
        return this._op;
    }
    set op(op) {
        const old = this._op;
        this._op = op;
        this.mode = ops.mode(op);
        this.requestUpdate("op", old);
    }
    firstUpdated() {
        if (this["start-loading"]) {
            this.op = ops.loading();
        }
    }
    render() {
        return ops.select(this.op, {
            none: () => html `
				<slot name=none></slot>
			`,
            loading: () => html `
				<slot name=loading>
					${this.loadingIcon}
					${this["loading-message"]
                ? html `<span>${this["loading-message"]}</span>`
                : null}
				</slot>
			`,
            error: reason => html `
				<slot name=error>
					${this.errorIcon}
					${this["hide-error-text"]
                ? null
                : html `<span>${reason !== null && reason !== void 0 ? reason : this["error-message"]}</span>`}
					
				</slot>
			`,
            ready: () => html `
				<slot></slot>
			`,
        });
    }
};
__decorate([
    property({ type: String, reflect: true })
], XioOp.prototype, "mode", void 0);
__decorate([
    property({ type: Object })
], XioOp.prototype, "op", null);
__decorate([
    property()
], XioOp.prototype, "errorIcon", void 0);
__decorate([
    property()
], XioOp.prototype, "loadingIcon", void 0);
__decorate([
    property({ type: String })
], XioOp.prototype, "loading-message", void 0);
__decorate([
    property({ type: String })
], XioOp.prototype, "error-message", void 0);
__decorate([
    property({ type: Boolean })
], XioOp.prototype, "hide-error-text", void 0);
__decorate([
    property({ type: Boolean })
], XioOp.prototype, "start-loading", void 0);
XioOp = __decorate([
    mixinStyles(styles)
], XioOp);
export { XioOp };
//# sourceMappingURL=xio-op.js.map