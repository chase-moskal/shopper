var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xio-button.css.js";
import { PressEvent } from "./events/press-event.js";
import { Component, html, mixinStyles, property, mixinFocusable } from "../../../framework/component.js";
let XioButton = class XioButton extends Component {
    constructor() {
        super(...arguments);
        this["disabled"] = false;
        this.handleClick = () => {
            const event = new PressEvent(this);
            if (this.onpress)
                this.onpress(event);
            if (!this.disabled)
                this.dispatchEvent(event);
            event.stopPropagation();
        };
    }
    focus() {
        this.shadowRoot.querySelector("button").focus();
    }
    render() {
        return html `
			<button
				part=button
				@click=${this.handleClick}
				?disabled=${this.disabled}>
					<slot part=button-slot></slot>
			</button>
		`;
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], XioButton.prototype, "disabled", void 0);
__decorate([
    property({ type: Function })
], XioButton.prototype, "onpress", void 0);
XioButton = __decorate([
    mixinFocusable,
    mixinStyles(styles)
], XioButton);
export { XioButton };
//# sourceMappingURL=xio-button.js.map