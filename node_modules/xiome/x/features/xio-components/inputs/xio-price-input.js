var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XioPriceInput_instances, _XioPriceInput_focusInputParent, _XioPriceInput_unfocusInputParent, _XioPriceInput_resizeInput, _XioPriceInput_validateInput, _XioPriceInput_handleButtonClick, _XioPriceInput_handleInputChange;
import { ValueChangeEvent } from "./events/value-change-event.js";
import { Component, html, property, mixinStyles } from "../../../framework/component.js";
import styles from "./xio-price-input.css.js";
import svgWarning from "../../../framework/icons/warning.svg.js";
import svgCircleCheck from "../../../framework/icons/circle-check.svg.js";
import chevronUpSvg from "../../../framework/icons/feather/chevron-up.svg.js";
import chevronDownSvg from "../../../framework/icons/feather/chevron-down.svg.js";
var Operation;
(function (Operation) {
    Operation[Operation["INCREMENT"] = 0] = "INCREMENT";
    Operation[Operation["DECREMENT"] = 1] = "DECREMENT";
})(Operation || (Operation = {}));
let XioPriceInput = class XioPriceInput extends Component {
    constructor() {
        super(...arguments);
        _XioPriceInput_instances.add(this);
        this.min = 1.00;
        this.max = 10.00;
        this.step = "0.5";
        this["initial-value"] = "";
        this.currency = "USD";
        this.symbol = "$";
        this.problems = [];
        this.valid = true;
        this.showValidation = false;
        _XioPriceInput_focusInputParent.set(this, () => {
            this.inputParent.classList.add('focussed');
        });
        _XioPriceInput_unfocusInputParent.set(this, () => {
            this.inputParent.classList.remove('focussed');
        });
        _XioPriceInput_resizeInput.set(this, () => {
            const { input } = this;
            const size = input.value.length > 1 ? input.value.length : 3;
            input.style.width = `${size + 0.4}ch`;
        });
        _XioPriceInput_validateInput.set(this, (value) => {
            this.showValidation = true;
            this.problems = this.validator ? this.validator(Number(value)) : [];
            this.valid = this.problems.length < 1;
        });
        _XioPriceInput_handleInputChange.set(this, (event) => {
            const input = event.target;
            this.inputValue = input.value;
            __classPrivateFieldGet(this, _XioPriceInput_validateInput, "f").call(this, this.inputValue);
            __classPrivateFieldGet(this, _XioPriceInput_resizeInput, "f").call(this);
            this.dispatchEvent(new ValueChangeEvent(this.inputValue));
        });
    }
    get input() {
        return this.shadowRoot
            ? this.shadowRoot.querySelector('#price')
            : undefined;
    }
    get inputParent() {
        return this.shadowRoot
            ? this.shadowRoot.querySelector('.price__input__parent')
            : undefined;
    }
    get value() {
        return this.valid ? this.inputValue : undefined;
    }
    init() {
        this.inputValue = this["initial-value"];
    }
    render() {
        const { symbol, currency, inputValue, readonly, valid, showValidation, problems } = this;
        const inputWidth = this["initial-value"]
            ? this["initial-value"].length
            : 4;
        const icon = showValidation
            ? valid
                ? svgCircleCheck
                : svgWarning
            : null;
        return html `
			<div class="container">
				<label for="price" part="label"><slot></slot></label>
				<div class="inner__container">
					<button
						?disabled=${readonly}
						@click=${() => __classPrivateFieldGet(this, _XioPriceInput_instances, "m", _XioPriceInput_handleButtonClick).call(this, Operation.DECREMENT)}
						class="decrement">
						${chevronDownSvg}
					</button>
					<div class="price__input__parent" tabindex="-1" ?data-valid=${valid}>
						<span class="symbol">${symbol}</span>
						<input
							?readonly=${readonly}
							@focus=${__classPrivateFieldGet(this, _XioPriceInput_focusInputParent, "f")}
							@blur=${__classPrivateFieldGet(this, _XioPriceInput_unfocusInputParent, "f")}
							@input=${__classPrivateFieldGet(this, _XioPriceInput_handleInputChange, "f")}
							.value=${inputValue}
							type="number"
							id="price"
							style="width: ${inputWidth}ch"
							placeholder="0.00"
						/>
						${icon}
						<span class="currency">${currency}</span>
					</div>
					<button
						?disabled=${readonly}
						@click=${() => __classPrivateFieldGet(this, _XioPriceInput_instances, "m", _XioPriceInput_handleButtonClick).call(this, Operation.INCREMENT)}
						class="increment">
						${chevronUpSvg}
					</button>
				</div>
				<ul part=problems>
					${!valid
            ? problems.map(problem => html `
							<li>${problem}</li>
						`)
            : null}
				</ul>
			</div>
		`;
    }
};
_XioPriceInput_focusInputParent = new WeakMap();
_XioPriceInput_unfocusInputParent = new WeakMap();
_XioPriceInput_resizeInput = new WeakMap();
_XioPriceInput_validateInput = new WeakMap();
_XioPriceInput_handleInputChange = new WeakMap();
_XioPriceInput_instances = new WeakSet();
_XioPriceInput_handleButtonClick = function _XioPriceInput_handleButtonClick(type) {
    const { step, inputValue } = this;
    if (type === Operation.INCREMENT)
        this.inputValue = (Number(inputValue) + Number(step)).toFixed(2);
    else if (type === Operation.DECREMENT)
        this.inputValue = (Number(inputValue) - Number(step)).toFixed(2);
    __classPrivateFieldGet(this, _XioPriceInput_validateInput, "f").call(this, this.inputValue);
    __classPrivateFieldGet(this, _XioPriceInput_resizeInput, "f").call(this);
    this.dispatchEvent(new ValueChangeEvent(this.inputValue));
};
__decorate([
    property({ type: Number, reflect: true })
], XioPriceInput.prototype, "min", void 0);
__decorate([
    property({ type: Number, reflect: true })
], XioPriceInput.prototype, "max", void 0);
__decorate([
    property({ type: String, reflect: true })
], XioPriceInput.prototype, "step", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioPriceInput.prototype, "readonly", void 0);
__decorate([
    property({ type: String })
], XioPriceInput.prototype, "initial-value", void 0);
__decorate([
    property({ type: String })
], XioPriceInput.prototype, "currency", void 0);
__decorate([
    property({ type: String })
], XioPriceInput.prototype, "symbol", void 0);
__decorate([
    property({ type: String })
], XioPriceInput.prototype, "inputValue", void 0);
__decorate([
    property({ type: Object })
], XioPriceInput.prototype, "problems", void 0);
__decorate([
    property({ type: Boolean })
], XioPriceInput.prototype, "valid", void 0);
__decorate([
    property({ type: Boolean })
], XioPriceInput.prototype, "showValidation", void 0);
__decorate([
    property({ type: Function })
], XioPriceInput.prototype, "validator", void 0);
XioPriceInput = __decorate([
    mixinStyles(styles)
], XioPriceInput);
export { XioPriceInput };
//# sourceMappingURL=xio-price-input.js.map