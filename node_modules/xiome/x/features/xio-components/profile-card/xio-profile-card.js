var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XioProfileCard_state;
import { snapstate, debounce } from "@chasemoskal/snapstate";
import styles from "./xio-profile-card.css.js";
import { ops } from "../../../framework/ops.js";
import { deepEqual } from "../../../toolbox/deep.js";
import { renderText } from "./renders/render-text.js";
import { renderRoles } from "./renders/render-roles.js";
import { select } from "../../../toolbox/select/select.js";
import { renderDetails } from "./renders/render-details.js";
import { makeProfileDraft } from "./helpers/make-profile-draft.js";
import { renderOp } from "../../../framework/op-rendering/render-op.js";
import { Component, property, html } from "../../../framework/component.js";
import { mixinStyles } from "../../../framework/component/mixins/mixin-styles.js";
import { profileValidators } from "../../auth/aspects/users/routines/personal/validate-profile-draft.js";
let XioProfileCard = class XioProfileCard extends Component {
    constructor() {
        super(...arguments);
        _XioProfileCard_state.set(this, snapstate({
            busy: ops.ready(undefined),
        }));
        this.profileDraft = undefined;
        this.problems = [];
        this.handleChange = debounce(200, () => {
            if (!this.user)
                return;
            const { profileDraft, isChanged } = this.generateNewProfileDraftFromInputs();
            this.profileDraft = isChanged ? profileDraft : undefined;
        });
        this.handleSave = async () => {
            const { profileDraft } = this;
            await ops.operation({
                promise: this.saveProfile(profileDraft)
                    .finally(() => {
                    this.profileDraft = null;
                }),
                setOp: op => __classPrivateFieldGet(this, _XioProfileCard_state, "f").writable.busy = op,
            });
            this.requestUpdate();
            await this.updateComplete;
            const setToTextField = (field, text) => {
                const input = this.shadowRoot.querySelector(`xio-text-input[data-field="${field}"]`);
                input.text = text;
            };
            setToTextField("nickname", profileDraft.nickname);
            setToTextField("tagline", profileDraft.tagline);
        };
    }
    init() {
        this.addSubscription(() => __classPrivateFieldGet(this, _XioProfileCard_state, "f").subscribe(() => this.requestUpdate()));
    }
    get draftIsChanged() {
        return !!this.profileDraft;
    }
    get readonly() {
        return !this.saveProfile;
    }
    getTextInputField(name) {
        return select(`xio-text-input[data-field="${name}"]`, this.shadowRoot);
    }
    generateNewProfileDraftFromInputs() {
        const { profile } = this.user;
        const profileDraft = makeProfileDraft(profile);
        const nicknameInput = this.getTextInputField("nickname");
        if (!nicknameInput)
            return { profileDraft, isChanged: false };
        const taglineInput = this.getTextInputField("tagline");
        profileDraft.nickname = nicknameInput.value;
        profileDraft.tagline = taglineInput.value;
        this.problems = [...nicknameInput.problems, ...taglineInput.problems];
        const isChanged = !deepEqual(makeProfileDraft(profile), profileDraft);
        return { profileDraft, isChanged };
    }
    render() {
        const { user, draftIsChanged } = this;
        if (!user)
            return null;
        const avatarSpec = user.profile.avatar;
        return renderOp(__classPrivateFieldGet(this, _XioProfileCard_state, "f").readable.busy, () => html `
			<div class=container ?data-readonly=${this.readonly}>
				<xio-avatar part=avatar .spec=${avatarSpec}></xio-avatar>
				<div class=box>
					<div part=nameplate>
						${renderText({
            field: "nickname",
            initial: this.profileDraft
                ? this.profileDraft.nickname
                : user.profile.nickname,
            text: user.profile.nickname,
            input: this.readonly
                ? undefined
                : {
                    label: "nickname",
                    readonly: false,
                    draftIsChanged,
                    validator: profileValidators.nickname,
                    onvaluechange: this.handleChange,
                }
        })}
						${renderText({
            field: "tagline",
            initial: this.profileDraft
                ? this.profileDraft.tagline
                : user.profile.tagline,
            text: user.profile.tagline,
            input: this.readonly
                ? undefined
                : {
                    label: "tagline",
                    readonly: false,
                    draftIsChanged,
                    validator: profileValidators.tagline,
                    onvaluechange: this.handleChange,
                }
        })}
						${renderRoles(user)}
						${this.readonly ? null : html `
							<div class=buttonbar>
								<xio-button
									?disabled=${!this.profileDraft || this.problems.length > 0}
									@press=${this.handleSave}>
										<slot name=save-button>save profile</slot>
								</xio-button>
							</div>
						`}
					</div>
					${this["show-details"]
            ? renderDetails(user)
            : null}
				</div>
			</div>
		`);
    }
};
_XioProfileCard_state = new WeakMap();
__decorate([
    property({ type: Boolean })
], XioProfileCard.prototype, "show-details", void 0);
__decorate([
    property({ type: Object })
], XioProfileCard.prototype, "user", void 0);
__decorate([
    property({ type: Object })
], XioProfileCard.prototype, "saveProfile", void 0);
__decorate([
    property({ type: Object })
], XioProfileCard.prototype, "profileDraft", void 0);
XioProfileCard = __decorate([
    mixinStyles(styles)
], XioProfileCard);
export { XioProfileCard };
//# sourceMappingURL=xio-profile-card.js.map