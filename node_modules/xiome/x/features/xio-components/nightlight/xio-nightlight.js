var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XioNightlight_instances, _XioNightlight_storage, _XioNightlight_setNightOnSourceElement, _XioNightlight_dispatchChange;
import { NightlightChangeEvent } from "./details/nightlight-change-event.js";
import { Component, property, html, mixinStyles } from "../../../framework/component.js";
import { nightlightSettingStorage } from "./details/nightlight-setting-storage.js";
import xioThemerCss from "./xio-nightlight.css.js";
import sunSvg from "../../../framework/icons/feather/sun.svg.js";
import moonSvg from "../../../framework/icons/feather/moon.svg.js";
const nightlightDataAttributeName = "data-nightlight";
/*

nightlight is a toggle button for dark theme.

in "night" mode, the "data-nightlight" attribute is set on the source element.

    <body data-nightlight>

if you want to start your website in night mode by default,
just start your source element with the "data-nightlight" attribute.

*/
let XioNightlight = class XioNightlight extends Component {
    constructor() {
        super(...arguments);
        _XioNightlight_instances.add(this);
        this["show-destination-state"] = false;
        this["title-to-night"] = "turn down the lights";
        this["title-to-day"] = "turn up the lights";
        this.sourceElement = document.documentElement;
        _XioNightlight_storage.set(this, nightlightSettingStorage());
    }
    firstUpdated() {
        const settings = __classPrivateFieldGet(this, _XioNightlight_storage, "f").load();
        if (settings)
            this.night = settings.night;
        window.addEventListener("nightlightChange", event => {
            if (event.target !== this)
                this.requestUpdate();
        });
    }
    get night() {
        return this.sourceElement.getAttribute(nightlightDataAttributeName) !== null;
    }
    set night(value) {
        __classPrivateFieldGet(this, _XioNightlight_storage, "f").save({ night: value });
        const previous = this.night;
        if (value !== previous) {
            __classPrivateFieldGet(this, _XioNightlight_instances, "m", _XioNightlight_setNightOnSourceElement).call(this, value);
            this.requestUpdate();
            __classPrivateFieldGet(this, _XioNightlight_instances, "m", _XioNightlight_dispatchChange).call(this);
        }
    }
    toggle(night = !this.night) {
        this.night = night;
    }
    render() {
        const { night } = this;
        const showNight = this["show-destination-state"]
            ? !night
            : night;
        return html `
			<button
				part=button
				title="${night ? this["title-to-day"] : this["title-to-night"]}"
				?data-nightlight=${night}
				@click=${() => this.toggle()}>
					${showNight
            ? html `
							<slot name=night>
								${moonSvg}
							</slot>
						`
            : html `
							<slot name=day>
								${sunSvg}
							</slot>
						`}
			</button>
		`;
    }
};
_XioNightlight_storage = new WeakMap();
_XioNightlight_instances = new WeakSet();
_XioNightlight_setNightOnSourceElement = function _XioNightlight_setNightOnSourceElement(night) {
    if (night)
        this.sourceElement.setAttribute(nightlightDataAttributeName, "");
    else
        this.sourceElement.removeAttribute(nightlightDataAttributeName);
};
_XioNightlight_dispatchChange = function _XioNightlight_dispatchChange() {
    const event = new NightlightChangeEvent({ night: this.night });
    this.dispatchEvent(event);
    if (this.onNightlightChange)
        this.onNightlightChange(event);
};
XioNightlight.NightlightChangeEvent = NightlightChangeEvent;
__decorate([
    property({ type: Boolean, reflect: true })
], XioNightlight.prototype, "show-destination-state", void 0);
__decorate([
    property({ type: String, reflect: true })
], XioNightlight.prototype, "title-to-night", void 0);
__decorate([
    property({ type: String, reflect: true })
], XioNightlight.prototype, "title-to-day", void 0);
XioNightlight = __decorate([
    mixinStyles(xioThemerCss)
], XioNightlight);
export { XioNightlight };
//# sourceMappingURL=xio-nightlight.js.map