var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XioMenuItem_hasPanel, _XioMenuItem_handleButtonClick;
import xioMenuItemCss from "./styles/xio-menu-item.css.js";
import { getAssignedElements } from "./utils/get-assigned-elements.js";
import { Component, property, html, mixinStyles } from "../../../framework/component.js";
export class MenuPanelChangeEvent extends CustomEvent {
    constructor(detail) {
        super("menuPanelChange", { detail, bubbles: true });
    }
}
let XioMenuItem = class XioMenuItem extends Component {
    constructor() {
        super(...arguments);
        _XioMenuItem_hasPanel.set(this, false);
        this.theme = "";
        this.lefty = false;
        this.open = false;
        _XioMenuItem_handleButtonClick.set(this, () => {
            if (__classPrivateFieldGet(this, _XioMenuItem_hasPanel, "f")) {
                this.toggle();
                this.shadowRoot.querySelector("button").focus();
            }
        });
    }
    toggle(open = !this.open) {
        this.open = open;
        const event = new MenuPanelChangeEvent({ open });
        this.dispatchEvent(event);
        if (this.onMenuPanelChange)
            this.onMenuPanelChange(event);
    }
    updated(changedProperties) {
        const panelSlot = this.shadowRoot.querySelector(`slot[name="panel"]`);
        const panelIsProvided = !!getAssignedElements(panelSlot).length;
        if (__classPrivateFieldGet(this, _XioMenuItem_hasPanel, "f") !== panelIsProvided) {
            __classPrivateFieldSet(this, _XioMenuItem_hasPanel, panelIsProvided, "f");
            this.requestUpdate();
        }
    }
    render() {
        return html `
			<button
				part=button
				tabindex=${__classPrivateFieldGet(this, _XioMenuItem_hasPanel, "f") ? 0 : -1}
				@click=${__classPrivateFieldGet(this, _XioMenuItem_handleButtonClick, "f")}>
					<slot part=buttoncontent></slot>
			</button>
			<slot name=panel part=panel></slot>
		`;
    }
};
_XioMenuItem_hasPanel = new WeakMap();
_XioMenuItem_handleButtonClick = new WeakMap();
__decorate([
    property({ type: String, reflect: true })
], XioMenuItem.prototype, "theme", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioMenuItem.prototype, "lefty", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioMenuItem.prototype, "open", void 0);
XioMenuItem = __decorate([
    mixinStyles(xioMenuItemCss)
], XioMenuItem);
export { XioMenuItem };
//# sourceMappingURL=xio-menu-item.js.map