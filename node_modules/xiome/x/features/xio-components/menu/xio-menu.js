var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XioMenu_instances, _XioMenu_snap, _XioMenu_untrack, _XioMenu_scrollEvents, _XioMenu_scrollListener, _XioMenu_handleBlanketClick, _XioMenu_enforceOnePanelOpen, _XioMenu_handleMenuPanelChange;
import { snapstate } from "@chasemoskal/snapstate";
import { getAssignedElements } from "./utils/get-assigned-elements.js";
import { XioMenuItem } from "./xio-menu-item.js";
import { Component, property, html, mixinStyles } from "../../../framework/component.js";
import xioMenuCss from "./styles/xio-menu.css.js";
let XioMenu = class XioMenu extends Component {
    constructor() {
        super(...arguments);
        _XioMenu_instances.add(this);
        this.theme = "concrete";
        this.active = false;
        this.sticky = false;
        this.lefty = false;
        _XioMenu_snap.set(this, snapstate({
            activeIndex: undefined,
            scrollTop: 0,
        }));
        _XioMenu_untrack.set(this, () => { });
        _XioMenu_scrollEvents.set(this, ["scroll", "resize"]);
        _XioMenu_scrollListener.set(this, () => {
            var _a, _b;
            if (!this.active)
                __classPrivateFieldGet(this, _XioMenu_snap, "f").state.scrollTop = this.sticky
                    ? (_b = (_a = window.scrollY) !== null && _a !== void 0 ? _a : window.pageYOffset) !== null && _b !== void 0 ? _b : 0
                    : 0;
        });
        _XioMenu_handleBlanketClick.set(this, () => {
            const items = this.getMenuItems();
            for (const item of items)
                item.toggle(false);
        });
        _XioMenu_handleMenuPanelChange.set(this, ({ target, detail: { open } }) => {
            const menuItems = this.getMenuItems();
            if (open)
                __classPrivateFieldGet(this, _XioMenu_instances, "m", _XioMenu_enforceOnePanelOpen).call(this, target, menuItems);
            this.active = !!menuItems.find(item => item.open);
            __classPrivateFieldGet(this, _XioMenu_scrollListener, "f").call(this);
        });
    }
    createRenderRoot() {
        const shadowRoot = super.createRenderRoot();
        shadowRoot.addEventListener("slotchange", () => this.requestUpdate());
        return shadowRoot;
    }
    connectedCallback() {
        super.connectedCallback();
        __classPrivateFieldSet(this, _XioMenu_untrack, __classPrivateFieldGet(this, _XioMenu_snap, "f").track(() => this.render(), () => this.requestUpdate()), "f");
        __classPrivateFieldGet(this, _XioMenu_scrollListener, "f").call(this);
        for (const event of __classPrivateFieldGet(this, _XioMenu_scrollEvents, "f"))
            window.addEventListener(event, __classPrivateFieldGet(this, _XioMenu_scrollListener, "f"));
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        __classPrivateFieldGet(this, _XioMenu_untrack, "f").call(this);
        __classPrivateFieldSet(this, _XioMenu_untrack, () => { }, "f");
        for (const event of __classPrivateFieldGet(this, _XioMenu_scrollEvents, "f"))
            window.removeEventListener(event, __classPrivateFieldGet(this, _XioMenu_scrollListener, "f"));
    }
    getMenuItems() {
        const slot = this.shadowRoot.querySelector("slot");
        return getAssignedElements(slot)
            .filter(element => element instanceof XioMenuItem);
    }
    updated() {
        for (const item of this.getMenuItems())
            item.theme = this.theme;
    }
    render() {
        const { scrollTop, activeIndex } = __classPrivateFieldGet(this, _XioMenu_snap, "f").state;
        return html `
			<div class=system data-active-index=${activeIndex} style="${`top: ${scrollTop}px`}">
				<div part=blanket @click=${__classPrivateFieldGet(this, _XioMenu_handleBlanketClick, "f")}></div>
				<div part=list @menuPanelChange=${__classPrivateFieldGet(this, _XioMenu_handleMenuPanelChange, "f")}>
					<slot></slot>
				</div>
			</div>
		`;
    }
};
_XioMenu_snap = new WeakMap();
_XioMenu_untrack = new WeakMap();
_XioMenu_scrollEvents = new WeakMap();
_XioMenu_scrollListener = new WeakMap();
_XioMenu_handleBlanketClick = new WeakMap();
_XioMenu_handleMenuPanelChange = new WeakMap();
_XioMenu_instances = new WeakSet();
_XioMenu_enforceOnePanelOpen = function _XioMenu_enforceOnePanelOpen(target, menuItems) {
    const otherMenuItems = menuItems.filter(item => item !== target);
    for (const item of otherMenuItems)
        item.open = false;
};
__decorate([
    property({ type: String, reflect: true })
], XioMenu.prototype, "theme", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioMenu.prototype, "active", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioMenu.prototype, "sticky", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XioMenu.prototype, "lefty", void 0);
XioMenu = __decorate([
    mixinStyles(xioMenuCss)
], XioMenu);
export { XioMenu };
//# sourceMappingURL=xio-menu.js.map