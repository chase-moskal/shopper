import * as renraku from "renraku";
import { AdministrativeOptions } from "./types/administrative-options.js";
export declare function makeAdministrativeApi(options: AdministrativeOptions): {
    roleAssignmentService: renraku.Service<import("../../auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
        engine: {
            getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                userIds: string[];
                onlyGetPublicRoles: boolean;
            }) => Promise<{
                userId: string;
                userHasRoles: {
                    userId: import("dbmage").Id;
                    roleId: import("dbmage").Id;
                    timeframeStart: number;
                    timeframeEnd: number;
                    public: boolean;
                    hard: boolean;
                    time: number;
                }[];
            }[]>;
            getAnonymousPrivileges: () => Promise<string[]>;
            getPrivilegesForUsers: (userIds: string[]) => Promise<{
                userId: string;
                privileges: string[];
            }[]>;
            getPublicRolesForUsers: (userIds: string[]) => Promise<{
                userId: string;
                publicUserRoles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
            }[]>;
            getPermissionsDisplay: () => Promise<import("../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            getPrivileges: (privilegeIds: string[]) => Promise<{
                hard: boolean;
                label: string;
                time: number;
                privilegeId: string;
            }[]>;
            getAllPrivileges: () => Promise<{
                hard: boolean;
                label: string;
                time: number;
                privilegeId: string;
            }[]>;
            getUserPrivileges: (userId: string) => Promise<string[]>;
        };
        access: import("../../auth/types/auth-tokens.js").AccessPayload;
        database: import("../../../assembly/backend/types/database.js").DatabaseSafe;
        checker: import("../../auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
            universal: string;
            banned: string;
            "moderate all chats": string;
            "control stripe account": string;
            "manage store": string;
            "give away freebies": string;
            "view all videos": string;
            "moderate videos": string;
            "edit any profile": string;
            "customize permissions": string;
            "answer questions": string;
            "moderate questions": string;
            "view stats": string;
            "administrate user roles": string;
            "view all chats": string;
            "participate in all chats": string;
            "read questions": string;
            "post questions": string;
            "like questions": string;
            "report questions": string;
        }>;
    }, {
        fetchPermissions(): Promise<import("../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
        searchUsers(options: {
            term: string;
        }): Promise<{
            user: {
                userId: string;
                profile: import("../../auth/aspects/users/types/profile.js").Profile;
                roles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                stats: import("../../auth/aspects/users/types/user-stats.js").UserStats;
            };
            roleIds: string[];
        }[]>;
        assignRoleToUser(options: {
            roleId: string;
            userId: string;
            isPublic: boolean;
            timeframeEnd: number;
            timeframeStart: number;
        }): Promise<void>;
        revokeRoleFromUser(options: {
            roleId: string;
            userId: string;
        }): Promise<void>;
    }>;
};
