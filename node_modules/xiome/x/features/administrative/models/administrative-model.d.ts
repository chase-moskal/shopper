import { Op } from "../../../framework/ops.js";
import { Service } from "../../../types/service.js";
import { AccessPayload } from "../../auth/types/auth-tokens.js";
import { makeRoleAssignmentService } from "../api/services/role-assignment-service.js";
import { PermissionsDisplay } from "../../auth/aspects/users/routines/permissions/types/permissions-display.js";
export declare function makeAdministrativeModel({ roleAssignmentService, reauthorize, }: {
    roleAssignmentService: Service<typeof makeRoleAssignmentService>;
    reauthorize: () => Promise<void>;
}): {
    state: {
        accessOp: Op<AccessPayload>;
        permissionsOp: Op<PermissionsDisplay>;
    };
    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
        accessOp: Op<AccessPayload>;
        permissionsOp: Op<PermissionsDisplay>;
    }>) => () => void;
    getAccess: () => AccessPayload;
    initialize: () => Promise<void>;
    readonly isAllowed: (privilege: "universal" | "banned" | "view all chats" | "participate in all chats" | "read questions" | "post questions" | "like questions" | "report questions" | "moderate all chats" | "control stripe account" | "manage store" | "give away freebies" | "view all videos" | "moderate videos" | "edit any profile" | "customize permissions" | "answer questions" | "moderate questions" | "view stats" | "administrate user roles") => boolean;
    reauthorize: () => Promise<void>;
    searchUsers: (options: {
        term: string;
    }) => Promise<{
        user: {
            userId: string;
            profile: import("../../auth/aspects/users/types/profile.js").Profile;
            roles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
            stats: import("../../auth/aspects/users/types/user-stats.js").UserStats;
        };
        roleIds: string[];
    }[]>;
    assignRoleToUser: (options: {
        roleId: string;
        userId: string;
        isPublic: boolean;
        timeframeEnd: number;
        timeframeStart: number;
    }) => Promise<void>;
    revokeRoleFromUser: (options: {
        roleId: string;
        userId: string;
    }) => Promise<void>;
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
};
