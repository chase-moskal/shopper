import { snapstate } from "@chasemoskal/snapstate";
import { ops } from "../../../framework/ops.js";
import { appPermissions } from "../../../assembly/backend/permissions/standard-permissions.js";
import { makeAllowanceChecker } from "../../../assembly/backend/permissions/tools/make-allowance-checker.js";
export function makeAdministrativeModel({ roleAssignmentService, reauthorize, }) {
    const state = snapstate({
        accessOp: ops.none(),
        permissionsOp: ops.none(),
    });
    function getAccess() {
        return ops.value(state.readable.accessOp);
    }
    let initializedInDom = false;
    function allowanceChecker() {
        return makeAllowanceChecker(getAccess(), appPermissions.privileges);
    }
    async function loadPermissions() {
        if (initializedInDom && allowanceChecker()("administrate user roles"))
            await ops.operation({
                promise: roleAssignmentService.fetchPermissions(),
                setOp: op => state.writable.permissionsOp = op,
            });
    }
    async function initialize() {
        initializedInDom = true;
        await loadPermissions();
    }
    return {
        state: state.readable,
        subscribe: state.subscribe,
        getAccess,
        initialize,
        get isAllowed() {
            return allowanceChecker();
        },
        reauthorize,
        searchUsers: roleAssignmentService.searchUsers,
        assignRoleToUser: roleAssignmentService.assignRoleToUser,
        revokeRoleFromUser: roleAssignmentService.revokeRoleFromUser,
        async updateAccessOp(op) {
            state.writable.accessOp = op;
            loadPermissions();
        },
    };
}
//# sourceMappingURL=administrative-model.js.map