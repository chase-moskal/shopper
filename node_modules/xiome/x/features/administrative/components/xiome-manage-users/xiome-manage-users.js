var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XiomeManageUsers_search, _XiomeManageUsers_lastSearch;
import { debounce } from "@chasemoskal/snapstate";
import styles from "./xiome-manage-users.css.js";
import wrenchSvg from "../../../../framework/icons/wrench.svg.js";
import { ops } from "../../../../framework/ops.js";
import { makeUserStates } from "./parts/make-user-states.js";
import { renderEditWidget } from "./parts/render-edit-widget.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { validateUserSearchTerm } from "../../api/services/validation/validate-user-search-term.js";
import { Component, html, mixinRequireShare, mixinStyles, property } from "../../../../framework/component.js";
let XiomeManageUsers = class XiomeManageUsers extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        this.userResults = ops.ready([]);
        this.updateLocalUserResultsCache = {
            assignRole: (userId, roleId) => {
                if (!ops.ready(this.userResults))
                    throw new Error("error updating user cache");
                const userResults = ops.value(this.userResults);
                this.userResults = ops.ready(userResults.map(result => result.user.userId === userId
                    ? { user: result.user, roleIds: [...result.roleIds, roleId] }
                    : result));
            },
            revokeRole: (userId, roleId) => {
                if (!ops.ready(this.userResults))
                    throw new Error("error updating user cache");
                const userResults = ops.value(this.userResults);
                this.userResults = ops.ready(userResults.map(result => result.user.userId === userId
                    ? { user: result.user, roleIds: result.roleIds.filter(id => id !== roleId) }
                    : result));
            },
        };
        this.userStates = makeUserStates({
            getUserResultsOp: () => this.userResults,
            rerender: () => this.requestUpdate(),
        });
        _XiomeManageUsers_search.set(this, "");
        _XiomeManageUsers_lastSearch.set(this, "");
        this.commitSearch = async () => {
            const isRedundantSearch = __classPrivateFieldGet(this, _XiomeManageUsers_search, "f") === __classPrivateFieldGet(this, _XiomeManageUsers_lastSearch, "f");
            __classPrivateFieldSet(this, _XiomeManageUsers_lastSearch, __classPrivateFieldGet(this, _XiomeManageUsers_search, "f"), "f");
            if (!isRedundantSearch) {
                this.userResults = ops.ready([]);
                if (__classPrivateFieldGet(this, _XiomeManageUsers_search, "f"))
                    await ops.operation({
                        setOp: op => this.userResults = op,
                        promise: this.share.administrativeModel.searchUsers({
                            term: __classPrivateFieldGet(this, _XiomeManageUsers_search, "f"),
                        })
                    });
            }
            this.userStates.cleanupObsoleteStates();
        };
        this.commitSearchSoon = debounce(1000, this.commitSearch);
        this.searchChange = (event) => {
            var _a;
            __classPrivateFieldSet(this, _XiomeManageUsers_search, (_a = event.detail.value) !== null && _a !== void 0 ? _a : "", "f");
            this.commitSearchSoon();
        };
        this.enterPress = () => {
            this.commitSearch();
        };
    }
    init() {
        this.share.administrativeModel.initialize();
    }
    render() {
        const { permissionsOp } = this.share.administrativeModel.state;
        const allowed = this.share.administrativeModel
            .isAllowed("administrate user roles");
        const renderUser = (userResult) => {
            const { user } = userResult;
            const state = this.userStates.obtainStateForUser(user.userId);
            return html `
				<li>
					<div class=userinfo>
						<xio-profile-card
							.user=${user}
							show-details
						></xio-profile-card>
						<div class=controls>
							<xio-button
								class=edit
								?data-edit-mode=${state.editMode}
								@press=${state.toggleEditMode}>
									${wrenchSvg}
							</xio-button>
						</div>
					</div>
					${state.editMode
                ? renderOp(permissionsOp, permissions => renderEditWidget({
                    userResult,
                    permissions,
                    administrativeModel: this.share.administrativeModel,
                    updateLocalUserResultsCache: this.updateLocalUserResultsCache,
                    blur: () => {
                        const activeElement = document.activeElement;
                        if (activeElement)
                            activeElement.blur();
                    },
                    search: () => this.commitSearch(),
                }))
                : null}
				</li>
			`;
        };
        return html `
			<div class=container>

				${allowed ? html `
					<xio-text-input
						placeholder="search for users"
						.validator=${validateUserSearchTerm}
						@valuechange=${this.searchChange}
						@enterpress=${this.enterPress}
					></xio-text-input>

					<div class=results>
						${renderOp(this.userResults, results => results.length > 0
            ? html `
								<ol class=userlist>
									${results.map(renderUser)}
								</ol>
							`
            : html `
								<div class=noresults>
									no results
								</div>
							`)}
					</div>
				` : html `
					<p>you are not permitted to administrate user roles</p>
				`}

			</div>
		`;
    }
};
_XiomeManageUsers_search = new WeakMap();
_XiomeManageUsers_lastSearch = new WeakMap();
__decorate([
    property()
], XiomeManageUsers.prototype, "userResults", void 0);
XiomeManageUsers = __decorate([
    mixinStyles(styles)
], XiomeManageUsers);
export { XiomeManageUsers };
//# sourceMappingURL=xiome-manage-users.js.map