import { ops } from "../../../../../framework/ops.js";
export function makeUserStates({ getUserResultsOp, rerender, }) {
    const states = new Map();
    function cleanupObsoleteStates() {
        const userIdsPendingRemovalFromState = [];
        const userResultsOp = getUserResultsOp();
        if (ops.ready(userResultsOp)) {
            const userResults = ops.value(userResultsOp);
            for (const stateUserId of states.keys()) {
                const userIsGone = !userResults.find(({ user }) => user.userId === stateUserId);
                if (userIsGone)
                    userIdsPendingRemovalFromState.push(stateUserId);
            }
        }
        for (const obsoleteUserId of userIdsPendingRemovalFromState)
            states.delete(obsoleteUserId);
    }
    function obtainStateForUser(userId) {
        let state = states.get(userId);
        if (!state) {
            const newState = {
                editMode: false,
                toggleEditMode() {
                    newState.editMode = !newState.editMode;
                    rerender();
                },
            };
            state = newState;
            states.set(userId, state);
        }
        return state;
    }
    return {
        cleanupObsoleteStates,
        obtainStateForUser,
    };
}
//# sourceMappingURL=make-user-states.js.map