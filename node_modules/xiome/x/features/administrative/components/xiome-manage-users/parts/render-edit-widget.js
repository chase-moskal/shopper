import { html } from "../../../../../framework/component.js";
function sortAssignableFirst(roles) {
    const assignable = roles.filter(role => role.assignable);
    const notAssignable = roles.filter(role => !role.assignable);
    return [...assignable, ...notAssignable];
}
function renderRoleButton(role, onClick) {
    return html `
		<xio-button
			?disabled=${!role.assignable}
			title=${role.roleId}
			data-role-id=${role.roleId}
			@press=${() => onClick(role)}>
				${role.label}
		</xio-button>
	`;
}
function renderPrivilegeUserHas(privilege) {
    return html `
		<li
			title="${privilege.privilegeId}"
			data-privilege-id="${privilege.privilegeId}">
				${privilege.label}
		</li>
	`;
}
export function renderEditWidget({ permissions, administrativeModel, updateLocalUserResultsCache, userResult: { user: { userId }, roleIds }, blur, search, }) {
    const rolesAssigned = sortAssignableFirst(roleIds
        .map(id => permissions.roles.find(role => role.roleId === id))
        .filter(id => !!id));
    const rolesAvailable = sortAssignableFirst(permissions.roles
        .filter(role => !roleIds.includes(role.roleId))
        .filter(id => !!id));
    const privilegesUserHas = permissions.privileges
        .filter(privilege => {
        const rolesWithThisPrivilege = permissions.rolesHavePrivileges
            .filter(r => r.active && r.privilegeId === privilege.privilegeId);
        const rolesUserHas = rolesWithThisPrivilege
            .filter(r => roleIds.includes(r.roleId));
        return rolesUserHas.length > 0;
    });
    async function ifChangingSelfThenReauthorize() {
        var _a, _b;
        if (userId === ((_b = (_a = administrativeModel.getAccess()) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.userId))
            await administrativeModel.reauthorize();
    }
    async function clickToAssign({ roleId }) {
        await administrativeModel.assignRoleToUser({
            userId,
            roleId,
            isPublic: true,
            timeframeEnd: undefined,
            timeframeStart: undefined,
        });
        updateLocalUserResultsCache.assignRole(userId, roleId);
        blur();
        await ifChangingSelfThenReauthorize();
        await search();
    }
    async function clickToRevoke({ roleId }) {
        await administrativeModel.revokeRoleFromUser({
            userId,
            roleId,
        });
        updateLocalUserResultsCache.revokeRole(userId, roleId);
        blur();
        await ifChangingSelfThenReauthorize();
        await search();
    }
    return html `
		<div class=editwidget>
			<div class=available>
				<header>roles available <small>(click to assign)</small></header>
				<div>
					${rolesAvailable.map(role => renderRoleButton(role, clickToAssign))}
				</div>
			</div>
			<div class=assigned>
				<header>roles assigned <small>(click to revoke)</small></header>
				<div>
					${rolesAssigned.map(role => renderRoleButton(role, clickToRevoke))}
				</div>
			</div>
			<div class=allprivileges>
				<header>user has these privileges</header>
				<ul>
					${privilegesUserHas.map(renderPrivilegeUserHas)}
				</ul>
			</div>
		</div>
	`;
}
//# sourceMappingURL=render-edit-widget.js.map