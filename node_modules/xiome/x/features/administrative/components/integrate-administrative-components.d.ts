import { XiomeManageUsers } from "./xiome-manage-users/xiome-manage-users.js";
import { XiomeComponentOptions } from "../../../assembly/frontend/components/types/xiome-component-options.js";
export declare function integrateAdministrativeComponents({ models, modals }: XiomeComponentOptions): {
    XiomeManageUsers: import("../../../types/mixin.js").Mixin<typeof XiomeManageUsers, import("../../../framework/component.js").WithShare<{
        modals: import("../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        administrativeModel: {
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                permissionsOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                permissionsOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            }>) => () => void;
            getAccess: () => import("../../auth/types/auth-tokens.js").AccessPayload;
            initialize: () => Promise<void>;
            readonly isAllowed: (privilege: "universal" | "banned" | "view all chats" | "participate in all chats" | "read questions" | "post questions" | "like questions" | "report questions" | "moderate all chats" | "control stripe account" | "manage store" | "give away freebies" | "view all videos" | "moderate videos" | "edit any profile" | "customize permissions" | "answer questions" | "moderate questions" | "view stats" | "administrate user roles") => boolean;
            reauthorize: () => Promise<void>;
            searchUsers: (options: {
                term: string;
            }) => Promise<{
                user: {
                    userId: string;
                    profile: import("../../auth/aspects/users/types/profile.js").Profile;
                    roles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    stats: import("../../auth/aspects/users/types/user-stats.js").UserStats;
                };
                roleIds: string[];
            }[]>;
            assignRoleToUser: (options: {
                roleId: string;
                userId: string;
                isPublic: boolean;
                timeframeEnd: number;
                timeframeStart: number;
            }) => Promise<void>;
            revokeRoleFromUser: (options: {
                roleId: string;
                userId: string;
            }) => Promise<void>;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
    }>>;
};
