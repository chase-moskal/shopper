import { pubsub } from "../../../toolbox/pubsub.js";
import { isTokenValid } from "../utils/tokens/is-token-valid.js";
import { decodeAccessToken } from "../utils/tokens/decode-access-token.js";
export function makeAuthMediator({ appId, storage, greenService, }) {
    const tokenChangeEvent = pubsub();
    const accessEvent = pubsub();
    const key = `auth-tokens-${appId}`;
    const emptyTokens = () => ({ accessToken: undefined, refreshToken: undefined });
    const getTokens = async () => { var _a; return (_a = await storage.read(key)) !== null && _a !== void 0 ? _a : emptyTokens(); };
    const setTokens = async (tokens) => storage.write(key, tokens);
    async function commitTokens(tokens) {
        const access = decodeAccessToken(tokens.accessToken);
        await setTokens(tokens);
        await tokenChangeEvent.publish();
        await accessEvent.publish(access);
        return access;
    }
    async function authorize(refreshToken) {
        const accessToken = await greenService.authorize({
            appId,
            refreshToken,
            scope: { core: true },
        });
        const access = await commitTokens({ accessToken, refreshToken });
        return { access, accessToken };
    }
    const obtainAccessAndReauthorizeIfNecessary = (async () => {
        const { accessToken, refreshToken } = await getTokens();
        return isTokenValid(accessToken)
            ? { accessToken, access: decodeAccessToken(accessToken) }
            : isTokenValid(refreshToken)
                ? authorize(refreshToken)
                : authorize(undefined);
    });
    return {
        subscribeToAccessChange: accessEvent.subscribe,
        subscribeToTokenChange: tokenChangeEvent.subscribe,
        async initialize() {
            const { access } = await obtainAccessAndReauthorizeIfNecessary();
            await accessEvent.publish(access);
            return access;
        },
        async getValidAccess() {
            return (await obtainAccessAndReauthorizeIfNecessary()).access;
        },
        async getValidAccessToken() {
            return (await obtainAccessAndReauthorizeIfNecessary()).accessToken;
        },
        async login(tokens) {
            return commitTokens(tokens);
        },
        async logout() {
            await setTokens(emptyTokens());
            return (await obtainAccessAndReauthorizeIfNecessary()).access;
        },
        async reauthorize() {
            const tokens = await getTokens();
            await setTokens({ ...tokens, accessToken: undefined });
            return (await obtainAccessAndReauthorizeIfNecessary()).access;
        },
    };
}
//# sourceMappingURL=auth-mediator.js.map