import { XiomeComponentOptions } from "../../../assembly/frontend/components/types/xiome-component-options.js";
import { XiomeAppManager } from "./apps/components/app-manager/xiome-app-manager.js";
import { XiomeMyAvatar } from "./users/components/my-avatar/xiome-my-avatar.js";
import { XiomeMyAccount } from "./users/components/my-account/xiome-my-account.js";
import { XiomeLoginPanel } from "./users/components/login-panel/xiome-login-panel.js";
import { XiomePrivileges } from "./permissions/components/privileges/xiome-privileges.js";
import { XiomePermissions } from "./permissions/components/permissions/xiome-permissions.js";
export declare function integrateAuthComponents({ models, modals }: XiomeComponentOptions): {
    XiomeMyAvatar: import("../../../types/mixin.js").Mixin<typeof XiomeMyAvatar, import("../../../framework/component.js").WithShare<{
        accessModel: {
            subscribe: (...listeners: ((accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>) => void | Promise<void>)[]) => () => void;
            getAccessOp(): import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
            getAccess(): import("../types/auth-tokens.js").AccessPayload;
            getValidAccess(): Promise<import("../types/auth-tokens.js").AccessPayload>;
            useExistingLogin(): Promise<void>;
            sendLoginLink(email: string): Promise<void>;
            login(loginToken: string): Promise<void>;
            logout(): Promise<void>;
            reauthorize(): Promise<void>;
        };
    }>>;
    XiomeLoginPanel: import("../../../types/mixin.js").Mixin<typeof XiomeLoginPanel, import("../../../framework/component.js").WithShare<{
        accessModel: {
            subscribe: (...listeners: ((accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>) => void | Promise<void>)[]) => () => void;
            getAccessOp(): import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
            getAccess(): import("../types/auth-tokens.js").AccessPayload;
            getValidAccess(): Promise<import("../types/auth-tokens.js").AccessPayload>;
            useExistingLogin(): Promise<void>;
            sendLoginLink(email: string): Promise<void>;
            login(loginToken: string): Promise<void>;
            logout(): Promise<void>;
            reauthorize(): Promise<void>;
        };
    }>>;
    XiomeAppManager: import("../../../types/mixin.js").Mixin<typeof XiomeAppManager, import("../../../framework/component.js").WithShare<{
        modals: import("../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        appsModel: {
            state: {
                active: boolean;
                appRecords: import("../../../framework/ops.js").Op<import("./apps/models/types/app-records.js").AppRecords>;
                addingNewApp: import("../../../framework/ops.js").Op<null>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                active: boolean;
                appRecords: import("../../../framework/ops.js").Op<import("./apps/models/types/app-records.js").AppRecords>;
                addingNewApp: import("../../../framework/ops.js").Op<null>;
            }>) => () => void;
            appEditService: {
                updateApp({ appId: appIdString, appDraft }: {
                    appId: string;
                    appDraft: import("./apps/types/app-draft.js").AppDraft;
                }): Promise<void>;
                deleteApp({ appId: appIdString }: {
                    appId: string;
                }): Promise<void>;
                listAdmins({ appId: appIdString }: {
                    appId: string;
                }): Promise<import("./apps/types/admin-email-display.js").AdminEmailDisplay[]>;
                assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                    appId: string;
                    platformUserId: string;
                }): Promise<void>;
                assignAdmin({ appId: appIdString, email }: {
                    appId: string;
                    email: string;
                }): Promise<void>;
                revokeAdmin({ appId: appIdString, userId: userIdString }: {
                    appId: string;
                    userId: string;
                }): Promise<void>;
            };
            getApp: (appId: string) => import("./apps/types/app-display.js").AppDisplay;
            loadApps: () => Promise<import("./apps/types/app-display.js").AppDisplay[]>;
            deleteApp: (appId: string) => Promise<void>;
            updateApp: (appId: string, appDraft: import("./apps/types/app-draft.js").AppDraft) => Promise<void>;
            registerApp: (appDraft: import("./apps/types/app-draft.js").AppDraft) => Promise<import("./apps/types/app-display.js").AppDisplay>;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
    }>>;
    XiomeMyAccount: import("../../../types/mixin.js").Mixin<typeof XiomeMyAccount, import("../../../framework/component.js").WithShare<{
        personalModel: {
            track: <X>(observer: import("@chasemoskal/snapstate").Observer<{
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                submitDraftOp: import("../../../framework/ops.js").Op<void>;
            }, X>, reaction?: import("@chasemoskal/snapstate").Reaction<X>, options?: {
                flip?: boolean;
            }) => () => void;
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                submitDraftOp: import("../../../framework/ops.js").Op<void>;
            }>) => () => void;
            readable: {
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                submitDraftOp: import("../../../framework/ops.js").Op<void>;
            };
            saveProfile(profileDraft: import("./users/routines/personal/types/profile-draft.js").ProfileDraft): Promise<void>;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>): void;
        };
    }>>;
    XiomePermissions: import("../../../types/mixin.js").Mixin<typeof XiomePermissions, import("../../../framework/component.js").WithShare<{
        modals: import("../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        permissionsModel: {
            readable: {
                active: boolean;
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                permissionsDisplay: import("../../../framework/ops.js").Op<import("./users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                active: boolean;
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                permissionsDisplay: import("../../../framework/ops.js").Op<import("./users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            }>) => () => void;
            track: <X_1>(observer: import("@chasemoskal/snapstate").Observer<{
                active: boolean;
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                permissionsDisplay: import("../../../framework/ops.js").Op<import("./users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            }, X_1>, reaction?: import("@chasemoskal/snapstate").Reaction<X_1>, options?: {
                flip?: boolean;
            }) => () => void;
            getAccess: () => import("../types/auth-tokens.js").AccessPayload;
            initialize: () => Promise<void>;
            getUserCanCustomizePermissions: () => boolean;
            createRole: ({ label }: {
                label: string;
            }) => Promise<void>;
            deleteRole: ({ roleId: roleIdString }: {
                roleId: string;
            }) => Promise<void>;
            assignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                roleId: string;
                privilegeId: string;
            }) => Promise<void>;
            unassignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                roleId: string;
                privilegeId: string;
            }) => Promise<void>;
            deletePrivilege: ({ privilegeId: privilegeIdString }: {
                privilegeId: string;
            }) => Promise<void>;
            createPrivilege: ({ label }: {
                label: string;
            }) => Promise<import("./users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
    }>>;
    XiomePrivileges: import("../../../types/mixin.js").Mixin<typeof XiomePrivileges, import("../../../framework/component.js").WithShare<{
        modals: import("../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        permissionsModel: {
            readable: {
                active: boolean;
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                permissionsDisplay: import("../../../framework/ops.js").Op<import("./users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                active: boolean;
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                permissionsDisplay: import("../../../framework/ops.js").Op<import("./users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            }>) => () => void;
            track: <X_1>(observer: import("@chasemoskal/snapstate").Observer<{
                active: boolean;
                accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
                permissionsDisplay: import("../../../framework/ops.js").Op<import("./users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            }, X_1>, reaction?: import("@chasemoskal/snapstate").Reaction<X_1>, options?: {
                flip?: boolean;
            }) => () => void;
            getAccess: () => import("../types/auth-tokens.js").AccessPayload;
            initialize: () => Promise<void>;
            getUserCanCustomizePermissions: () => boolean;
            createRole: ({ label }: {
                label: string;
            }) => Promise<void>;
            deleteRole: ({ roleId: roleIdString }: {
                roleId: string;
            }) => Promise<void>;
            assignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                roleId: string;
                privilegeId: string;
            }) => Promise<void>;
            unassignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                roleId: string;
                privilegeId: string;
            }) => Promise<void>;
            deletePrivilege: ({ privilegeId: privilegeIdString }: {
                privilegeId: string;
            }) => Promise<void>;
            createPrivilege: ({ label }: {
                label: string;
            }) => Promise<import("./users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
    }>>;
};
