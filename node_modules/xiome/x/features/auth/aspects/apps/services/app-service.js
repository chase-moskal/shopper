import * as dbmage from "dbmage";
import * as renraku from "renraku";
import { Id, find, and, or } from "dbmage";
import { isPlatform } from "../../../utils/is-platform.js";
import { concurrent } from "../../../../../toolbox/concurrent.js";
import { validateAppDraft } from "../utils/validate-app-draft.js";
import { originsFromDatabase } from "../../../utils/origins-from-database.js";
import { throwProblems } from "../../../../../toolbox/topic-validation/throw-problems.js";
import { addApp } from "./helpers/app-actions.js";
export const makeAppService = ({ rando, config, authPolicies, }) => renraku.service()
    .policy(authPolicies.platformUserPolicy)
    .expose(({ database, statsHub }) => ({
    async listApps({ ownerUserId: ownerUserIdString }) {
        const ownerUserId = Id.fromString(ownerUserIdString);
        const ownerships = await database.tables.apps.owners.read(find({ userId: ownerUserId }));
        const appRows = ownerships.length
            ? await database.tables.apps.registrations.read({
                conditions: and(or(...ownerships.map(own => ({ equal: { appId: own.appId } }))), { equal: { archived: false } })
            })
            : [];
        return Promise.all(appRows.map(async (row) => ({
            appId: row.appId.toString(),
            label: row.label,
            home: row.home,
            origins: originsFromDatabase(row.origins),
            platform: isPlatform(row.appId.toString(), config),
            stats: await concurrent({
                users: statsHub.countUsers(row.appId),
                usersActiveDaily: statsHub.countUsersActiveDaily(row.appId),
                usersActiveMonthly: statsHub.countUsersActiveMonthly(row.appId),
            }),
        })));
    },
    async registerApp({ appDraft, ownerUserId }) {
        throwProblems(validateAppDraft(appDraft));
        return addApp({
            rando,
            appDraft,
            ownerUserId,
            appsDatabase: dbmage.subsection(database, tables => tables.apps),
        });
    },
}));
//# sourceMappingURL=app-service.js.map