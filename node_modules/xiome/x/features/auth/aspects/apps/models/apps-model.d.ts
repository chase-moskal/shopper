import { AppDraft } from "../types/app-draft.js";
import { AppRecords } from "./types/app-records.js";
import { AppDisplay } from "../types/app-display.js";
import { Op } from "../../../../../framework/ops.js";
import { AccessPayload } from "../../../types/auth-tokens.js";
import { AppModelOptions } from "./types/apps-model-options.js";
export declare function makeAppsModel({ appService, appEditService, getValidAccess, }: AppModelOptions): {
    state: {
        active: boolean;
        appRecords: Op<AppRecords>;
        addingNewApp: Op<null>;
    };
    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
        active: boolean;
        appRecords: Op<AppRecords>;
        addingNewApp: Op<null>;
    }>) => () => void;
    appEditService: {
        updateApp({ appId: appIdString, appDraft }: {
            appId: string;
            appDraft: AppDraft;
        }): Promise<void>;
        deleteApp({ appId: appIdString }: {
            appId: string;
        }): Promise<void>;
        listAdmins({ appId: appIdString }: {
            appId: string;
        }): Promise<import("../types/admin-email-display.js").AdminEmailDisplay[]>;
        assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
            appId: string;
            platformUserId: string;
        }): Promise<void>;
        assignAdmin({ appId: appIdString, email }: {
            appId: string;
            email: string;
        }): Promise<void>;
        revokeAdmin({ appId: appIdString, userId: userIdString }: {
            appId: string;
            userId: string;
        }): Promise<void>;
    };
    getApp: (appId: string) => AppDisplay;
    loadApps: () => Promise<AppDisplay[]>;
    deleteApp: (appId: string) => Promise<void>;
    updateApp: (appId: string, appDraft: AppDraft) => Promise<void>;
    registerApp: (appDraft: AppDraft) => Promise<AppDisplay>;
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
};
