import { snapstate } from "@chasemoskal/snapstate";
import { ops } from "../../../../../framework/ops.js";
import { appPermissions } from "../../../../../assembly/backend/permissions/standard-permissions.js";
export function makePermissionsModel({ permissionsService, reauthorize, }) {
    const { readable, writable, subscribe, track } = snapstate({
        active: false,
        accessOp: ops.none(),
        permissionsDisplay: ops.none(),
    });
    function getAccess() {
        return ops.value(readable.accessOp);
    }
    function sortPermissions(permissions) {
        const softPrivileges = [];
        const hardPrivileges = [];
        for (const privilege of permissions.privileges) {
            if (privilege.hard)
                hardPrivileges.push(privilege);
            else
                softPrivileges.push(privilege);
        }
        softPrivileges.sort((a, b) => b.time - a.time);
        return {
            ...permissions,
            privileges: [...softPrivileges, ...hardPrivileges],
        };
    }
    async function reload() {
        await ops.operation({
            promise: Promise.resolve()
                .then(async () => getUserCanCustomizePermissions()
                ? permissionsService.fetchPermissions().then(sortPermissions)
                : undefined),
            setOp: op => writable.permissionsDisplay = op,
        });
    }
    function getUserCanCustomizePermissions() {
        const access = getAccess();
        return (access === null || access === void 0 ? void 0 : access.user)
            ? access.permit.privileges.includes(appPermissions.privileges["customize permissions"])
            : false;
    }
    async function initialize() {
        writable.active = true;
        if (getUserCanCustomizePermissions())
            await reload();
    }
    function reloadAfter(func) {
        return (async (...args) => {
            const result = await func(...args);
            await reload();
            await reauthorize();
            return result;
        });
    }
    return {
        readable,
        subscribe,
        track,
        getAccess,
        initialize,
        getUserCanCustomizePermissions,
        createRole: reloadAfter(permissionsService.createRole),
        deleteRole: reloadAfter(permissionsService.deleteRole),
        assignPrivilege: reloadAfter(permissionsService.assignPrivilege),
        unassignPrivilege: reloadAfter(permissionsService.unassignPrivilege),
        deletePrivilege: reloadAfter(permissionsService.deletePrivilege),
        createPrivilege: reloadAfter(permissionsService.createPrivilege),
        async updateAccessOp(op) {
            writable.accessOp = op;
            const access = getAccess();
            if ((access === null || access === void 0 ? void 0 : access.user) && writable.active)
                await reload();
        },
    };
}
//# sourceMappingURL=permissions-model.js.map