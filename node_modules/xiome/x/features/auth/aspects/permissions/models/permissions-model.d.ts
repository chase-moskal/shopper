import { Op } from "../../../../../framework/ops.js";
import { AccessPayload } from "../../../types/auth-tokens.js";
import { PermissionsModelOptions } from "./types/permissions-model-options.js";
import { PrivilegeDisplay } from "../../users/routines/permissions/types/privilege-display.js";
import { PermissionsDisplay } from "../../users/routines/permissions/types/permissions-display.js";
export declare function makePermissionsModel({ permissionsService, reauthorize, }: PermissionsModelOptions): {
    readable: {
        active: boolean;
        accessOp: Op<AccessPayload>;
        permissionsDisplay: Op<PermissionsDisplay>;
    };
    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
        active: boolean;
        accessOp: Op<AccessPayload>;
        permissionsDisplay: Op<PermissionsDisplay>;
    }>) => () => void;
    track: <X>(observer: import("@chasemoskal/snapstate").Observer<{
        active: boolean;
        accessOp: Op<AccessPayload>;
        permissionsDisplay: Op<PermissionsDisplay>;
    }, X>, reaction?: import("@chasemoskal/snapstate").Reaction<X>, options?: {
        flip?: boolean;
    }) => () => void;
    getAccess: () => AccessPayload;
    initialize: () => Promise<void>;
    getUserCanCustomizePermissions: () => boolean;
    createRole: ({ label }: {
        label: string;
    }) => Promise<void>;
    deleteRole: ({ roleId: roleIdString }: {
        roleId: string;
    }) => Promise<void>;
    assignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
        roleId: string;
        privilegeId: string;
    }) => Promise<void>;
    unassignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
        roleId: string;
        privilegeId: string;
    }) => Promise<void>;
    deletePrivilege: ({ privilegeId: privilegeIdString }: {
        privilegeId: string;
    }) => Promise<void>;
    createPrivilege: ({ label }: {
        label: string;
    }) => Promise<PrivilegeDisplay>;
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
};
