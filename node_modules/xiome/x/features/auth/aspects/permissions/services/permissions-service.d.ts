import * as renraku from "renraku";
import { Id } from "dbmage";
import { AuthOptions } from "../../../types/auth-options.js";
import { PermissionsMeta } from "../types/permissions-auth-and-metas.js";
import { PrivilegeDisplay } from "../../users/routines/permissions/types/privilege-display.js";
export declare const makePermissionsService: ({ rando, config, authPolicies, }: AuthOptions) => renraku.Service<PermissionsMeta, {
    engine: {
        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
            userIds: string[];
            onlyGetPublicRoles: boolean;
        }) => Promise<{
            userId: string;
            userHasRoles: {
                userId: Id;
                roleId: Id;
                timeframeStart: number;
                timeframeEnd: number;
                public: boolean;
                hard: boolean;
                time: number;
            }[];
        }[]>;
        getAnonymousPrivileges: () => Promise<string[]>;
        getPrivilegesForUsers: (userIds: string[]) => Promise<{
            userId: string;
            privileges: string[];
        }[]>;
        getPublicRolesForUsers: (userIds: string[]) => Promise<{
            userId: string;
            publicUserRoles: import("../../users/types/public-user-role.js").PublicUserRole[];
        }[]>;
        getPermissionsDisplay: () => Promise<import("../../users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
        getPrivileges: (privilegeIds: string[]) => Promise<{
            hard: boolean;
            label: string;
            time: number;
            privilegeId: string;
        }[]>;
        getAllPrivileges: () => Promise<{
            hard: boolean;
            label: string;
            time: number;
            privilegeId: string;
        }[]>;
        getUserPrivileges: (userId: string) => Promise<string[]>;
    };
    access: import("../../../types/auth-tokens.js").AccessPayload;
    database: import("../../../../../assembly/backend/types/database.js").DatabaseSafe;
    checker: import("../types/privilege-checker.js").PrivilegeChecker<{
        universal: string;
        banned: string;
        "moderate all chats": string;
        "control stripe account": string;
        "manage store": string;
        "give away freebies": string;
        "view all videos": string;
        "moderate videos": string;
        "edit any profile": string;
        "customize permissions": string;
        "answer questions": string;
        "moderate questions": string;
        "view stats": string;
        "administrate user roles": string;
        "view all chats": string;
        "participate in all chats": string;
        "read questions": string;
        "post questions": string;
        "like questions": string;
        "report questions": string;
    }>;
}, {
    fetchPermissions(): Promise<import("../../users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
    createRole({ label }: {
        label: string;
    }): Promise<void>;
    deleteRole({ roleId: roleIdString }: {
        roleId: string;
    }): Promise<void>;
    assignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
        roleId: string;
        privilegeId: string;
    }): Promise<void>;
    unassignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
        roleId: string;
        privilegeId: string;
    }): Promise<void>;
    createPrivilege({ label }: {
        label: string;
    }): Promise<PrivilegeDisplay>;
    deletePrivilege({ privilegeId: privilegeIdString }: {
        privilegeId: string;
    }): Promise<void>;
}>;
