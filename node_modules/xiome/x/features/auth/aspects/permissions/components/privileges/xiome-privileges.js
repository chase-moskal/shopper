var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XiomePrivileges_instances, _XiomePrivileges_busy, _XiomePrivileges_clearCreatorTextInput, _XiomePrivileges_createPrivilege, _XiomePrivileges_deletePrivilege, _XiomePrivileges_labelDraft, _XiomePrivileges_handleCreatorLabelChange, _XiomePrivileges_renderPrivilegeCreator;
import styles from "./xiome-privileges.css.js";
import { renderPrivilege } from "./parts/render-privilege.js";
import { renderOp } from "../../../../../../framework/op-rendering/render-op.js";
import { validatePermissionsLabel } from "../../tools/permissions-validators.js";
import { mixinStyles, html, Component, mixinRequireShare } from "../../../../../../framework/component.js";
let XiomePrivileges = class XiomePrivileges extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomePrivileges_instances.add(this);
        _XiomePrivileges_busy.set(this, false);
        _XiomePrivileges_labelDraft.set(this, void 0);
        _XiomePrivileges_handleCreatorLabelChange.set(this, (event) => {
            __classPrivateFieldSet(this, _XiomePrivileges_labelDraft, event.detail.value, "f");
            this.requestUpdate();
        });
    }
    get model() {
        return this.share.permissionsModel;
    }
    init() {
        this.model.initialize();
    }
    render() {
        const { readable: { permissionsDisplay } } = this.model;
        const allowed = this.model.getUserCanCustomizePermissions();
        return renderOp(permissionsDisplay, permissions => allowed ? html `
			<div class=privileges>
				${__classPrivateFieldGet(this, _XiomePrivileges_instances, "m", _XiomePrivileges_renderPrivilegeCreator).call(this)}
				${permissions.privileges.map(privilege => renderPrivilege({
            privilege,
            onDeleteClick: () => __classPrivateFieldGet(this, _XiomePrivileges_instances, "m", _XiomePrivileges_deletePrivilege).call(this, privilege)
        }))}
			</div>
		` : html `
			<p>you are not permitted to customize privileges</p>
		`);
    }
};
_XiomePrivileges_busy = new WeakMap();
_XiomePrivileges_labelDraft = new WeakMap();
_XiomePrivileges_handleCreatorLabelChange = new WeakMap();
_XiomePrivileges_instances = new WeakSet();
_XiomePrivileges_clearCreatorTextInput = function _XiomePrivileges_clearCreatorTextInput() {
    const input = this.shadowRoot.querySelector(".creator xio-text-input");
    input.text = "";
};
_XiomePrivileges_createPrivilege = async function _XiomePrivileges_createPrivilege() {
    if (__classPrivateFieldGet(this, _XiomePrivileges_busy, "f"))
        throw new Error("privilege creator is busy");
    const label = __classPrivateFieldGet(this, _XiomePrivileges_labelDraft, "f");
    __classPrivateFieldGet(this, _XiomePrivileges_instances, "m", _XiomePrivileges_clearCreatorTextInput).call(this);
    __classPrivateFieldSet(this, _XiomePrivileges_busy, true, "f");
    try {
        await this.model.createPrivilege({ label });
    }
    finally {
        __classPrivateFieldSet(this, _XiomePrivileges_busy, false, "f");
    }
};
_XiomePrivileges_deletePrivilege = async function _XiomePrivileges_deletePrivilege({ privilegeId, label }) {
    const confirm = await this.share.modals.confirm({
        title: html `delete privilege ${label}?`,
        body: html `are you sure you want to delete this privilege?`,
    });
    if (confirm)
        await this.model.deletePrivilege({ privilegeId });
};
_XiomePrivileges_renderPrivilegeCreator = function _XiomePrivileges_renderPrivilegeCreator() {
    const isCreateButtonDisabled = !__classPrivateFieldGet(this, _XiomePrivileges_labelDraft, "f");
    return html `
			<div class=creator>
				<xio-text-input
					?disabled=${__classPrivateFieldGet(this, _XiomePrivileges_busy, "f")}
					.validator=${validatePermissionsLabel}
					@valuechange=${__classPrivateFieldGet(this, _XiomePrivileges_handleCreatorLabelChange, "f")}
					@enterpress=${__classPrivateFieldGet(this, _XiomePrivileges_instances, "m", _XiomePrivileges_createPrivilege)}>
						privilege label
				</xio-text-input>
				<xio-button
					?disabled=${isCreateButtonDisabled}
					@press=${__classPrivateFieldGet(this, _XiomePrivileges_instances, "m", _XiomePrivileges_createPrivilege)}>
						create privilege
				</xio-button>
			</div>
		`;
};
XiomePrivileges = __decorate([
    mixinStyles(styles)
], XiomePrivileges);
export { XiomePrivileges };
//# sourceMappingURL=xiome-privileges.js.map