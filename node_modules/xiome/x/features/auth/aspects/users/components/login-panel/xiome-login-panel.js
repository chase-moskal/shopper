var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-login-panel.css.js";
import { ops } from "../../../../../../framework/ops.js";
import { email } from "../../../../../../toolbox/darkvalley.js";
import { renderOp } from "../../../../../../framework/op-rendering/render-op.js";
import { Component, html, mixinRequireShare, mixinStyles, property, query } from "../../../../../../framework/component.js";
let XiomeLoginPanel = class XiomeLoginPanel extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        this["show-logout"] = false;
        this["status"] = "loading";
        this.sentLoading = ops.none();
        this.emailIsValid = false;
    }
    async sendEmail() {
        const email = this.textInput.value;
        await ops.operation({
            promise: this.share.accessModel.sendLoginLink(email)
                .then(() => ({ email })),
            setOp: op => this.sentLoading = op,
            errorReason: `failed sending email to "${email}"`,
        });
    }
    resetSentLoading() {
        this.sentLoading = ops.none();
        if (this.textInput)
            this.textInput.text = "";
    }
    logout() {
        this.share.accessModel.logout()
            .then(() => this.sentLoading = ops.none());
    }
    subscribe() {
        return this.share.accessModel.subscribe(() => {
            this.resetSentLoading();
        });
    }
    renderLoggedIn(access) {
        return html `
			<slot>
				<p>Welcome ${access.user.profile.nickname}!</p>
			</slot>
			${this["show-logout"]
            ? html `
					<div part=buttonbar>
						<xio-button class=logout-button @press=${this.logout}>
							Logout
						</xio-button>
					</div>
				`
            : null}
		`;
    }
    handleEmailChange() {
        this.emailIsValid = this.textInput.problems.length === 0;
    }
    renderLegalLink() {
        return html `
			<small>
				<p>
					<a
						part=link
						target=_blank
						href="https://xiome.io/legal">
							policies and terms
					</a>
				</p>
			</small>
		`;
    }
    renderLoggedOut() {
        const { emailIsValid } = this;
        return html `
			<xio-op .op=${this.sentLoading}>
				<div slot=none>
					<slot name=logged-out>
						<p>login with your email address</p>
					</slot>
					<xio-text-input
						.validator=${email()}
						@valuechange=${this.handleEmailChange}
						@enterpress=${this.sendEmail}>
							<span>your email</span>
					</xio-text-input>
					<div class=buttonbar>
						<slot name=legal>
							${this.renderLegalLink()}
						</slot>
						<xio-button
							?disabled=${!emailIsValid}
							@press=${this.sendEmail}>
								send login link
						</xio-button>
					</div>
				</div>
				${ops.isReady(this.sentLoading)
            ? html `
						<p>email sent to ${ops.value(this.sentLoading).email}</p>
						<p>please wait a few minutes for it to arrive</p>
						<xio-button @press=${this.resetSentLoading}>
							restart
						</xio-button>
					`
            : null}
			</xio-op>
		`;
    }
    render() {
        var _a;
        const accessOp = this.share.accessModel.getAccessOp();
        this.status = "loading";
        if (ops.isReady(accessOp)) {
            this.status = ((_a = ops.value(accessOp)) === null || _a === void 0 ? void 0 : _a.user)
                ? "logged-in"
                : "logged-out";
        }
        return renderOp(accessOp, access => (access === null || access === void 0 ? void 0 : access.user)
            ? this.renderLoggedIn(access)
            : this.renderLoggedOut());
    }
};
__decorate([
    property({ type: Boolean, reflect: true })
], XiomeLoginPanel.prototype, "show-logout", void 0);
__decorate([
    property({ type: String, reflect: true })
], XiomeLoginPanel.prototype, "status", void 0);
__decorate([
    property()
], XiomeLoginPanel.prototype, "sentLoading", void 0);
__decorate([
    query("xio-text-input")
], XiomeLoginPanel.prototype, "textInput", void 0);
__decorate([
    property({ type: String })
], XiomeLoginPanel.prototype, "emailIsValid", void 0);
XiomeLoginPanel = __decorate([
    mixinStyles(styles)
], XiomeLoginPanel);
export { XiomeLoginPanel };
//# sourceMappingURL=xiome-login-panel.js.map