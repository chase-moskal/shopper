var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-my-account.css.js";
import { renderOp } from "../../../../../../framework/op-rendering/render-op.js";
import { Component, html, mixinRequireShare, mixinStyles } from "../../../../../../framework/component.js";
let XiomeMyAccount = class XiomeMyAccount extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        this.saveProfile = async (profileDraft) => {
            await this.share.personalModel.saveProfile(profileDraft);
        };
    }
    render() {
        const { accessOp } = this.share.personalModel.readable;
        return renderOp(accessOp, ({ user }) => html `
			<xio-profile-card
				show-details
				.user=${user}
				.saveProfile=${this.saveProfile}
			></xio-profile-card>
			<slot></slot>
		`);
    }
};
XiomeMyAccount = __decorate([
    mixinStyles(styles)
], XiomeMyAccount);
export { XiomeMyAccount };
//# sourceMappingURL=xiome-my-account.js.map