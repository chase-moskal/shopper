import * as renraku from "renraku";
import { AuthOptions } from "./types/auth-options.js";
export declare function authApi(options: AuthOptions): {
    apps: {
        appService: renraku.Service<import("./types/auth-metas.js").PlatformUserMeta, import("./types/auth-metas.js").PlatformUserAuth, {
            listApps({ ownerUserId: ownerUserIdString }: {
                ownerUserId: string;
            }): Promise<import("./aspects/apps/types/app-display.js").AppDisplay[]>;
            registerApp({ appDraft, ownerUserId }: {
                appDraft: import("./aspects/apps/types/app-draft.js").AppDraft;
                ownerUserId: string;
            }): Promise<import("./aspects/apps/types/app-display.js").AppDisplay>;
        }>;
        appEditService: renraku.Service<import("./types/auth-metas.js").AppOwnerMeta, import("./types/auth-metas.js").AppOwnerAuth, {
            updateApp({ appId: appIdString, appDraft }: {
                appId: string;
                appDraft: import("./aspects/apps/types/app-draft.js").AppDraft;
            }): Promise<void>;
            deleteApp({ appId: appIdString }: {
                appId: string;
            }): Promise<void>;
            listAdmins({ appId: appIdString }: {
                appId: string;
            }): Promise<import("./aspects/apps/types/admin-email-display.js").AdminEmailDisplay[]>;
            assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                appId: string;
                platformUserId: string;
            }): Promise<void>;
            assignAdmin({ appId: appIdString, email }: {
                appId: string;
                email: string;
            }): Promise<void>;
            revokeAdmin({ appId: appIdString, userId: userIdString }: {
                appId: string;
                userId: string;
            }): Promise<void>;
        }>;
    };
    users: {
        greenService: renraku.Service<undefined, import("./types/auth-metas.js").GreenAuth, {
            authorize({ scope, refreshToken, appId: appIdString, }: {
                scope: import("./types/auth-tokens.js").CoreScope;
                appId: string;
                refreshToken?: string;
            }): Promise<string>;
        }>;
        loginService: renraku.Service<import("./types/auth-metas.js").AnonMeta, import("./types/auth-metas.js").LoginAuth, {
            sendLoginLink(inputs: {
                email: string;
            }): Promise<void>;
            authenticateViaLoginToken({ loginToken }: {
                loginToken: string;
            }): Promise<import("../../toolbox/concurrent.js").AwaitProps<{
                accessToken: Promise<string>;
                refreshToken: Promise<string>;
            }>>;
        }>;
        userService: renraku.Service<import("./types/auth-metas.js").AnonMeta, import("./types/auth-metas.js").LoginAuth, {
            getUser({ userId }: {
                userId: string;
            }): Promise<{
                userId: string;
                profile: import("./aspects/users/types/profile.js").Profile;
                roles: import("./aspects/users/types/public-user-role.js").PublicUserRole[];
                stats: import("./aspects/users/types/user-stats.js").UserStats;
            }>;
        }>;
        personalService: renraku.Service<import("./types/auth-metas.js").UserMeta, import("./types/auth-metas.js").UserAuth, {
            setProfile({ userId: userIdString, profileDraft }: {
                userId: string;
                profileDraft: import("./aspects/users/routines/personal/types/profile-draft.js").ProfileDraft;
            }): Promise<void>;
        }>;
    };
    permissions: {
        permissionsService: renraku.Service<import("./aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
            engine: {
                getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                    userIds: string[];
                    onlyGetPublicRoles: boolean;
                }) => Promise<{
                    userId: string;
                    userHasRoles: {
                        userId: import("dbmage").Id;
                        roleId: import("dbmage").Id;
                        timeframeStart: number;
                        timeframeEnd: number;
                        public: boolean;
                        hard: boolean;
                        time: number;
                    }[];
                }[]>;
                getAnonymousPrivileges: () => Promise<string[]>;
                getPrivilegesForUsers: (userIds: string[]) => Promise<{
                    userId: string;
                    privileges: string[];
                }[]>;
                getPublicRolesForUsers: (userIds: string[]) => Promise<{
                    userId: string;
                    publicUserRoles: import("./aspects/users/types/public-user-role.js").PublicUserRole[];
                }[]>;
                getPermissionsDisplay: () => Promise<import("./aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                getPrivileges: (privilegeIds: string[]) => Promise<{
                    hard: boolean;
                    label: string;
                    time: number;
                    privilegeId: string;
                }[]>;
                getAllPrivileges: () => Promise<{
                    hard: boolean;
                    label: string;
                    time: number;
                    privilegeId: string;
                }[]>;
                getUserPrivileges: (userId: string) => Promise<string[]>;
            };
            access: import("./types/auth-tokens.js").AccessPayload;
            database: import("../../assembly/backend/types/database.js").DatabaseSafe;
            checker: import("./aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                universal: string;
                banned: string;
                "moderate all chats": string;
                "control stripe account": string;
                "manage store": string;
                "give away freebies": string;
                "view all videos": string;
                "moderate videos": string;
                "edit any profile": string;
                "customize permissions": string;
                "answer questions": string;
                "moderate questions": string;
                "view stats": string;
                "administrate user roles": string;
                "view all chats": string;
                "participate in all chats": string;
                "read questions": string;
                "post questions": string;
                "like questions": string;
                "report questions": string;
            }>;
        }, {
            fetchPermissions(): Promise<import("./aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            createRole({ label }: {
                label: string;
            }): Promise<void>;
            deleteRole({ roleId: roleIdString }: {
                roleId: string;
            }): Promise<void>;
            assignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                roleId: string;
                privilegeId: string;
            }): Promise<void>;
            unassignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                roleId: string;
                privilegeId: string;
            }): Promise<void>;
            createPrivilege({ label }: {
                label: string;
            }): Promise<import("./aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
            deletePrivilege({ privilegeId: privilegeIdString }: {
                privilegeId: string;
            }): Promise<void>;
        }>;
    };
};
