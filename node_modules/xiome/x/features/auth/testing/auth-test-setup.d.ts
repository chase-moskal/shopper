import * as dbmage from "dbmage";
import * as renraku from "renraku";
export declare function authTestSetup(): Promise<{
    createRole(label: string, privilegeIds: string[]): Promise<string>;
    makeClient(...roleIds: string[]): Promise<{
        accessModel: {
            subscribe: (...listeners: ((accessOp: import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>) => void | Promise<void>)[]) => () => void;
            getAccessOp(): import("../../../framework/ops.js").Op<import("../types/auth-tokens.js").AccessPayload>;
            getAccess(): import("../types/auth-tokens.js").AccessPayload;
            getValidAccess(): Promise<import("../types/auth-tokens.js").AccessPayload>;
            useExistingLogin(): Promise<void>;
            sendLoginLink(email: string): Promise<void>;
            login(loginToken: string): Promise<void>;
            logout(): Promise<void>;
            reauthorize(): Promise<void>;
        };
        authMediator: {
            subscribeToAccessChange: import("../../../toolbox/pubsub.js").Subscribe<import("../mediator/types/access-event-listener.js").AccessEventListener>;
            subscribeToTokenChange: import("../../../toolbox/pubsub.js").Subscribe<() => void | Promise<void>>;
            initialize(): Promise<import("../types/auth-tokens.js").AccessPayload>;
            getValidAccess(): Promise<import("../types/auth-tokens.js").AccessPayload>;
            getValidAccessToken(): Promise<string>;
            login(tokens: import("../types/auth-tokens.js").AuthTokens): Promise<import("../types/auth-tokens.js").AccessPayload>;
            logout(): Promise<import("../types/auth-tokens.js").AccessPayload>;
            reauthorize(): Promise<import("../types/auth-tokens.js").AccessPayload>;
        };
        logBackIn: () => Promise<void>;
    }>;
    appId: dbmage.Id;
    rando: {
        random: () => number;
        compare: (a: string, b: string) => boolean;
        randomId: () => dbmage.Id;
        randomBuffer: (bytes: number) => ArrayBuffer;
        randomSample: <T>(palette: T[]) => T;
        randomSequence: (length: number, palette: string[]) => string;
    };
    config: import("../../../assembly/backend/types/secret-config.js").SecretConfig;
    storage: dbmage.FlexStorage;
    appOrigin: string;
    authPolicies: {
        greenPolicy: renraku.Policy<undefined, import("../types/auth-metas.js").GreenAuth>;
        anonPolicy: renraku.Policy<import("../types/auth-metas.js").AnonMeta, import("../types/auth-metas.js").LoginAuth>;
        userPolicy: renraku.Policy<import("../types/auth-metas.js").UserMeta, import("../types/auth-metas.js").UserAuth>;
        platformUserPolicy: renraku.Policy<import("../types/auth-metas.js").PlatformUserMeta, import("../types/auth-metas.js").PlatformUserAuth>;
        appOwnerPolicy: renraku.Policy<import("../types/auth-metas.js").AppOwnerMeta, import("../types/auth-metas.js").AppOwnerAuth>;
    };
    databaseRaw: import("../../../assembly/backend/types/database.js").DatabaseRaw;
    database: import("../../../assembly/backend/types/database.js").DatabaseSafe;
}>;
