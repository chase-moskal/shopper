export declare const viewPrivilege = "9244947a5736b1e0343340e8911e1e39bce60241f96dc4e39fbec372eb716bb2";
export declare const roles: {
    unworthy: any[];
    viewer: string[];
    moderator: string[];
};
export declare function videoSetup(): Promise<{
    for(privileges: string[]): Promise<{
        models: {
            dacastModel: {
                state: {
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    linkedAccountOp: import("../../../framework/ops.js").Op<import("../types/dacast-link.js").DacastLinkDisplay>;
                };
                subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    linkedAccountOp: import("../../../framework/ops.js").Op<import("../types/dacast-link.js").DacastLinkDisplay>;
                }>) => () => void;
                onLinkChange: (listener: (context: import("../types/dacast-link.js").DacastLinkDisplay) => void) => () => void;
                updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                initialize(): Promise<void>;
                readonly linkedAccount: import("../types/dacast-link.js").DacastLinkDisplay;
                linkAccount({ apiKey }: {
                    apiKey: string;
                }): Promise<import("../types/dacast-link.js").DacastLinkDisplay>;
                unlinkAccount(): Promise<void>;
            };
            contentModel: {
                state: {
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                    viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                    privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                    showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
                };
                subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                    viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                    privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                    showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
                }>) => () => void;
                updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                onVideoHostingUpdate(): Promise<void>;
                initializeForModerationData(): Promise<void>;
                initializeForVideo(label: string): Promise<void>;
                readonly allowance: {
                    canModerateVideos: boolean;
                    canViewAllVideos: boolean;
                };
                readonly catalog: import("../types/video-concepts.js").VideoHosting.DacastContent[];
                readonly views: import("../types/video-concepts.js").VideoView[];
                readonly privileges: import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
                readonly shows: import("../types/video-concepts.js").VideoShow[];
                getView(label: string): import("../types/video-concepts.js").VideoView;
                getPrivilege(id: string): import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
                getShow(label: string): import("../types/video-concepts.js").VideoShow;
                setView(view: {
                    label: string;
                    privileges: string[];
                    reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
                }): Promise<void>;
                deleteView(label: string): Promise<void>;
            };
            updateAccessOp(accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): void;
        };
        link(): Promise<{
            dacastModel: {
                state: {
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    linkedAccountOp: import("../../../framework/ops.js").Op<import("../types/dacast-link.js").DacastLinkDisplay>;
                };
                subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    linkedAccountOp: import("../../../framework/ops.js").Op<import("../types/dacast-link.js").DacastLinkDisplay>;
                }>) => () => void;
                onLinkChange: (listener: (context: import("../types/dacast-link.js").DacastLinkDisplay) => void) => () => void;
                updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                initialize(): Promise<void>;
                readonly linkedAccount: import("../types/dacast-link.js").DacastLinkDisplay;
                linkAccount({ apiKey }: {
                    apiKey: string;
                }): Promise<import("../types/dacast-link.js").DacastLinkDisplay>;
                unlinkAccount(): Promise<void>;
            };
            contentModel: {
                state: {
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                    viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                    privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                    showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
                };
                subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                    accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                    catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                    viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                    privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                    showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
                }>) => () => void;
                updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                onVideoHostingUpdate(): Promise<void>;
                initializeForModerationData(): Promise<void>;
                initializeForVideo(label: string): Promise<void>;
                readonly allowance: {
                    canModerateVideos: boolean;
                    canViewAllVideos: boolean;
                };
                readonly catalog: import("../types/video-concepts.js").VideoHosting.DacastContent[];
                readonly views: import("../types/video-concepts.js").VideoView[];
                readonly privileges: import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
                readonly shows: import("../types/video-concepts.js").VideoShow[];
                getView(label: string): import("../types/video-concepts.js").VideoView;
                getPrivilege(id: string): import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
                getShow(label: string): import("../types/video-concepts.js").VideoShow;
                setView(view: {
                    label: string;
                    privileges: string[];
                    reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
                }): Promise<void>;
                deleteView(label: string): Promise<void>;
            };
            updateAccessOp(accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): void;
        }>;
    }>;
}>;
