import { snapstate } from "@chasemoskal/snapstate";
import { ops } from "../../../../framework/ops.js";
import { subbies } from "../../../../toolbox/subbies.js";
import { videoPrivileges } from "../../api/video-privileges.js";
export function makeDacastModel({ dacastService }) {
    const linkChange = subbies();
    const state = snapstate({
        accessOp: ops.none(),
        linkedAccountOp: ops.none(),
    });
    let alreadyInitialized = false;
    const isModerator = () => {
        const access = ops.value(state.readable.accessOp);
        return access && access.permit.privileges.includes(videoPrivileges["moderate videos"]);
    };
    async function loadLinkedAccount() {
        return ops.operation({
            promise: dacastService.getLink(),
            setOp: op => state.writable.linkedAccountOp = op,
        });
    }
    async function refresh() {
        if (alreadyInitialized && isModerator()) {
            await loadLinkedAccount();
        }
    }
    return {
        state: state.readable,
        subscribe: state.subscribe,
        onLinkChange: linkChange.subscribe,
        async updateAccessOp(op) {
            state.writable.accessOp = op;
            state.writable.linkedAccountOp = ops.none();
            await refresh();
        },
        async initialize() {
            if (!alreadyInitialized) {
                alreadyInitialized = true;
                await refresh();
            }
        },
        get linkedAccount() {
            return ops.value(state.readable.linkedAccountOp);
        },
        async linkAccount({ apiKey }) {
            return ops.operation({
                setOp: op => state.writable.linkedAccountOp = op,
                promise: dacastService.setLink({ apiKey })
                    .then(link => {
                    linkChange.publish(link);
                    return link;
                }),
            });
        },
        async unlinkAccount() {
            return ops.operation({
                setOp: op => state.writable.linkedAccountOp = op,
                promise: dacastService.clearLink()
                    .then(() => linkChange.publish(undefined)),
            });
        },
    };
}
//# sourceMappingURL=dacast-model.js.map