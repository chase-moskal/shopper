import { Op } from "../../../framework/ops.js";
import { AccessPayload } from "../../auth/types/auth-tokens.js";
import { VideoModelsOptions } from "./types/video-models-options.js";
export declare function makeVideoModels(options: VideoModelsOptions): {
    dacastModel: {
        state: {
            accessOp: Op<AccessPayload>;
            linkedAccountOp: Op<import("../types/dacast-link.js").DacastLinkDisplay>;
        };
        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
            accessOp: Op<AccessPayload>;
            linkedAccountOp: Op<import("../types/dacast-link.js").DacastLinkDisplay>;
        }>) => () => void;
        onLinkChange: (listener: (context: import("../types/dacast-link.js").DacastLinkDisplay) => void) => () => void;
        updateAccessOp(op: Op<AccessPayload>): Promise<void>;
        initialize(): Promise<void>;
        readonly linkedAccount: import("../types/dacast-link.js").DacastLinkDisplay;
        linkAccount({ apiKey }: {
            apiKey: string;
        }): Promise<import("../types/dacast-link.js").DacastLinkDisplay>;
        unlinkAccount(): Promise<void>;
    };
    contentModel: {
        state: {
            accessOp: Op<AccessPayload>;
            catalogOp: Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
            viewsOp: Op<import("../types/video-concepts.js").VideoView[]>;
            privilegesOp: Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
            showsOp: Op<import("../types/video-concepts.js").VideoShow[]>;
        };
        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
            accessOp: Op<AccessPayload>;
            catalogOp: Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
            viewsOp: Op<import("../types/video-concepts.js").VideoView[]>;
            privilegesOp: Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
            showsOp: Op<import("../types/video-concepts.js").VideoShow[]>;
        }>) => () => void;
        updateAccessOp(op: Op<AccessPayload>): Promise<void>;
        onVideoHostingUpdate(): Promise<void>;
        initializeForModerationData(): Promise<void>;
        initializeForVideo(label: string): Promise<void>;
        readonly allowance: {
            canModerateVideos: boolean;
            canViewAllVideos: boolean;
        };
        readonly catalog: import("../types/video-concepts.js").VideoHosting.DacastContent[];
        readonly views: import("../types/video-concepts.js").VideoView[];
        readonly privileges: import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
        readonly shows: import("../types/video-concepts.js").VideoShow[];
        getView(label: string): import("../types/video-concepts.js").VideoView;
        getPrivilege(id: string): import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
        getShow(label: string): import("../types/video-concepts.js").VideoShow;
        setView(view: {
            label: string;
            privileges: string[];
            reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
        }): Promise<void>;
        deleteView(label: string): Promise<void>;
    };
    updateAccessOp(accessOp: Op<AccessPayload>): void;
};
