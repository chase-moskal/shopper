import * as renraku from "renraku";
import { Dacast } from "../dacast/types/dacast-types.js";
import { SecretConfig } from "../../../assembly/backend/types/secret-config.js";
import { prepareAuthPolicies } from "../../auth/policies/prepare-auth-policies.js";
export declare function videosApi({ config, authPolicies, dacastSdk, }: {
    config: SecretConfig;
    authPolicies: ReturnType<typeof prepareAuthPolicies>;
    dacastSdk: Dacast.Sdk;
}): {
    dacastService: renraku.Service<import("../types/video-auth.js").VideoMeta, {
        checker: import("../../auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
            "view all videos": string;
            "moderate videos": string;
        }>;
        engine: {
            getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                userIds: string[];
                onlyGetPublicRoles: boolean;
            }) => Promise<{
                userId: string;
                userHasRoles: {
                    userId: import("dbmage").Id;
                    roleId: import("dbmage").Id;
                    timeframeStart: number;
                    timeframeEnd: number;
                    public: boolean;
                    hard: boolean;
                    time: number;
                }[];
            }[]>;
            getAnonymousPrivileges: () => Promise<string[]>;
            getPrivilegesForUsers: (userIds: string[]) => Promise<{
                userId: string;
                privileges: string[];
            }[]>;
            getPublicRolesForUsers: (userIds: string[]) => Promise<{
                userId: string;
                publicUserRoles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
            }[]>;
            getPermissionsDisplay: () => Promise<import("../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            getPrivileges: (privilegeIds: string[]) => Promise<{
                hard: boolean;
                label: string;
                time: number;
                privilegeId: string;
            }[]>;
            getAllPrivileges: () => Promise<{
                hard: boolean;
                label: string;
                time: number;
                privilegeId: string;
            }[]>;
            getUserPrivileges: (userId: string) => Promise<string[]>;
        };
        access: import("../../auth/types/auth-tokens.js").AccessPayload;
        database: import("../../../assembly/backend/types/database.js").DatabaseSafe;
    }, {
        getLink(): Promise<import("../types/dacast-link.js").DacastLinkDisplay>;
        setLink(inputs: {
            apiKey: string;
        }): Promise<import("../types/dacast-link.js").DacastLinkDisplay>;
        clearLink(): Promise<void>;
    }>;
    contentService: renraku.Service<import("../types/video-auth.js").VideoMeta, {
        engine: {
            getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                userIds: string[];
                onlyGetPublicRoles: boolean;
            }) => Promise<{
                userId: string;
                userHasRoles: {
                    userId: import("dbmage").Id;
                    roleId: import("dbmage").Id;
                    timeframeStart: number;
                    timeframeEnd: number;
                    public: boolean;
                    hard: boolean;
                    time: number;
                }[];
            }[]>;
            getAnonymousPrivileges: () => Promise<string[]>;
            getPrivilegesForUsers: (userIds: string[]) => Promise<{
                userId: string;
                privileges: string[];
            }[]>;
            getPublicRolesForUsers: (userIds: string[]) => Promise<{
                userId: string;
                publicUserRoles: import("../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
            }[]>;
            getPermissionsDisplay: () => Promise<import("../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
            getPrivileges: (privilegeIds: string[]) => Promise<{
                hard: boolean;
                label: string;
                time: number;
                privilegeId: string;
            }[]>;
            getAllPrivileges: () => Promise<{
                hard: boolean;
                label: string;
                time: number;
                privilegeId: string;
            }[]>;
            getUserPrivileges: (userId: string) => Promise<string[]>;
        };
        checker: import("../../auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
            "view all videos": string;
            "moderate videos": string;
        }>;
        access: import("../../auth/types/auth-tokens.js").AccessPayload;
        database: import("../../../assembly/backend/types/database.js").DatabaseSafe;
    }, {
        fetchModerationData(): Promise<import("../types/video-concepts.js").VideoModerationData>;
        writeView({ label, privileges, reference, }: {
            label: string;
            privileges: string[];
            reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
        }): Promise<void>;
        deleteView({ label }: {
            label: string;
        }): Promise<void>;
        getShows({ labels }: {
            labels: string[];
        }): Promise<import("../types/video-concepts.js").VideoShow[]>;
    }>;
};
