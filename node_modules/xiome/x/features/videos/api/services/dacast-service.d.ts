import * as renraku from "renraku";
import { Id } from "dbmage";
import { VideoMeta } from "../../types/video-auth.js";
import { Dacast } from "../../dacast/types/dacast-types.js";
import { AnonAuth, AnonMeta } from "../../../auth/types/auth-metas.js";
import { DacastLinkDisplay } from "../../types/dacast-link.js";
import { SecretConfig } from "../../../../assembly/backend/types/secret-config.js";
export declare const makeDacastService: ({ config, dacastSdk, basePolicy, }: {
    config: SecretConfig;
    dacastSdk: Dacast.Sdk;
    basePolicy: renraku.Policy<AnonMeta, AnonAuth>;
}) => renraku.Service<VideoMeta, {
    checker: import("../../../auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
        "view all videos": string;
        "moderate videos": string;
    }>;
    engine: {
        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
            userIds: string[];
            onlyGetPublicRoles: boolean;
        }) => Promise<{
            userId: string;
            userHasRoles: {
                userId: Id;
                roleId: Id;
                timeframeStart: number;
                timeframeEnd: number;
                public: boolean;
                hard: boolean;
                time: number;
            }[];
        }[]>;
        getAnonymousPrivileges: () => Promise<string[]>;
        getPrivilegesForUsers: (userIds: string[]) => Promise<{
            userId: string;
            privileges: string[];
        }[]>;
        getPublicRolesForUsers: (userIds: string[]) => Promise<{
            userId: string;
            publicUserRoles: import("../../../auth/aspects/users/types/public-user-role.js").PublicUserRole[];
        }[]>;
        getPermissionsDisplay: () => Promise<import("../../../auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
        getPrivileges: (privilegeIds: string[]) => Promise<{
            hard: boolean;
            label: string;
            time: number;
            privilegeId: string;
        }[]>;
        getAllPrivileges: () => Promise<{
            hard: boolean;
            label: string;
            time: number;
            privilegeId: string;
        }[]>;
        getUserPrivileges: (userId: string) => Promise<string[]>;
    };
    access: import("../../../auth/types/auth-tokens.js").AccessPayload;
    database: import("../../../../assembly/backend/types/database.js").DatabaseSafe;
}, {
    getLink(): Promise<DacastLinkDisplay>;
    setLink(inputs: {
        apiKey: string;
    }): Promise<DacastLinkDisplay>;
    clearLink(): Promise<void>;
}>;
