var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XiomeVideoDisplay_instances, _XiomeVideoDisplay_model_get, _XiomeVideoDisplay_embeds, _XiomeVideoDisplay_videoControls, _XiomeVideoDisplay_renderShow;
import styles from "./xiome-video-display.css.js";
import { prepareEmbeds } from "./parts/embeds/prepare-embeds.js";
import { videoControls } from "./parts/controls/video-controls.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { Component, mixinStyles, html, property, mixinRequireShare } from "../../../../framework/component.js";
let XiomeVideoDisplay = class XiomeVideoDisplay extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomeVideoDisplay_instances.add(this);
        this.label = "default";
        this["mock-embed"] = false;
        this["show-title"] = false;
        _XiomeVideoDisplay_embeds.set(this, prepareEmbeds());
        _XiomeVideoDisplay_videoControls.set(this, (() => {
            const controls = videoControls({
                contentModel: __classPrivateFieldGet(this, _XiomeVideoDisplay_instances, "a", _XiomeVideoDisplay_model_get),
                requestUpdate: () => this.requestUpdate(),
                queryAll: s => Array.from(this.shadowRoot.querySelectorAll(s)),
            });
            this.addSubscription(controls.subscribe);
            return controls;
        })());
    }
    async init() {
        await __classPrivateFieldGet(this, _XiomeVideoDisplay_instances, "a", _XiomeVideoDisplay_model_get).initializeForVideo(this.label);
    }
    render() {
        return renderOp(__classPrivateFieldGet(this, _XiomeVideoDisplay_instances, "a", _XiomeVideoDisplay_model_get).state.accessOp, () => html `
			${__classPrivateFieldGet(this, _XiomeVideoDisplay_instances, "a", _XiomeVideoDisplay_model_get).allowance.canModerateVideos
            ? __classPrivateFieldGet(this, _XiomeVideoDisplay_videoControls, "f").render(this.label)
            : null}
			${__classPrivateFieldGet(this, _XiomeVideoDisplay_instances, "m", _XiomeVideoDisplay_renderShow).call(this)}
		`);
    }
};
_XiomeVideoDisplay_embeds = new WeakMap();
_XiomeVideoDisplay_videoControls = new WeakMap();
_XiomeVideoDisplay_instances = new WeakSet();
_XiomeVideoDisplay_model_get = function _XiomeVideoDisplay_model_get() {
    return this.share.contentModel;
};
_XiomeVideoDisplay_renderShow = function _XiomeVideoDisplay_renderShow() {
    var _a, _b;
    const show = __classPrivateFieldGet(this, _XiomeVideoDisplay_instances, "a", _XiomeVideoDisplay_model_get).getShow(this.label);
    switch ((_a = show === null || show === void 0 ? void 0 : show.status) !== null && _a !== void 0 ? _a : "unavailable") {
        case "unavailable":
            return html `<slot name=unavailable></slot>`;
        case "unprivileged":
            return html `<slot name=unprivileged></slot>`;
        case "available":
            return html `
					${this["show-title"]
                ? html `<h4 part=title>${show.details.title}</h4>`
                : null}
					${(_b = __classPrivateFieldGet(this, _XiomeVideoDisplay_embeds, "f")
                .obtain(show.details, this["mock-embed"])) !== null && _b !== void 0 ? _b : "(embed missing)"}
					<slot></slot>
				`;
    }
};
__decorate([
    property({ type: String })
], XiomeVideoDisplay.prototype, "label", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XiomeVideoDisplay.prototype, "mock-embed", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], XiomeVideoDisplay.prototype, "show-title", void 0);
XiomeVideoDisplay = __decorate([
    mixinStyles(styles)
], XiomeVideoDisplay);
export { XiomeVideoDisplay };
//# sourceMappingURL=xiome-video-display.js.map