var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-video-views.css.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { Component, mixinStyles, html, mixinRequireShare } from "../../../../framework/component.js";
import { renderView } from "../video-display/parts/controls/render-view.js";
let XiomeVideoViews = class XiomeVideoViews extends mixinRequireShare()(Component) {
    async init() {
        this.share.contentModel.initializeForModerationData();
    }
    render() {
        const model = this.share.contentModel;
        return model.allowance.canModerateVideos
            ? renderOp(model.state.viewsOp, views => html `
				<slot>
					<h3>all video views</h3>
				</slot>
				${views.length ? html `
					<div class=views>
						${views.map(view => renderView({
                view,
                onDeleteClick: () => model.deleteView(view.label),
                getPrivilegeDisplay: id => model.getPrivilege(id),
            }))}
					</div>
				` : html `
					<slot name=no-views>
						<p>no video views are registered</p>
					</slot>
				`}
			`)
            : html `
				<slot name=unprivileged>
					<p>you don't have sufficient privileges to moderate video views</p>
				</slot>
			`;
    }
};
XiomeVideoViews = __decorate([
    mixinStyles(styles)
], XiomeVideoViews);
export { XiomeVideoViews };
//# sourceMappingURL=xiome-video-views.js.map