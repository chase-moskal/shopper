var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _XiomeVideoHosting_showHelp, _XiomeVideoHosting_linkFailed, _XiomeVideoHosting_apiKeyDraft, _XiomeVideoHosting_handleInputChange, _XiomeVideoHosting_handleLinkClick, _XiomeVideoHosting_handleUnlinkClick, _XiomeVideoHosting_toggleHelp, _XiomeVideoHosting_renderHelp, _XiomeVideoHosting_renderWhenUnlinked, _XiomeVideoHosting_renderWhenLinked;
import { videoPrivileges } from "../../api/video-privileges.js";
import clockIcon from "../../../../framework/icons/clock.svg.js";
import warningIcon from "../../../../framework/icons/warning.svg.js";
import { formatDate } from "../../../../toolbox/goodtimes/format-date.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { validateDacastApiKeyAllowingMock } from "../../api/validation/validate-dacast-api-key.js";
import { Component, mixinStyles, html, mixinRequireShare } from "../../../../framework/component.js";
import styles from "./xiome-video-hosting.css.js";
let XiomeVideoHosting = class XiomeVideoHosting extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomeVideoHosting_showHelp.set(this, false);
        _XiomeVideoHosting_linkFailed.set(this, false);
        _XiomeVideoHosting_apiKeyDraft.set(this, "");
        _XiomeVideoHosting_handleInputChange.set(this, ({ detail: { value } }) => {
            __classPrivateFieldSet(this, _XiomeVideoHosting_apiKeyDraft, value, "f");
            this.requestUpdate();
        });
        _XiomeVideoHosting_handleLinkClick.set(this, async () => {
            const apiKey = __classPrivateFieldGet(this, _XiomeVideoHosting_apiKeyDraft, "f");
            if (apiKey) {
                __classPrivateFieldSet(this, _XiomeVideoHosting_linkFailed, false, "f");
                __classPrivateFieldSet(this, _XiomeVideoHosting_apiKeyDraft, "", "f");
                const link = await this.share.dacastModel.linkAccount({ apiKey });
                __classPrivateFieldSet(this, _XiomeVideoHosting_linkFailed, !link, "f");
            }
        });
        _XiomeVideoHosting_handleUnlinkClick.set(this, async () => {
            __classPrivateFieldSet(this, _XiomeVideoHosting_apiKeyDraft, "", "f");
            await this.share.dacastModel.unlinkAccount();
        });
        _XiomeVideoHosting_toggleHelp.set(this, () => {
            __classPrivateFieldSet(this, _XiomeVideoHosting_showHelp, !__classPrivateFieldGet(this, _XiomeVideoHosting_showHelp, "f"), "f");
            this.requestUpdate();
        });
        _XiomeVideoHosting_renderHelp.set(this, () => {
            return html `
			<div class=helpbox>
				<p>how to find your dacast api key:</p>
				<ul>
					<li>create a <a part=link target=_blank href="https://dacast.com/">dacast</a> account</li>
					<li>if you have a trial account, you must email support and ask them to activate your account's "api access"</li>
					<li>generate an api key in your <a part=link target=_blank href="https://app.dacast.com/settings/integrations">dacast integrations settings</a></li>
				</ul>
			</div>
		`;
        });
        _XiomeVideoHosting_renderWhenUnlinked.set(this, () => {
            return html `
			<h2>link your dacast account</h2>
			<xio-text-input
				placeholder="api key"
				.validator=${validateDacastApiKeyAllowingMock}
				@enterpress=${__classPrivateFieldGet(this, _XiomeVideoHosting_handleLinkClick, "f")}
				@valuechange=${__classPrivateFieldGet(this, _XiomeVideoHosting_handleInputChange, "f")}>
			</xio-text-input>
			${__classPrivateFieldGet(this, _XiomeVideoHosting_linkFailed, "f")
                ? html `<div class=failed>${warningIcon} <p>dacast rejected the api link</p></div>`
                : null}
			<div class=buttonbar>
				<xio-button
					class=help-button
					@press=${__classPrivateFieldGet(this, _XiomeVideoHosting_toggleHelp, "f")}>
						${__classPrivateFieldGet(this, _XiomeVideoHosting_showHelp, "f")
                ? "hide help"
                : "show help"}
				</xio-button>
				<xio-button
					class=link-button
					?disabled=${!__classPrivateFieldGet(this, _XiomeVideoHosting_apiKeyDraft, "f")}
					@press=${__classPrivateFieldGet(this, _XiomeVideoHosting_handleLinkClick, "f")}>
						link
				</xio-button>
			</div>
			${__classPrivateFieldGet(this, _XiomeVideoHosting_showHelp, "f")
                ? __classPrivateFieldGet(this, _XiomeVideoHosting_renderHelp, "f").call(this)
                : null}
		`;
        });
        _XiomeVideoHosting_renderWhenLinked.set(this, (linkedAccount) => {
            return html `
			<h2>your dacast account is linked</h2>
			<div class=link-time-info>
				${clockIcon}
				<p>linked on ${formatDate(linkedAccount.time).full}</p>
			</div>
			<div class=unlink-button>
				<xio-button @press=${__classPrivateFieldGet(this, _XiomeVideoHosting_handleUnlinkClick, "f")}>unlink</xio-button>
			</div>
		`;
        });
    }
    get state() {
        return this.share.dacastModel.state;
    }
    async init() {
        await this.share.dacastModel.initialize();
    }
    render() {
        return renderOp(this.state.accessOp, access => html `
			<div class=dacastbox>
				${access.permit.privileges.includes(videoPrivileges["moderate videos"])
            ? renderOp(this.state.linkedAccountOp, linkedAccount => linkedAccount
                ? __classPrivateFieldGet(this, _XiomeVideoHosting_renderWhenLinked, "f").call(this, linkedAccount)
                : __classPrivateFieldGet(this, _XiomeVideoHosting_renderWhenUnlinked, "f").call(this))
            : html `<slot name=forbidden>you don't have permission to edit video hosting settings</slot>`}
			</div>
		`);
    }
};
_XiomeVideoHosting_showHelp = new WeakMap();
_XiomeVideoHosting_linkFailed = new WeakMap();
_XiomeVideoHosting_apiKeyDraft = new WeakMap();
_XiomeVideoHosting_handleInputChange = new WeakMap();
_XiomeVideoHosting_handleLinkClick = new WeakMap();
_XiomeVideoHosting_handleUnlinkClick = new WeakMap();
_XiomeVideoHosting_toggleHelp = new WeakMap();
_XiomeVideoHosting_renderHelp = new WeakMap();
_XiomeVideoHosting_renderWhenUnlinked = new WeakMap();
_XiomeVideoHosting_renderWhenLinked = new WeakMap();
XiomeVideoHosting = __decorate([
    mixinStyles(styles)
], XiomeVideoHosting);
export { XiomeVideoHosting };
//# sourceMappingURL=xiome-video-hosting.js.map