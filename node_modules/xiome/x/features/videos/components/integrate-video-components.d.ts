import { XiomeVideoViews } from "./video-views/xiome-video-views.js";
import { XiomeVideoHosting } from "./video-hosting/xiome-video-hosting.js";
import { XiomeVideoDisplay } from "./video-display/xiome-video-display.js";
import { XiomeVideoCompanion } from "./video-companion/xiome-video-companion.js";
import { XiomeComponentOptions } from "../../../assembly/frontend/components/types/xiome-component-options.js";
export declare function integrateVideoComponents({ models }: XiomeComponentOptions): {
    XiomeVideoHosting: import("../../../types/mixin.js").Mixin<typeof XiomeVideoHosting, import("../../../framework/component.js").WithShare<{
        dacastModel: {
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                linkedAccountOp: import("../../../framework/ops.js").Op<import("../types/dacast-link.js").DacastLinkDisplay>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                linkedAccountOp: import("../../../framework/ops.js").Op<import("../types/dacast-link.js").DacastLinkDisplay>;
            }>) => () => void;
            onLinkChange: (listener: (context: import("../types/dacast-link.js").DacastLinkDisplay) => void) => () => void;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            initialize(): Promise<void>;
            readonly linkedAccount: import("../types/dacast-link.js").DacastLinkDisplay;
            linkAccount({ apiKey }: {
                apiKey: string;
            }): Promise<import("../types/dacast-link.js").DacastLinkDisplay>;
            unlinkAccount(): Promise<void>;
        };
    }>>;
    XiomeVideoDisplay: import("../../../types/mixin.js").Mixin<typeof XiomeVideoDisplay, import("../../../framework/component.js").WithShare<{
        contentModel: {
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
            }>) => () => void;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            onVideoHostingUpdate(): Promise<void>;
            initializeForModerationData(): Promise<void>;
            initializeForVideo(label: string): Promise<void>;
            readonly allowance: {
                canModerateVideos: boolean;
                canViewAllVideos: boolean;
            };
            readonly catalog: import("../types/video-concepts.js").VideoHosting.DacastContent[];
            readonly views: import("../types/video-concepts.js").VideoView[];
            readonly privileges: import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
            readonly shows: import("../types/video-concepts.js").VideoShow[];
            getView(label: string): import("../types/video-concepts.js").VideoView;
            getPrivilege(id: string): import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
            getShow(label: string): import("../types/video-concepts.js").VideoShow;
            setView(view: {
                label: string;
                privileges: string[];
                reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
            }): Promise<void>;
            deleteView(label: string): Promise<void>;
        };
    }>>;
    XiomeVideoViews: import("../../../types/mixin.js").Mixin<typeof XiomeVideoViews, import("../../../framework/component.js").WithShare<{
        contentModel: {
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
            }>) => () => void;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            onVideoHostingUpdate(): Promise<void>;
            initializeForModerationData(): Promise<void>;
            initializeForVideo(label: string): Promise<void>;
            readonly allowance: {
                canModerateVideos: boolean;
                canViewAllVideos: boolean;
            };
            readonly catalog: import("../types/video-concepts.js").VideoHosting.DacastContent[];
            readonly views: import("../types/video-concepts.js").VideoView[];
            readonly privileges: import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
            readonly shows: import("../types/video-concepts.js").VideoShow[];
            getView(label: string): import("../types/video-concepts.js").VideoView;
            getPrivilege(id: string): import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
            getShow(label: string): import("../types/video-concepts.js").VideoShow;
            setView(view: {
                label: string;
                privileges: string[];
                reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
            }): Promise<void>;
            deleteView(label: string): Promise<void>;
        };
    }>>;
    XiomeVideoCompanion: import("../../../types/mixin.js").Mixin<typeof XiomeVideoCompanion, import("../../../framework/component.js").WithShare<{
        contentModel: {
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
            };
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                catalogOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoHosting.DacastContent[]>;
                viewsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoView[]>;
                privilegesOp: import("../../../framework/ops.js").Op<import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                showsOp: import("../../../framework/ops.js").Op<import("../types/video-concepts.js").VideoShow[]>;
            }>) => () => void;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            onVideoHostingUpdate(): Promise<void>;
            initializeForModerationData(): Promise<void>;
            initializeForVideo(label: string): Promise<void>;
            readonly allowance: {
                canModerateVideos: boolean;
                canViewAllVideos: boolean;
            };
            readonly catalog: import("../types/video-concepts.js").VideoHosting.DacastContent[];
            readonly views: import("../types/video-concepts.js").VideoView[];
            readonly privileges: import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
            readonly shows: import("../types/video-concepts.js").VideoShow[];
            getView(label: string): import("../types/video-concepts.js").VideoView;
            getPrivilege(id: string): import("../../auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
            getShow(label: string): import("../types/video-concepts.js").VideoShow;
            setView(view: {
                label: string;
                privileges: string[];
                reference: import("../types/video-concepts.js").VideoHosting.DacastReference;
            }): Promise<void>;
            deleteView(label: string): Promise<void>;
        };
    }>>;
};
