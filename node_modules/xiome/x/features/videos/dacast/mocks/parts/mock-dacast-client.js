export function mockDacastClient({ goodApiKey }) {
    let count = 1;
    function fakeContent(type) {
        const id = count++;
        return {
            online: true,
            id: `${type}-${id.toString()}`,
            title: `content ${id}`,
            creation_date: "1999-12-25",
        };
    }
    function fakeEmbedCode(type) {
        return type === "iframe"
            ? `<iframe src="https://iframe.dacast.com/vod/0ffd60be-91b7-22b0-1353-7dba7af43261/e9cc39f7-83ea-19db-2c0e-672beeec1547" width="100%" height="100%" frameborder="0" scrolling="no" allow="autoplay" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>`
            : `<script id="0ffd60be-91b7-22b0-1353-7dba7af43261-vod-e9cc39f7-83ea-19db-2c0e-672beeec1547" width="100%" height="100%" src="https://player.dacast.com/js/player.js?contentId=0ffd60be-91b7-22b0-1353-7dba7af43261-vod-e9cc39f7-83ea-19db-2c0e-672beeec1547"  class="dacast-video"></script>`;
    }
    const data = {
        vods: [0, 0].map(() => fakeContent("vod")),
        channels: [0, 0].map(() => fakeContent("channel")),
        playlists: [0, 0].map(() => fakeContent("playlist")),
    };
    return ({ apiKey }) => {
        function resource(content) {
            function fun(f) {
                return ((...args) => {
                    if (apiKey !== goodApiKey)
                        throw new Error("mock dacast invalid api key");
                    return f(...args);
                });
            }
            function paginate(content) {
                return {
                    totalCount: content.length.toString(),
                    data: content,
                    paging: {
                        last: "",
                        next: "",
                        previous: "",
                        self: "",
                    },
                };
            }
            return {
                get: fun(async () => paginate(content)),
                id: (contentId) => ({
                    get: fun(async () => content.find(c => c.id === contentId)),
                    embed: (embedType) => ({
                        get: fun(async () => ({ code: fakeEmbedCode(embedType) })),
                    }),
                }),
            };
        }
        return {
            vods: resource(data.vods),
            channels: resource(data.channels),
            playlists: resource(data.playlists),
        };
    };
}
//# sourceMappingURL=mock-dacast-client.js.map