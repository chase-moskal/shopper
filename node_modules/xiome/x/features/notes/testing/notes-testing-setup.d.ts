export declare function notesTestingSetup(): Promise<{
    rando: {
        random: () => number;
        compare: (a: string, b: string) => boolean;
        randomId: () => import("dbmage").Id;
        randomBuffer: (bytes: number) => ArrayBuffer;
        randomSample: <T>(palette: T[]) => T;
        randomSequence: (length: number, palette: string[]) => string;
    };
    access: import("../../auth/types/auth-tokens.js").AccessPayload;
    userId: string;
    backend: {
        notesDepositBox: {
            sendNotes: (drafts: import("../types/notes-concepts.js").DraftForNote<import("../types/notes-concepts.js").Notes.Any>[]) => Promise<{
                noteId: string;
            }[]>;
            sendNote: (draft: import("../types/notes-concepts.js").DraftForNote<import("../types/notes-concepts.js").Notes.Any>) => Promise<{
                noteId: string;
            }>;
        };
    };
    frontend: {
        notesModel: {
            initialize: () => Promise<import("../types/notes-concepts.js").NotesStats>;
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                statsOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").NotesStats>;
            };
            stateSubscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                statsOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").NotesStats>;
            }>) => () => void;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            readonly isLoggedIn: boolean;
            readonly stats: import("../types/notes-concepts.js").NotesStats;
            propagateChangeToOtherTabs: import("../../../toolbox/subbies.js").Subbie<undefined>;
            loadStats: () => Promise<import("../types/notes-concepts.js").NotesStats>;
            overwriteStatsOp(op: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").NotesStats>): void;
            createNotesCacheDetails: () => {
                cache: {
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        old: boolean;
                        pageNumber: number;
                        pageSize: number;
                        notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
                    }>) => () => void;
                    cacheState: {
                        old: boolean;
                        pageNumber: number;
                        pageSize: number;
                        notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
                    };
                    loginStatusChanged(): Promise<void>;
                    readonly notes: import("../types/notes-concepts.js").Notes.Any[];
                    fetchAppropriateNotes: () => Promise<import("../types/notes-concepts.js").Notes.Any[]>;
                    switchTabNew(): Promise<void>;
                    switchTabOld(): Promise<void>;
                    readonly isNextPageAvailable: boolean;
                    readonly isPreviousPageAvailable: boolean;
                    nextPage(): Promise<void>;
                    previousPage(): Promise<void>;
                    markAllNotesOld(): Promise<void>;
                    markSpecificNoteOld(noteId: string): Promise<void>;
                    markSpecificNoteNew(noteId: string): Promise<void>;
                    readonly totalPages: number;
                };
                setup: () => () => void;
            };
        };
        makeCacheAlreadySetup(): {
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                old: boolean;
                pageNumber: number;
                pageSize: number;
                notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
            }>) => () => void;
            cacheState: {
                old: boolean;
                pageNumber: number;
                pageSize: number;
                notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
            };
            loginStatusChanged(): Promise<void>;
            readonly notes: import("../types/notes-concepts.js").Notes.Any[];
            fetchAppropriateNotes: () => Promise<import("../types/notes-concepts.js").Notes.Any[]>;
            switchTabNew(): Promise<void>;
            switchTabOld(): Promise<void>;
            readonly isNextPageAvailable: boolean;
            readonly isPreviousPageAvailable: boolean;
            nextPage(): Promise<void>;
            previousPage(): Promise<void>;
            markAllNotesOld(): Promise<void>;
            markSpecificNoteOld(noteId: string): Promise<void>;
            markSpecificNoteNew(noteId: string): Promise<void>;
            readonly totalPages: number;
        };
    };
    browserTab: () => Promise<{
        notesModel: {
            initialize: () => Promise<import("../types/notes-concepts.js").NotesStats>;
            state: {
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                statsOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").NotesStats>;
            };
            stateSubscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                statsOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").NotesStats>;
            }>) => () => void;
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            readonly isLoggedIn: boolean;
            readonly stats: import("../types/notes-concepts.js").NotesStats;
            propagateChangeToOtherTabs: import("../../../toolbox/subbies.js").Subbie<undefined>;
            loadStats: () => Promise<import("../types/notes-concepts.js").NotesStats>;
            overwriteStatsOp(op: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").NotesStats>): void;
            createNotesCacheDetails: () => {
                cache: {
                    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                        old: boolean;
                        pageNumber: number;
                        pageSize: number;
                        notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
                    }>) => () => void;
                    cacheState: {
                        old: boolean;
                        pageNumber: number;
                        pageSize: number;
                        notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
                    };
                    loginStatusChanged(): Promise<void>;
                    readonly notes: import("../types/notes-concepts.js").Notes.Any[];
                    fetchAppropriateNotes: () => Promise<import("../types/notes-concepts.js").Notes.Any[]>;
                    switchTabNew(): Promise<void>;
                    switchTabOld(): Promise<void>;
                    readonly isNextPageAvailable: boolean;
                    readonly isPreviousPageAvailable: boolean;
                    nextPage(): Promise<void>;
                    previousPage(): Promise<void>;
                    markAllNotesOld(): Promise<void>;
                    markSpecificNoteOld(noteId: string): Promise<void>;
                    markSpecificNoteNew(noteId: string): Promise<void>;
                    readonly totalPages: number;
                };
                setup: () => () => void;
            };
        };
        makeCacheAlreadySetup(): {
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                old: boolean;
                pageNumber: number;
                pageSize: number;
                notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
            }>) => () => void;
            cacheState: {
                old: boolean;
                pageNumber: number;
                pageSize: number;
                notesOp: import("../../../framework/ops.js").Op<import("../types/notes-concepts.js").Notes.Any[]>;
            };
            loginStatusChanged(): Promise<void>;
            readonly notes: import("../types/notes-concepts.js").Notes.Any[];
            fetchAppropriateNotes: () => Promise<import("../types/notes-concepts.js").Notes.Any[]>;
            switchTabNew(): Promise<void>;
            switchTabOld(): Promise<void>;
            readonly isNextPageAvailable: boolean;
            readonly isPreviousPageAvailable: boolean;
            nextPage(): Promise<void>;
            previousPage(): Promise<void>;
            markAllNotesOld(): Promise<void>;
            markSpecificNoteOld(noteId: string): Promise<void>;
            markSpecificNoteNew(noteId: string): Promise<void>;
            readonly totalPages: number;
        };
    }>;
}>;
