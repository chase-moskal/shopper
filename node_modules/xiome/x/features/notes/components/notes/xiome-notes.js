var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XiomeNotes_instances, _XiomeNotes_model, _XiomeNotes_cacheDetails, _XiomeNotes_cache, _XiomeNotes_renderTabs, _XiomeNotes_renderNotes, _XiomeNotes_renderPagination, _XiomeNotes_renderButtonbar, _XiomeNotes_renderBasedOnStateOfNotesArray;
import styles from "./xiome-notes.css.js";
import chevronLeft from "../../../../framework/icons/chevron-left.svg.js";
import chevronRight from "../../../../framework/icons/chevron-right.svg.js";
import plus from "../../../../framework/icons/plus.svg.js";
import cross from "../../../../framework/icons/cross.svg.js";
import { ops } from "../../../../framework/ops.js";
import { renderOp } from "../../../../framework/op-rendering/render-op.js";
import { Component, mixinStyles, html, mixinRequireShare } from "../../../../framework/component.js";
import { formatDuration } from "../../../../toolbox/goodtimes/format-duration.js";
let XiomeNotes = class XiomeNotes extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomeNotes_instances.add(this);
        _XiomeNotes_model.set(this, this.share.notesModel);
        _XiomeNotes_cacheDetails.set(this, this.share.notesModel.createNotesCacheDetails());
        _XiomeNotes_cache.set(this, __classPrivateFieldGet(this, _XiomeNotes_cacheDetails, "f").cache);
    }
    async init() {
        await __classPrivateFieldGet(this, _XiomeNotes_model, "f").initialize();
    }
    subscribe() {
        const unsubs = [
            super.subscribe(),
            __classPrivateFieldGet(this, _XiomeNotes_cacheDetails, "f").setup(),
            __classPrivateFieldGet(this, _XiomeNotes_cache, "f").subscribe(() => this.requestUpdate()),
        ];
        if (__classPrivateFieldGet(this, _XiomeNotes_model, "f").isLoggedIn) {
            __classPrivateFieldGet(this, _XiomeNotes_cache, "f").fetchAppropriateNotes();
        }
        return () => unsubs.forEach(unsub => unsub());
    }
    render() {
        return renderOp(__classPrivateFieldGet(this, _XiomeNotes_model, "f").state.accessOp, access => (access === null || access === void 0 ? void 0 : access.user)
            ? html `
					${__classPrivateFieldGet(this, _XiomeNotes_instances, "m", _XiomeNotes_renderBasedOnStateOfNotesArray).call(this)}
				`
            : html `
					<slot name="logged-out">
						you must be logged in to see your notifications
					</slot>
				`);
    }
};
_XiomeNotes_model = new WeakMap();
_XiomeNotes_cacheDetails = new WeakMap();
_XiomeNotes_cache = new WeakMap();
_XiomeNotes_instances = new WeakSet();
_XiomeNotes_renderTabs = function _XiomeNotes_renderTabs() {
    const { old } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f").cacheState;
    const { switchTabNew, switchTabOld } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f");
    return html `
			<div class=tabs>
				<xio-button
					@press=${switchTabNew}
					data-tab="new"
					data-active=${!old}>
						new
				</xio-button>
				<xio-button
					@press=${switchTabOld}
					data-tab="old"
					data-active=${old}>
						old
				</xio-button>
			</div>
		`;
};
_XiomeNotes_renderNotes = function _XiomeNotes_renderNotes() {
    const { old, notesOp } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f").cacheState;
    const { markSpecificNoteNew, markSpecificNoteOld } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f");
    const now = Date.now();
    return renderOp(notesOp, notes => html `
			<ol>
				${notes.map(note => html `
					<li>
						<header class="note-header">
							<h2>${note.title}</h2>
							${old ? html `
								<xio-button @press=${() => markSpecificNoteNew(note.noteId)}>
									${plus}
								</xio-button>
							` : html `
								<xio-button @press=${() => markSpecificNoteOld(note.noteId)}>
									${cross}
								</xio-button>
							`}
						</header>
						<p><strong>${note.type}</strong> â€“ <em>${formatDuration(now - note.time).ago}</em></p>
					</li>
				`)}
			</ol>
		`);
};
_XiomeNotes_renderPagination = function _XiomeNotes_renderPagination() {
    const { pageNumber } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f").cacheState;
    const { nextPage, previousPage, totalPages, isNextPageAvailable, isPreviousPageAvailable, } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f");
    return html `
			${(isNextPageAvailable || isPreviousPageAvailable)
        ? html `
				<div class="paginationBar">
					<xio-button
						?disabled=${!isPreviousPageAvailable}
						@press=${previousPage}>
							${chevronLeft}
					</xio-button>
					<span>
						${pageNumber} / ${totalPages}
					</span>
					<xio-button
						?disabled=${!isNextPageAvailable}
						@press=${nextPage}>
							${chevronRight}
					</xio-button>
				</div>
				`
        : null}
		`;
};
_XiomeNotes_renderButtonbar = function _XiomeNotes_renderButtonbar() {
    const { old } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f").cacheState;
    const { markAllNotesOld } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f");
    return html `
			<div class=buttonbar>
				${old
        ? null
        : html `
						<xio-button @press=${markAllNotesOld}>
							mark all old
						</xio-button>
					`}
			</div>
		`;
};
_XiomeNotes_renderBasedOnStateOfNotesArray = function _XiomeNotes_renderBasedOnStateOfNotesArray() {
    var _a;
    const { old, notesOp } = __classPrivateFieldGet(this, _XiomeNotes_cache, "f").cacheState;
    return html `
			${((_a = ops.value(notesOp)) === null || _a === void 0 ? void 0 : _a.length) === 0
        ? html `
					${__classPrivateFieldGet(this, _XiomeNotes_instances, "m", _XiomeNotes_renderTabs).call(this)}
					<slot name="empty">
						you have no ${old ? 'old' : 'new'} notifications
					</slot>
				`
        : html `
					${__classPrivateFieldGet(this, _XiomeNotes_instances, "m", _XiomeNotes_renderTabs).call(this)}
					${__classPrivateFieldGet(this, _XiomeNotes_instances, "m", _XiomeNotes_renderNotes).call(this)}
					${__classPrivateFieldGet(this, _XiomeNotes_instances, "m", _XiomeNotes_renderPagination).call(this)}
					${__classPrivateFieldGet(this, _XiomeNotes_instances, "m", _XiomeNotes_renderButtonbar).call(this)}
				`}
		`;
};
XiomeNotes = __decorate([
    mixinStyles(styles)
], XiomeNotes);
export { XiomeNotes };
//# sourceMappingURL=xiome-notes.js.map