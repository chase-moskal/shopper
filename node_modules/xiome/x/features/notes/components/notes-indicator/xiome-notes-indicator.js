var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-notes-indicator.css.js";
import bell from "../../../../framework/icons/bell.svg.js";
import { property } from "../../../../framework/component.js";
import { Component, mixinStyles, html, mixinRequireShare } from "../../../../framework/component.js";
let XiomeNotesIndicator = class XiomeNotesIndicator extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        this.noIcon = false;
    }
    render() {
        const bellSpan = html `<span class="bell">${bell}</span>`;
        const { stats } = this.share.notesModel;
        return html `
				${stats.newCount === 0 ? html `${bellSpan}`
            : html `
					<span class="count">${stats.newCount}</span>
					${bellSpan}
				`}
			`;
    }
};
__decorate([
    property({ attribute: "no-icon" })
], XiomeNotesIndicator.prototype, "noIcon", void 0);
XiomeNotesIndicator = __decorate([
    mixinStyles(styles)
], XiomeNotesIndicator);
export { XiomeNotesIndicator };
//# sourceMappingURL=xiome-notes-indicator.js.map