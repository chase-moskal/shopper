import { Op } from "../../../framework/ops.js";
import { Service } from "../../../types/service.js";
import { NotesStats } from "../types/notes-concepts.js";
import { AccessPayload } from "../../auth/types/auth-tokens.js";
import { makeNotesService } from "../api/services/notes-service.js";
export declare function makeNotesModel({ notesService }: {
    notesService: Service<typeof makeNotesService>;
}): {
    initialize: () => Promise<NotesStats>;
    state: {
        accessOp: Op<AccessPayload>;
        statsOp: Op<NotesStats>;
    };
    stateSubscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
        accessOp: Op<AccessPayload>;
        statsOp: Op<NotesStats>;
    }>) => () => void;
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
    readonly isLoggedIn: boolean;
    readonly stats: NotesStats;
    propagateChangeToOtherTabs: import("../../../toolbox/subbies.js").Subbie<undefined>;
    loadStats: () => Promise<NotesStats>;
    overwriteStatsOp(op: Op<NotesStats>): void;
    createNotesCacheDetails: () => {
        cache: {
            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                old: boolean;
                pageNumber: number;
                pageSize: number;
                notesOp: Op<import("../types/notes-concepts.js").Notes.Any[]>;
            }>) => () => void;
            cacheState: {
                old: boolean;
                pageNumber: number;
                pageSize: number;
                notesOp: Op<import("../types/notes-concepts.js").Notes.Any[]>;
            };
            loginStatusChanged(): Promise<void>;
            readonly notes: import("../types/notes-concepts.js").Notes.Any[];
            fetchAppropriateNotes: () => Promise<import("../types/notes-concepts.js").Notes.Any[]>;
            switchTabNew(): Promise<void>;
            switchTabOld(): Promise<void>;
            readonly isNextPageAvailable: boolean;
            readonly isPreviousPageAvailable: boolean;
            nextPage(): Promise<void>;
            previousPage(): Promise<void>;
            markAllNotesOld(): Promise<void>;
            markSpecificNoteOld(noteId: string): Promise<void>;
            markSpecificNoteNew(noteId: string): Promise<void>;
            readonly totalPages: number;
        };
        setup: () => () => void;
    };
};
