import { Op } from "../../../../framework/ops.js";
import { Service } from "../../../../types/service.js";
import { Subbie } from "../../../../toolbox/subbies.js";
import { makeNotesService } from "../../api/services/notes-service.js";
import { Notes, NotesStats } from "../../types/notes-concepts.js";
export declare function prepareNotesCacheCreator({ propagateChangeToOtherTabs, notesService, getStats, loadStats, getIsLoggedIn, }: {
    propagateChangeToOtherTabs: Subbie;
    notesService: Service<typeof makeNotesService>;
    getStats: () => NotesStats;
    getIsLoggedIn: () => boolean;
    loadStats: () => Promise<NotesStats>;
}): () => {
    subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
        old: boolean;
        pageNumber: number;
        pageSize: number;
        notesOp: Op<Notes.Any[]>;
    }>) => () => void;
    cacheState: {
        old: boolean;
        pageNumber: number;
        pageSize: number;
        notesOp: Op<Notes.Any[]>;
    };
    loginStatusChanged(): Promise<void>;
    readonly notes: Notes.Any[];
    fetchAppropriateNotes: () => Promise<Notes.Any[]>;
    switchTabNew(): Promise<void>;
    switchTabOld(): Promise<void>;
    readonly isNextPageAvailable: boolean;
    readonly isPreviousPageAvailable: boolean;
    nextPage(): Promise<void>;
    previousPage(): Promise<void>;
    markAllNotesOld(): Promise<void>;
    markSpecificNoteOld(noteId: string): Promise<void>;
    markSpecificNoteNew(noteId: string): Promise<void>;
    readonly totalPages: number;
};
