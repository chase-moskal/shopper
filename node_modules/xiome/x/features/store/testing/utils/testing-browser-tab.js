import { makeStoreModel } from "../../frontend/model/model.js";
import { ops } from "../../../../framework/ops.js";
import { riggedStripePopups } from "../../popups/rigged-stripe-popups.js";
import { mockStoreRig } from "./mock-rig.js";
export const testingBrowserTab = ({ appId, remote, circuit, session, generateId, }) => async () => {
    async function login(newPrivileges, userId = generateId().string) {
        session.privileges = newPrivileges;
        session.access = {
            appId,
            origins: [],
            permit: { privileges: session.privileges },
            scope: { core: true },
            user: {
                userId,
                roles: [],
                stats: { joined: Date.now() },
                profile: {
                    nickname: "Jimmy",
                    tagline: "",
                    avatar: { type: "simple", value: 1 },
                },
            },
        };
        await store.updateAccessOp(ops.ready(session.access));
    }
    async function logout() {
        session.access = {
            appId,
            origins: [],
            permit: { privileges: [] },
            scope: { core: true },
            user: undefined,
        };
        await store.updateAccessOp(ops.ready(session.access));
    }
    const rig = mockStoreRig();
    const store = makeStoreModel({
        services: remote,
        stripePopups: riggedStripePopups({
            rig,
            mockStripeOperations: circuit.mockStripeOperations,
        }),
        async reauthorize() {
            var _a, _b;
            await login(session.privileges, (_b = (_a = session.access) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.userId);
        },
    });
    await login(session.privileges);
    await store.initialize();
    return {
        store,
        rig,
        login,
        logout,
    };
};
//# sourceMappingURL=testing-browser-tab.js.map