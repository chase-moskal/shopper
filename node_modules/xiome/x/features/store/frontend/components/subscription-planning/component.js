var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XiomeStoreSubscriptionPlanning_instances, _XiomeStoreSubscriptionPlanning_componentSnap, _XiomeStoreSubscriptionPlanning_storeModel_get, _XiomeStoreSubscriptionPlanning_planningUi;
import { html } from "lit";
import { planningUi } from "./ui/planning-ui.js";
import { ops } from "../../../../../framework/ops.js";
import { StripeConnectStatus } from "../../../isomorphic/concepts.js";
import { makePlanningComponentSnap } from "./ui/planning-component-snap.js";
import { mixinStyles, mixinRequireShare, Component } from "../../../../../framework/component.js";
import styles from "./styles.js";
let XiomeStoreSubscriptionPlanning = class XiomeStoreSubscriptionPlanning extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomeStoreSubscriptionPlanning_instances.add(this);
        _XiomeStoreSubscriptionPlanning_componentSnap.set(this, makePlanningComponentSnap());
        _XiomeStoreSubscriptionPlanning_planningUi.set(this, planningUi({
            storeModel: __classPrivateFieldGet(this, _XiomeStoreSubscriptionPlanning_instances, "a", _XiomeStoreSubscriptionPlanning_storeModel_get),
            componentSnap: __classPrivateFieldGet(this, _XiomeStoreSubscriptionPlanning_componentSnap, "f"),
            getShadowRoot: () => this.shadowRoot,
        }));
    }
    async init() {
        this.addSubscription(() => __classPrivateFieldGet(this, _XiomeStoreSubscriptionPlanning_componentSnap, "f")
            .subscribe(() => this.requestUpdate()));
        await __classPrivateFieldGet(this, _XiomeStoreSubscriptionPlanning_instances, "a", _XiomeStoreSubscriptionPlanning_storeModel_get)
            .initialize();
    }
    render() {
        const { snap, allowance } = __classPrivateFieldGet(this, _XiomeStoreSubscriptionPlanning_instances, "a", _XiomeStoreSubscriptionPlanning_storeModel_get);
        const state = snap.readable;
        const connectStatus = ops.value(state.stripeConnect.connectStatusOp);
        return html `
			${connectStatus === StripeConnectStatus.Ready
            ? allowance.manageStore
                ? __classPrivateFieldGet(this, _XiomeStoreSubscriptionPlanning_planningUi, "f").renderPlanning()
                : html `<p>your account does not have permissions to manage the store</p>`
            : html `<p>store is not active</p>`}
		`;
    }
};
_XiomeStoreSubscriptionPlanning_componentSnap = new WeakMap();
_XiomeStoreSubscriptionPlanning_planningUi = new WeakMap();
_XiomeStoreSubscriptionPlanning_instances = new WeakSet();
_XiomeStoreSubscriptionPlanning_storeModel_get = function _XiomeStoreSubscriptionPlanning_storeModel_get() { return this.share.storeModel; };
XiomeStoreSubscriptionPlanning = __decorate([
    mixinStyles(styles)
], XiomeStoreSubscriptionPlanning);
export { XiomeStoreSubscriptionPlanning };
//# sourceMappingURL=component.js.map