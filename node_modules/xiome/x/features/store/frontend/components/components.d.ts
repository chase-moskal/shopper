import { XiomeComponentOptions } from "../../../../assembly/frontend/components/types/xiome-component-options.js";
import { XiomeStoreConnect } from "./connect/component.js";
import { XiomeStoreBillingArea } from "./billing-area/component.js";
import { XiomeStoreCustomerPortal } from "./customer-portal/component.js";
import { XiomeStoreSubscriptionPlanning } from "./subscription-planning/component.js";
export declare function integrateStoreComponents({ models, modals }: XiomeComponentOptions): {
    XiomeStoreConnect: import("../../../../types/mixin.js").Mixin<typeof XiomeStoreConnect, import("../../../../framework/component.js").WithShare<{
        modals: import("../../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        storeModel: {
            updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            load: () => Promise<void>;
            initialize: () => Promise<void>;
            refresh: () => Promise<void>;
            subscriptions: {
                addPlan(options: {
                    planLabel: string;
                    tier: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionPlan>;
                addTier(options: {
                    label: string;
                    planId: string;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionTier>;
                editPlan({ planId, label, archived }: {
                    planId: string;
                    label: string;
                    archived: boolean;
                }): Promise<void>;
                editTier({ planId, tierId, label, active, pricing }: {
                    planId: string;
                    tierId: string;
                    label: string;
                    active: boolean;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<void>;
                purchase({ stripePriceId, showLoadingSpinner }: {
                    stripePriceId: string;
                    showLoadingSpinner?: boolean;
                }): Promise<void>;
                cancel(tierId: string): Promise<void>;
                uncancel(tierId: string): Promise<void>;
                load: () => Promise<void>;
            };
            billing: {
                load: () => Promise<void>;
                allowance: {
                    readonly manageStore: boolean;
                    readonly connectStripeAccount: boolean;
                    readonly giveAwayFreebies: boolean;
                };
                customerPortal: () => Promise<void>;
            };
            connect: {
                load: () => Promise<void>;
                readonly isOnboardingNeeded: boolean;
                readonly isAllowedToOnboard: boolean;
                stripeAccountOnboarding(): Promise<void>;
                stripeLogin(): Promise<void>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            snap: import("@chasemoskal/snapstate").Snapstate<{
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            }>;
            state: {
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            };
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            get: {
                is: {
                    readonly storeActive: boolean;
                    readonly userLoggedIn: boolean;
                };
                user: {
                    readonly access: import("../../../auth/types/auth-tokens.js").AccessPayload;
                };
                connect: {
                    readonly status: import("../../isomorphic/concepts.js").StripeConnectStatus;
                    readonly details: import("../../isomorphic/concepts.js").StripeConnectDetails;
                };
                subscriptions: {
                    readonly plans: import("../../isomorphic/concepts.js").SubscriptionPlan[];
                    readonly mySubscriptionDetails: import("../../isomorphic/concepts.js").SubscriptionDetails[];
                };
                billing: {
                    readonly paymentMethod: import("../../isomorphic/concepts.js").PaymentMethod;
                };
            };
        };
    }>>;
    XiomeStoreSubscriptionPlanning: import("../../../../types/mixin.js").Mixin<typeof XiomeStoreSubscriptionPlanning, import("../../../../framework/component.js").WithShare<{
        modals: import("../../../../assembly/frontend/modal/types/modal-system.js").ModalSystem;
        storeModel: {
            updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            load: () => Promise<void>;
            initialize: () => Promise<void>;
            refresh: () => Promise<void>;
            subscriptions: {
                addPlan(options: {
                    planLabel: string;
                    tier: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionPlan>;
                addTier(options: {
                    label: string;
                    planId: string;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionTier>;
                editPlan({ planId, label, archived }: {
                    planId: string;
                    label: string;
                    archived: boolean;
                }): Promise<void>;
                editTier({ planId, tierId, label, active, pricing }: {
                    planId: string;
                    tierId: string;
                    label: string;
                    active: boolean;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<void>;
                purchase({ stripePriceId, showLoadingSpinner }: {
                    stripePriceId: string;
                    showLoadingSpinner?: boolean;
                }): Promise<void>;
                cancel(tierId: string): Promise<void>;
                uncancel(tierId: string): Promise<void>;
                load: () => Promise<void>;
            };
            billing: {
                load: () => Promise<void>;
                allowance: {
                    readonly manageStore: boolean;
                    readonly connectStripeAccount: boolean;
                    readonly giveAwayFreebies: boolean;
                };
                customerPortal: () => Promise<void>;
            };
            connect: {
                load: () => Promise<void>;
                readonly isOnboardingNeeded: boolean;
                readonly isAllowedToOnboard: boolean;
                stripeAccountOnboarding(): Promise<void>;
                stripeLogin(): Promise<void>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            snap: import("@chasemoskal/snapstate").Snapstate<{
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            }>;
            state: {
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            };
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            get: {
                is: {
                    readonly storeActive: boolean;
                    readonly userLoggedIn: boolean;
                };
                user: {
                    readonly access: import("../../../auth/types/auth-tokens.js").AccessPayload;
                };
                connect: {
                    readonly status: import("../../isomorphic/concepts.js").StripeConnectStatus;
                    readonly details: import("../../isomorphic/concepts.js").StripeConnectDetails;
                };
                subscriptions: {
                    readonly plans: import("../../isomorphic/concepts.js").SubscriptionPlan[];
                    readonly mySubscriptionDetails: import("../../isomorphic/concepts.js").SubscriptionDetails[];
                };
                billing: {
                    readonly paymentMethod: import("../../isomorphic/concepts.js").PaymentMethod;
                };
            };
        };
    }>>;
    XiomeStoreSubscriptionTier: import("../../../../types/constructor.js").Constructor<import("lit-element/lit-element.js").LitElement & {
        basics: import("../views/tier/types.js").TierBasics;
        context: import("../views/tier/types.js").TierContext;
        interactivity: import("../views/tier/types.js").TierInteractivity;
    }>;
    XiomeStoreSubscriptionCatalog: import("../../../../types/constructor.js").Constructor<import("lit-element/lit-element.js").LitElement & import("./subscription-catalog/utils/catalog-props.js").CatalogProps>;
    XiomeStoreCustomerPortal: import("../../../../types/mixin.js").Mixin<typeof XiomeStoreCustomerPortal, import("../../../../framework/component.js").WithShare<{
        storeModel: {
            updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            load: () => Promise<void>;
            initialize: () => Promise<void>;
            refresh: () => Promise<void>;
            subscriptions: {
                addPlan(options: {
                    planLabel: string;
                    tier: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionPlan>;
                addTier(options: {
                    label: string;
                    planId: string;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionTier>;
                editPlan({ planId, label, archived }: {
                    planId: string;
                    label: string;
                    archived: boolean;
                }): Promise<void>;
                editTier({ planId, tierId, label, active, pricing }: {
                    planId: string;
                    tierId: string;
                    label: string;
                    active: boolean;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<void>;
                purchase({ stripePriceId, showLoadingSpinner }: {
                    stripePriceId: string;
                    showLoadingSpinner?: boolean;
                }): Promise<void>;
                cancel(tierId: string): Promise<void>;
                uncancel(tierId: string): Promise<void>;
                load: () => Promise<void>;
            };
            billing: {
                load: () => Promise<void>;
                allowance: {
                    readonly manageStore: boolean;
                    readonly connectStripeAccount: boolean;
                    readonly giveAwayFreebies: boolean;
                };
                customerPortal: () => Promise<void>;
            };
            connect: {
                load: () => Promise<void>;
                readonly isOnboardingNeeded: boolean;
                readonly isAllowedToOnboard: boolean;
                stripeAccountOnboarding(): Promise<void>;
                stripeLogin(): Promise<void>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            snap: import("@chasemoskal/snapstate").Snapstate<{
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            }>;
            state: {
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            };
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            get: {
                is: {
                    readonly storeActive: boolean;
                    readonly userLoggedIn: boolean;
                };
                user: {
                    readonly access: import("../../../auth/types/auth-tokens.js").AccessPayload;
                };
                connect: {
                    readonly status: import("../../isomorphic/concepts.js").StripeConnectStatus;
                    readonly details: import("../../isomorphic/concepts.js").StripeConnectDetails;
                };
                subscriptions: {
                    readonly plans: import("../../isomorphic/concepts.js").SubscriptionPlan[];
                    readonly mySubscriptionDetails: import("../../isomorphic/concepts.js").SubscriptionDetails[];
                };
                billing: {
                    readonly paymentMethod: import("../../isomorphic/concepts.js").PaymentMethod;
                };
            };
        };
    }>>;
    XiomeStoreSubscriptionStatus: import("../../../../types/constructor.js").Constructor<import("lit-element/lit-element.js").LitElement>;
    XiomeStoreBillingArea: import("../../../../types/mixin.js").Mixin<typeof XiomeStoreBillingArea, import("../../../../framework/component.js").WithShare<{
        storeModel: {
            updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
            load: () => Promise<void>;
            initialize: () => Promise<void>;
            refresh: () => Promise<void>;
            subscriptions: {
                addPlan(options: {
                    planLabel: string;
                    tier: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionPlan>;
                addTier(options: {
                    label: string;
                    planId: string;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<import("../../isomorphic/concepts.js").SubscriptionTier>;
                editPlan({ planId, label, archived }: {
                    planId: string;
                    label: string;
                    archived: boolean;
                }): Promise<void>;
                editTier({ planId, tierId, label, active, pricing }: {
                    planId: string;
                    tierId: string;
                    label: string;
                    active: boolean;
                    pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                }): Promise<void>;
                purchase({ stripePriceId, showLoadingSpinner }: {
                    stripePriceId: string;
                    showLoadingSpinner?: boolean;
                }): Promise<void>;
                cancel(tierId: string): Promise<void>;
                uncancel(tierId: string): Promise<void>;
                load: () => Promise<void>;
            };
            billing: {
                load: () => Promise<void>;
                allowance: {
                    readonly manageStore: boolean;
                    readonly connectStripeAccount: boolean;
                    readonly giveAwayFreebies: boolean;
                };
                customerPortal: () => Promise<void>;
            };
            connect: {
                load: () => Promise<void>;
                readonly isOnboardingNeeded: boolean;
                readonly isAllowedToOnboard: boolean;
                stripeAccountOnboarding(): Promise<void>;
                stripeLogin(): Promise<void>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            snap: import("@chasemoskal/snapstate").Snapstate<{
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            }>;
            state: {
                user: {
                    accessOp: import("../../../../framework/ops.js").Op<import("../../../auth/types/auth-tokens.js").AccessPayload>;
                };
                stripeConnect: {
                    connectStatusOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
                    connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
                };
                subscriptions: {
                    subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
                    mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
                };
                billing: {
                    paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../isomorphic/concepts.js").PaymentMethod>;
                };
            };
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            get: {
                is: {
                    readonly storeActive: boolean;
                    readonly userLoggedIn: boolean;
                };
                user: {
                    readonly access: import("../../../auth/types/auth-tokens.js").AccessPayload;
                };
                connect: {
                    readonly status: import("../../isomorphic/concepts.js").StripeConnectStatus;
                    readonly details: import("../../isomorphic/concepts.js").StripeConnectDetails;
                };
                subscriptions: {
                    readonly plans: import("../../isomorphic/concepts.js").SubscriptionPlan[];
                    readonly mySubscriptionDetails: import("../../isomorphic/concepts.js").SubscriptionDetails[];
                };
                billing: {
                    readonly paymentMethod: import("../../isomorphic/concepts.js").PaymentMethod;
                };
            };
        };
    }>>;
};
