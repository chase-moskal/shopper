var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _XiomeStoreConnect_instances, _XiomeStoreConnect_storeModel_get;
import { html } from "lit";
import { ops } from "../../../../../framework/ops.js";
import { StripeConnectStatus } from "../../../isomorphic/concepts.js";
import { renderOp } from "../../../../../framework/op-rendering/render-op.js";
import { mixinRequireShare, Component } from "../../../../../framework/component.js";
export class XiomeStoreConnect extends mixinRequireShare()(Component) {
    constructor() {
        super(...arguments);
        _XiomeStoreConnect_instances.add(this);
    }
    async init() {
        await __classPrivateFieldGet(this, _XiomeStoreConnect_instances, "a", _XiomeStoreConnect_storeModel_get).initialize();
    }
    renderStripeConnectControls() {
        const state = __classPrivateFieldGet(this, _XiomeStoreConnect_instances, "a", _XiomeStoreConnect_storeModel_get).snap.readable;
        const { connectStatusOp } = state.stripeConnect;
        const { connectDetailsOp } = state.stripeConnect;
        const { isOnboardingNeeded, isAllowedToOnboard, stripeAccountOnboarding, stripeLogin, } = __classPrivateFieldGet(this, _XiomeStoreConnect_instances, "a", _XiomeStoreConnect_storeModel_get).connect;
        const showOnboardingButton = (isOnboardingNeeded
            && isAllowedToOnboard);
        return renderOp(connectStatusOp, status => {
            const details = ops.value(connectDetailsOp);
            function renderLoginAndSetupButton() {
                return html `
					<xio-button @press=${stripeLogin}>
						Login to Stripe
					</xio-button>
					${showOnboardingButton
                    ? html `
							<xio-button @press=${stripeAccountOnboarding}>
								Onboard Stripe Account
							</xio-button>
						`
                    : null}
				`;
            }
            function renderStripeAccountDetailsReadout() {
                return html `
					<p>details:</p>
					<ul>
						<li>charges enabled: ${details.charges_enabled ? "true" : "false"}</li>
						<li>details submitted: ${details.details_submitted ? "true" : "false"}</li>
						<li>payouts enabled: ${details.payouts_enabled ? "true" : "false"}</li>
						<li>email: ${details.email}</li>
						<li>paused: ${details.paused}</li>
						<li>stripe account id: ${details.stripeAccountId}</li>
						<li>time linked: ${details.timeLinked}</li>
					</ul>
				`;
            }
            switch (status) {
                case StripeConnectStatus.Unlinked: return html `
					<p>status: unlinked</p>
					<xio-button @press=${stripeAccountOnboarding}>
						Onboard Stripe Account
					</xio-button>
				`;
                case StripeConnectStatus.Incomplete: return html `
					<p>status: incomplete</p>
					${renderStripeAccountDetailsReadout()}
					${renderLoginAndSetupButton()}
				`;
                case StripeConnectStatus.Paused: return html `
					<p>status: paused</p>
					${renderStripeAccountDetailsReadout()}
					${renderLoginAndSetupButton()}
				`;
                case StripeConnectStatus.Ready: {
                    return details
                        ? html `
							<p>status: ready</p>
							${renderStripeAccountDetailsReadout()}
							${renderLoginAndSetupButton()}
						`
                        : html `
							<p>status: loading</p>
						`;
                }
            }
        });
    }
    render() {
        const { allowance } = __classPrivateFieldGet(this, _XiomeStoreConnect_instances, "a", _XiomeStoreConnect_storeModel_get);
        return html `
			<h3>Connect Stripe Account</h3>
			${allowance.connectStripeAccount
            ? this.renderStripeConnectControls()
            : html `<p>your account is not allowed to control the linked stripe account</p>`}
		`;
    }
}
_XiomeStoreConnect_instances = new WeakSet(), _XiomeStoreConnect_storeModel_get = function _XiomeStoreConnect_storeModel_get() {
    return this.share.storeModel;
};
//# sourceMappingURL=component.js.map