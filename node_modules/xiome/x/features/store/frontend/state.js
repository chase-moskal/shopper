import { snapstate } from "@chasemoskal/snapstate";
import { ops } from "../../../framework/ops.js";
import { storePrivileges } from "../isomorphic/privileges.js";
import { StripeConnectStatus } from "../isomorphic/concepts.js";
export function makeStoreStateSystem() {
    const snap = snapstate({
        user: {
            accessOp: ops.none(),
        },
        stripeConnect: {
            connectStatusOp: ops.none(),
            connectDetailsOp: ops.none(),
        },
        subscriptions: {
            subscriptionPlansOp: ops.none(),
            mySubscriptionDetailsOp: ops.none(),
        },
        billing: {
            paymentMethodOp: ops.none(),
        },
    });
    const state = snap.readable;
    const allowance = (() => {
        const has = (key) => {
            var _a, _b;
            const privileges = (_b = (_a = ops.value(state.user.accessOp)) === null || _a === void 0 ? void 0 : _a.permit.privileges) !== null && _b !== void 0 ? _b : [];
            return privileges.includes(storePrivileges[key]);
        };
        return {
            get manageStore() { return has("manage store"); },
            get connectStripeAccount() { return has("control stripe account"); },
            get giveAwayFreebies() { return has("give away freebies"); },
        };
    })();
    return {
        snap,
        state,
        allowance,
        get: {
            is: {
                get storeActive() {
                    return ops.value(snap.state.stripeConnect.connectStatusOp)
                        === StripeConnectStatus.Ready;
                },
                get userLoggedIn() {
                    var _a;
                    return !!((_a = ops.value(snap.state.user.accessOp)) === null || _a === void 0 ? void 0 : _a.user);
                },
            },
            user: {
                get access() { return ops.value(state.user.accessOp); },
            },
            connect: {
                get status() { return ops.value(state.stripeConnect.connectStatusOp); },
                get details() { return ops.value(state.stripeConnect.connectDetailsOp); },
            },
            subscriptions: {
                get plans() { return ops.value(state.subscriptions.subscriptionPlansOp); },
                get mySubscriptionDetails() { return ops.value(state.subscriptions.mySubscriptionDetailsOp); },
            },
            billing: {
                get paymentMethod() { return ops.value(state.billing.paymentMethodOp); },
            }
        },
    };
}
//# sourceMappingURL=state.js.map