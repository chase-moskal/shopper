import { makeStoreStateSystem } from "../state.js";
import { makeConnectSubmodel } from "./submodels/connect.js";
import { makeBillingSubmodel } from "./submodels/billing.js";
import { makeSubscriptionsSubmodel } from "./submodels/subscriptions.js";
import { setupLogicForInitAndLoading } from "./utils/setup-logic-for-init-and-loading.js";
export function makeStoreModel(options) {
    const stateSystem = makeStoreStateSystem();
    const submodelOptions = {
        ...options,
        stateSystem,
        reloadStore: async () => initLogic.load(),
    };
    const submodels = {
        subscriptions: makeSubscriptionsSubmodel(submodelOptions),
        billing: makeBillingSubmodel(submodelOptions),
        connect: makeConnectSubmodel(submodelOptions),
    };
    const initLogic = setupLogicForInitAndLoading({
        state: stateSystem.state,
        loadStore: async () => {
            await submodels.connect.load();
            await Promise.all([
                submodels.billing.load(),
                submodels.subscriptions.load(),
            ]);
        }
    });
    return {
        ...stateSystem,
        ...submodels,
        ...initLogic,
        async updateAccessOp(op) {
            stateSystem.snap.state.user.accessOp = op;
            await initLogic.refresh();
        },
    };
}
//# sourceMappingURL=model.js.map