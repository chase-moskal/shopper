import { StoreServices } from "../types.js";
import { Op } from "../../../../framework/ops.js";
import { StripePopups } from "../../popups/types.js";
import { AccessPayload } from "../../../auth/types/auth-tokens.js";
export type StoreModel = ReturnType<typeof makeStoreModel>;
export declare function makeStoreModel(options: {
    services: StoreServices;
    stripePopups: StripePopups;
    reauthorize: () => Promise<void>;
}): {
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
    load: () => Promise<void>;
    initialize: () => Promise<void>;
    refresh: () => Promise<void>;
    subscriptions: {
        addPlan(options: {
            planLabel: string;
            tier: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
        }): Promise<import("../../isomorphic/concepts.js").SubscriptionPlan>;
        addTier(options: {
            label: string;
            planId: string;
            pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
        }): Promise<import("../../isomorphic/concepts.js").SubscriptionTier>;
        editPlan({ planId, label, archived }: {
            planId: string;
            label: string;
            archived: boolean;
        }): Promise<void>;
        editTier({ planId, tierId, label, active, pricing }: {
            planId: string;
            tierId: string;
            label: string;
            active: boolean;
            pricing: import("../../backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
        }): Promise<void>;
        purchase({ stripePriceId, showLoadingSpinner }: {
            stripePriceId: string;
            showLoadingSpinner?: boolean;
        }): Promise<void>;
        cancel(tierId: string): Promise<void>;
        uncancel(tierId: string): Promise<void>;
        load: () => Promise<void>;
    };
    billing: {
        load: () => Promise<void>;
        allowance: {
            readonly manageStore: boolean;
            readonly connectStripeAccount: boolean;
            readonly giveAwayFreebies: boolean;
        };
        customerPortal: () => Promise<void>;
    };
    connect: {
        load: () => Promise<void>;
        readonly isOnboardingNeeded: boolean;
        readonly isAllowedToOnboard: boolean;
        stripeAccountOnboarding(): Promise<void>;
        stripeLogin(): Promise<void>;
        pause(): Promise<void>;
        resume(): Promise<void>;
    };
    snap: import("@chasemoskal/snapstate").Snapstate<{
        user: {
            accessOp: Op<AccessPayload>;
        };
        stripeConnect: {
            connectStatusOp: Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
            connectDetailsOp: Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
        };
        subscriptions: {
            subscriptionPlansOp: Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
            mySubscriptionDetailsOp: Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
        };
        billing: {
            paymentMethodOp: Op<import("../../isomorphic/concepts.js").PaymentMethod>;
        };
    }>;
    state: {
        user: {
            accessOp: Op<AccessPayload>;
        };
        stripeConnect: {
            connectStatusOp: Op<import("../../isomorphic/concepts.js").StripeConnectStatus>;
            connectDetailsOp: Op<import("../../isomorphic/concepts.js").StripeConnectDetails>;
        };
        subscriptions: {
            subscriptionPlansOp: Op<import("../../isomorphic/concepts.js").SubscriptionPlan[]>;
            mySubscriptionDetailsOp: Op<import("../../isomorphic/concepts.js").SubscriptionDetails[]>;
        };
        billing: {
            paymentMethodOp: Op<import("../../isomorphic/concepts.js").PaymentMethod>;
        };
    };
    allowance: {
        readonly manageStore: boolean;
        readonly connectStripeAccount: boolean;
        readonly giveAwayFreebies: boolean;
    };
    get: {
        is: {
            readonly storeActive: boolean;
            readonly userLoggedIn: boolean;
        };
        user: {
            readonly access: AccessPayload;
        };
        connect: {
            readonly status: import("../../isomorphic/concepts.js").StripeConnectStatus;
            readonly details: import("../../isomorphic/concepts.js").StripeConnectDetails;
        };
        subscriptions: {
            readonly plans: import("../../isomorphic/concepts.js").SubscriptionPlan[];
            readonly mySubscriptionDetails: import("../../isomorphic/concepts.js").SubscriptionDetails[];
        };
        billing: {
            readonly paymentMethod: import("../../isomorphic/concepts.js").PaymentMethod;
        };
    };
};
