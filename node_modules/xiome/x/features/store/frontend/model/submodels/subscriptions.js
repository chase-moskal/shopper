import { objectMap, unproxy } from "@chasemoskal/snapstate";
import { ops } from "../../../../../framework/ops.js";
export function makeSubscriptionsSubmodel({ services, stateSystem, stripePopups, reauthorize, }) {
    const state = stateSystem.snap.writable;
    const { get } = stateSystem;
    async function load() {
        state
            .subscriptions
            .subscriptionPlansOp = ops.none();
        state
            .subscriptions
            .mySubscriptionDetailsOp = ops.none();
        if (get.is.storeActive) {
            await ops.operation({
                setOp: op => state
                    .subscriptions
                    .subscriptionPlansOp = op,
                promise: services
                    .subscriptions
                    .listing
                    .listPlans(),
            });
            if (get.is.userLoggedIn) {
                await ops.operation({
                    setOp: op => state
                        .subscriptions
                        .mySubscriptionDetailsOp = op,
                    promise: services
                        .subscriptions
                        .shopping
                        .fetchDetailsAboutMySubscriptions(),
                });
            }
        }
    }
    const actions = {
        async purchase({ stripePriceId, showLoadingSpinner }) {
            if (showLoadingSpinner)
                state
                    .subscriptions
                    .mySubscriptionDetailsOp = ops.loading();
            const { checkoutDetails } = await services
                .subscriptions
                .shopping
                .buy(stripePriceId);
            if (checkoutDetails)
                await stripePopups.checkoutSubscription(checkoutDetails);
        },
        async cancel(tierId) {
            state
                .subscriptions
                .mySubscriptionDetailsOp = ops.loading();
            await services
                .subscriptions
                .shopping
                .cancel(tierId);
        },
        async uncancel(tierId) {
            state
                .subscriptions
                .mySubscriptionDetailsOp = ops.loading();
            await services
                .subscriptions
                .shopping
                .uncancel(tierId);
        },
    };
    const reauthorizeAndRefreshAfter = objectMap(actions, fun => async (...args) => {
        await fun(...args);
        await reauthorize();
    });
    function getPlans() {
        var _a;
        return (_a = ops.value(unproxy(state.subscriptions.subscriptionPlansOp))) !== null && _a !== void 0 ? _a : [];
    }
    return {
        load,
        ...reauthorizeAndRefreshAfter,
        async addPlan(options) {
            const newPlan = await services
                .subscriptions
                .planning
                .addPlan(options);
            const oldPlans = getPlans();
            state
                .subscriptions
                .subscriptionPlansOp = ops.replaceValue(state.subscriptions.subscriptionPlansOp, [...oldPlans, newPlan]);
            return newPlan;
        },
        async addTier(options) {
            const plans = getPlans();
            const tier = await services
                .subscriptions
                .planning
                .addTier(options);
            const plan = plans.find(plan => plan.planId === options.planId);
            plan.tiers = [...plan.tiers, tier];
            state
                .subscriptions
                .subscriptionPlansOp = ops.ready(plans);
            return tier;
        },
        async editPlan({ planId, label, archived }) {
            await services
                .subscriptions
                .planning
                .editPlan({ planId, label, archived });
            const plans = getPlans();
            const plan = plans.find(plan => plan.planId === planId);
            plan.label = label;
            plan.archived = archived;
            state
                .subscriptions
                .subscriptionPlansOp = ops.ready(plans);
        },
        async editTier({ planId, tierId, label, active, pricing }) {
            const newTier = await services
                .subscriptions
                .planning
                .editTier({
                tierId,
                active,
                label,
                pricing,
            });
            const plans = getPlans();
            const plan = plans.find(plan => plan.planId === planId);
            plan.tiers = plan.tiers.map(function swapTierInPlace(existingTier) {
                const isEditedTier = (existingTier.tierId === newTier.tierId);
                return isEditedTier
                    ? newTier
                    : existingTier;
            });
            state
                .subscriptions
                .subscriptionPlansOp = ops.ready(plans);
        },
    };
}
//# sourceMappingURL=subscriptions.js.map