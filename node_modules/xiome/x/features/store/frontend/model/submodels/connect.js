import { ops } from "../../../../../framework/ops.js";
import { StripeConnectStatus } from "../../../isomorphic/concepts.js";
import { storePrivileges } from "../../../isomorphic/privileges.js";
export function makeConnectSubmodel({ stripePopups, services, stateSystem, reloadStore, }) {
    const state = stateSystem.snap.writable;
    const { allowance } = stateSystem;
    async function load() {
        state.stripeConnect.connectStatusOp = ops.none();
        state.stripeConnect.connectDetailsOp = ops.none();
        if (allowance.connectStripeAccount) {
            await ops.operation({
                promise: services.connect.loadConnectDetails(),
                setOp: op => {
                    var _a, _b;
                    state.stripeConnect.connectStatusOp = ops.replaceValue(op, (_a = ops.value(op)) === null || _a === void 0 ? void 0 : _a.connectStatus);
                    state.stripeConnect.connectDetailsOp = ops.replaceValue(op, (_b = ops.value(op)) === null || _b === void 0 ? void 0 : _b.connectDetails);
                },
            });
        }
        else {
            await ops.operation({
                promise: services.connect.loadConnectStatus(),
                setOp: op => state.stripeConnect.connectStatusOp = op,
            });
        }
    }
    return {
        load,
        get isOnboardingNeeded() {
            var _a;
            const { get } = stateSystem;
            return get.connect.status === StripeConnectStatus.Unlinked
                || !((_a = get.connect.details) === null || _a === void 0 ? void 0 : _a.details_submitted);
        },
        get isAllowedToOnboard() {
            var _a;
            const { get } = stateSystem;
            const access = get.user.access;
            if (!(access === null || access === void 0 ? void 0 : access.user))
                return false;
            if (!access.permit.privileges.includes(storePrivileges["control stripe account"]))
                return false;
            return get.connect.status === StripeConnectStatus.Unlinked
                ? true
                : access.user.userId === ((_a = get.connect.details) === null || _a === void 0 ? void 0 : _a.userId);
        },
        async stripeAccountOnboarding() {
            var _a;
            const popupInfo = await services
                .connect
                .generatePopupForStripeAccountOnboarding();
            const result = await stripePopups
                .connect(popupInfo);
            if (((_a = result.details) === null || _a === void 0 ? void 0 : _a.status) === "return")
                await reloadStore();
        },
        async stripeLogin() {
            const connectStatus = ops.value(state.stripeConnect.connectStatusOp);
            const connectDetails = ops.value(state.stripeConnect.connectDetailsOp);
            if (connectStatus === StripeConnectStatus.Unlinked)
                throw new Error("no stripe account to generate login link for");
            if (!connectDetails)
                throw new Error("stripe connect details missing for login");
            const { stripeLoginLink, popupId } = await services.connect.generateStripeLoginLink();
            const { stripeAccountId } = connectDetails;
            await stripePopups.login({ stripeAccountId, stripeLoginLink, popupId });
            await reloadStore();
        },
        async pause() {
            await services.connect.pause();
            state.stripeConnect.connectStatusOp = ops.ready(StripeConnectStatus.Paused);
            if (allowance.manageStore)
                state.stripeConnect.connectDetailsOp = ops.ready({
                    ...ops.value(state.stripeConnect.connectDetailsOp),
                    paused: true,
                });
        },
        async resume() {
            await services.connect.resume();
            state.stripeConnect.connectStatusOp = ops.ready(StripeConnectStatus.Ready);
            if (allowance.manageStore)
                state.stripeConnect.connectDetailsOp = ops.ready({
                    ...ops.value(state.stripeConnect.connectDetailsOp),
                    paused: false,
                });
        },
    };
}
//# sourceMappingURL=connect.js.map