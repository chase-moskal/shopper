import { Op } from "../../../framework/ops.js";
import { AccessPayload } from "../../auth/types/auth-tokens.js";
import { StripeConnectStatus, StripeConnectDetails, SubscriptionPlan, SubscriptionDetails, PaymentMethod } from "../isomorphic/concepts.js";
export type StoreStateSystem = ReturnType<typeof makeStoreStateSystem>;
export type StoreSnap = StoreStateSystem["snap"];
export type StoreAllowance = StoreStateSystem["allowance"];
export type StoreState = StoreSnap["state"];
export declare function makeStoreStateSystem(): {
    snap: import("@chasemoskal/snapstate").Snapstate<{
        user: {
            accessOp: Op<AccessPayload>;
        };
        stripeConnect: {
            connectStatusOp: Op<StripeConnectStatus>;
            connectDetailsOp: Op<StripeConnectDetails>;
        };
        subscriptions: {
            subscriptionPlansOp: Op<SubscriptionPlan[]>;
            mySubscriptionDetailsOp: Op<SubscriptionDetails[]>;
        };
        billing: {
            paymentMethodOp: Op<PaymentMethod>;
        };
    }>;
    state: {
        user: {
            accessOp: Op<AccessPayload>;
        };
        stripeConnect: {
            connectStatusOp: Op<StripeConnectStatus>;
            connectDetailsOp: Op<StripeConnectDetails>;
        };
        subscriptions: {
            subscriptionPlansOp: Op<SubscriptionPlan[]>;
            mySubscriptionDetailsOp: Op<SubscriptionDetails[]>;
        };
        billing: {
            paymentMethodOp: Op<PaymentMethod>;
        };
    };
    allowance: {
        readonly manageStore: boolean;
        readonly connectStripeAccount: boolean;
        readonly giveAwayFreebies: boolean;
    };
    get: {
        is: {
            readonly storeActive: boolean;
            readonly userLoggedIn: boolean;
        };
        user: {
            readonly access: AccessPayload;
        };
        connect: {
            readonly status: StripeConnectStatus;
            readonly details: StripeConnectDetails;
        };
        subscriptions: {
            readonly plans: SubscriptionPlan[];
            readonly mySubscriptionDetails: SubscriptionDetails[];
        };
        billing: {
            readonly paymentMethod: PaymentMethod;
        };
    };
};
