import Stripe from "stripe";
import * as dbmage from "dbmage";
import { StripeLiaison } from "../../liaison/types.js";
import { StoreDatabase, StoreDatabaseRaw } from "../../../database/types/schema.js";
type OptionsForDetails = {
    event: Stripe.Event;
    stripeLiaison: StripeLiaison;
    storeDatabaseRaw: StoreDatabaseRaw;
};
export declare function getInvoiceDetails({ event, stripeLiaison, storeDatabaseRaw }: OptionsForDetails): Promise<{
    appId: dbmage.Id;
    userId: dbmage.Id;
    invoice: Stripe.Invoice;
    storeDatabase: StoreDatabase;
    stripeCustomerId: string;
    stripeLiaisonAccount: {
        billingPortal: {
            create(params: Stripe.BillingPortal.SessionCreateParams): Promise<Stripe.Response<Stripe.BillingPortal.Session>>;
        };
        customers: {
            create(params: Stripe.CustomerCreateParams): Promise<Stripe.Response<Stripe.Customer>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Customer | Stripe.DeletedCustomer>>;
            update(id: string, params: Stripe.CustomerUpdateParams): Promise<Stripe.Response<Stripe.Customer>>;
            listPaymentMethods(customer: string, params: Stripe.CustomerListPaymentMethodsParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.PaymentMethod>>>;
        };
        products: {
            create(params: Stripe.ProductCreateParams): Promise<Stripe.Response<Stripe.Product>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Product>>;
            update(id: string, params: Stripe.ProductUpdateParams): Promise<Stripe.Response<Stripe.Product>>;
        };
        prices: {
            list(params: Stripe.PriceListParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.Price>>>;
            create(params: Stripe.PriceCreateParams): Promise<Stripe.Response<Stripe.Price>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Price>>;
            update(id: string, params: Stripe.PriceUpdateParams): Promise<Stripe.Response<Stripe.Price>>;
        };
        paymentMethods: {
            create(params: Stripe.PaymentMethodCreateParams): Promise<Stripe.Response<Stripe.PaymentMethod>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.PaymentMethod>>;
            detach(id: string): Promise<Stripe.Response<Stripe.PaymentMethod>>;
        };
        setupIntents: {
            retrieve(id: string): Promise<Stripe.Response<Stripe.SetupIntent>>;
            create(params: Stripe.SetupIntentCreateParams): Promise<Stripe.Response<Stripe.SetupIntent>>;
        };
        paymentIntents: {
            retrieve(id: string): Promise<Stripe.Response<Stripe.PaymentIntent>>;
            create(params: Stripe.PaymentIntentCreateParams): Promise<Stripe.Response<Stripe.PaymentIntent>>;
        };
        subscriptions: {
            list(params: Stripe.SubscriptionListParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.Subscription>>>;
            create(params: Stripe.SubscriptionCreateParams): Promise<Stripe.Response<Stripe.Subscription>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Subscription>>;
            update(id: string, params: Stripe.SubscriptionUpdateParams): Promise<Stripe.Response<Stripe.Subscription>>;
        };
        subscriptionItems: {
            del(id: string, params: Stripe.SubscriptionItemDeleteParams): Promise<Stripe.Response<Stripe.DeletedSubscriptionItem>>;
        };
        checkout: {
            sessions: {
                create(params: Stripe.Checkout.SessionCreateParams): Promise<Stripe.Response<Stripe.Checkout.Session>>;
            };
        };
    };
}>;
export declare function getSubscriptionDetails({ event, stripeLiaison, storeDatabaseRaw }: OptionsForDetails): Promise<{
    appId: dbmage.Id;
    userId: dbmage.Id;
    subscription: Stripe.Subscription;
    storeDatabase: StoreDatabase;
    stripeCustomerId: string;
    stripeLiaisonAccount: {
        billingPortal: {
            create(params: Stripe.BillingPortal.SessionCreateParams): Promise<Stripe.Response<Stripe.BillingPortal.Session>>;
        };
        customers: {
            create(params: Stripe.CustomerCreateParams): Promise<Stripe.Response<Stripe.Customer>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Customer | Stripe.DeletedCustomer>>;
            update(id: string, params: Stripe.CustomerUpdateParams): Promise<Stripe.Response<Stripe.Customer>>;
            listPaymentMethods(customer: string, params: Stripe.CustomerListPaymentMethodsParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.PaymentMethod>>>;
        };
        products: {
            create(params: Stripe.ProductCreateParams): Promise<Stripe.Response<Stripe.Product>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Product>>;
            update(id: string, params: Stripe.ProductUpdateParams): Promise<Stripe.Response<Stripe.Product>>;
        };
        prices: {
            list(params: Stripe.PriceListParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.Price>>>;
            create(params: Stripe.PriceCreateParams): Promise<Stripe.Response<Stripe.Price>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Price>>;
            update(id: string, params: Stripe.PriceUpdateParams): Promise<Stripe.Response<Stripe.Price>>;
        };
        paymentMethods: {
            create(params: Stripe.PaymentMethodCreateParams): Promise<Stripe.Response<Stripe.PaymentMethod>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.PaymentMethod>>;
            detach(id: string): Promise<Stripe.Response<Stripe.PaymentMethod>>;
        };
        setupIntents: {
            retrieve(id: string): Promise<Stripe.Response<Stripe.SetupIntent>>;
            create(params: Stripe.SetupIntentCreateParams): Promise<Stripe.Response<Stripe.SetupIntent>>;
        };
        paymentIntents: {
            retrieve(id: string): Promise<Stripe.Response<Stripe.PaymentIntent>>;
            create(params: Stripe.PaymentIntentCreateParams): Promise<Stripe.Response<Stripe.PaymentIntent>>;
        };
        subscriptions: {
            list(params: Stripe.SubscriptionListParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.Subscription>>>;
            create(params: Stripe.SubscriptionCreateParams): Promise<Stripe.Response<Stripe.Subscription>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Subscription>>;
            update(id: string, params: Stripe.SubscriptionUpdateParams): Promise<Stripe.Response<Stripe.Subscription>>;
        };
        subscriptionItems: {
            del(id: string, params: Stripe.SubscriptionItemDeleteParams): Promise<Stripe.Response<Stripe.DeletedSubscriptionItem>>;
        };
        checkout: {
            sessions: {
                create(params: Stripe.Checkout.SessionCreateParams): Promise<Stripe.Response<Stripe.Checkout.Session>>;
            };
        };
    };
}>;
export declare function getReferencedClient(session: Stripe.Checkout.Session): {
    appId: dbmage.Id;
    userId: dbmage.Id;
};
export declare function getDatabaseForApp(storeDatabaseRaw: StoreDatabaseRaw, appId: dbmage.Id): StoreDatabase;
export declare function getConnectAccountDetails({ stripeAccountId, storeDatabaseRaw, }: {
    stripeAccountId: string;
    storeDatabaseRaw: StoreDatabaseRaw;
}): Promise<{
    connectAccount: dbmage.UnconstrainRow<{
        "namespace-appId": dbmage.Id;
    }, {
        connectId: dbmage.Id;
        stripeAccountId: string;
        charges_enabled: boolean;
        payouts_enabled: boolean;
        details_submitted: boolean;
        email: string;
        paused: boolean;
        time: number;
        userId: dbmage.Id;
    }>;
    appId: dbmage.Id;
    storeDatabase: StoreDatabase;
}>;
export declare function getStripeCustomerDetails(storeDatabaseRaw: StoreDatabaseRaw, stripeCustomerId: string): Promise<{
    appId: dbmage.Id;
    userId: dbmage.Id;
    storeDatabase: StoreDatabase;
}>;
export declare function getPriceIdsFromSubscription(subscription: Stripe.Subscription): string[];
export declare function getPriceIdsFromInvoice(invoice: Stripe.Invoice): string[];
export {};
