import * as dbmage from "dbmage";
import { objectMap } from "@chasemoskal/snapstate";
import { fulfillSubscriptionRoles } from "../fulfillment/fulfillment.js";
import { timerangeFromStripePeriod } from "../utils/seconds-to-millisecond-timerange.js";
import { getPriceIdsFromInvoice, getInvoiceDetails, getSubscriptionDetails, getPriceIdsFromSubscription, getConnectAccountDetails } from "./helpers/webhook-helpers.js";
export function stripeWebhooks(options) {
    const { logger, prepareRoleManager } = options;
    const webhooks = {
        async "account.updated"(event) {
            const account = event.data.object;
            const stripeAccountId = account.id;
            const known = await getConnectAccountDetails({
                ...options,
                stripeAccountId,
            });
            if (known) {
                const { storeDatabase, connectAccount: { connectId } } = known;
                await storeDatabase
                    .tables
                    .connect
                    .accounts
                    .update({
                    ...dbmage.find({ connectId }),
                    write: {
                        email: account.email,
                        charges_enabled: account.charges_enabled,
                        payouts_enabled: account.payouts_enabled,
                        details_submitted: account.details_submitted,
                    },
                });
            }
        },
        async "customer.subscription.updated"(event) {
            const { appId, subscription, userId, storeDatabase, stripeLiaisonAccount, } = await getSubscriptionDetails({ ...options, event });
            const roleManager = prepareRoleManager(appId);
            const priceIds = getPriceIdsFromSubscription(subscription);
            await fulfillSubscriptionRoles({
                userId,
                priceIds,
                storeDatabase,
                stripeLiaisonAccount,
                roleManager,
                timerange: timerangeFromStripePeriod({
                    start: subscription.current_period_start,
                    end: subscription.current_period_end,
                }),
            });
        },
        async "invoice.paid"(event) {
            const { invoice, appId, userId, storeDatabase, stripeLiaisonAccount } = await getInvoiceDetails({ ...options, event });
            const invoiceIsForSubscription = !!invoice.subscription;
            const roleManager = prepareRoleManager(appId);
            if (invoiceIsForSubscription)
                await fulfillSubscriptionRoles({
                    userId,
                    storeDatabase,
                    stripeLiaisonAccount,
                    roleManager,
                    priceIds: getPriceIdsFromInvoice(invoice),
                    timerange: timerangeFromStripePeriod(invoice.lines.data[0].period),
                });
            else
                logger.error(`unknown 'invoice.paid' hook (not for a subscription)`);
        },
    };
    const webhooksWithLogging = objectMap(webhooks, (webhookFunction, functionName) => (async (event) => {
        logger.info(`stripe-webhook ${functionName}:`, event.data.object);
        return webhookFunction(event);
    }));
    return webhooksWithLogging;
}
//# sourceMappingURL=stripe-webhooks.js.map