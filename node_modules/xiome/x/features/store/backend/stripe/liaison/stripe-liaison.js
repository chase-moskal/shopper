import { stripeAttempt } from "./helpers/stripe-attempt.js";
export function makeStripeLiaison({ stripe }) {
    return {
        accounts: stripeAttempt({
            async create(params) {
                return stripe.accounts.create(params);
            },
            async retrieve(id) {
                return stripe.accounts.retrieve(id);
            },
            async createLoginLink(id) {
                return stripe.accounts.createLoginLink(id);
            },
        }),
        accountLinks: stripeAttempt({
            async create(params) {
                return stripe.accountLinks.create(params);
            },
        }),
        account(stripeAccount) {
            const connection = { stripeAccount };
            return {
                billingPortal: stripeAttempt({
                    async create(params) {
                        return stripe.billingPortal.sessions.create(params, connection);
                    }
                }),
                customers: stripeAttempt({
                    async create(params) {
                        return stripe.customers.create(params, connection);
                        // for testing timelines with stripe test clocks
                        // return stripe.customers.create({...params, test_clock: "clock_1LmnQM2ePX2ph7RQrmN5ZCC9"}, connection)
                    },
                    async retrieve(id) {
                        return stripe.customers.retrieve(id, connection);
                    },
                    async update(id, params) {
                        return stripe.customers.update(id, params, connection);
                    },
                    async listPaymentMethods(customer, params) {
                        return stripe.customers.listPaymentMethods(customer, params, connection);
                    },
                }),
                products: stripeAttempt({
                    async create(params) {
                        return stripe.products.create(params, connection);
                    },
                    async retrieve(id) {
                        return stripe.products.retrieve(id, connection);
                    },
                    async update(id, params) {
                        return stripe.products.update(id, params, connection);
                    },
                }),
                prices: stripeAttempt({
                    async list(params) {
                        return stripe.prices.list(params, connection);
                    },
                    async create(params) {
                        return stripe.prices.create(params, connection);
                    },
                    async retrieve(id) {
                        return stripe.prices.retrieve(id, connection);
                    },
                    async update(id, params) {
                        return stripe.prices.update(id, params, connection);
                    },
                }),
                paymentMethods: stripeAttempt({
                    async create(params) {
                        return stripe.paymentMethods.create(params, connection);
                    },
                    async retrieve(id) {
                        return stripe.paymentMethods.retrieve(id, connection);
                    },
                    async detach(id) {
                        return stripe.paymentMethods.detach(id, undefined, connection);
                    },
                }),
                setupIntents: stripeAttempt({
                    async retrieve(id) {
                        return stripe.setupIntents.retrieve(id, connection);
                    },
                    async create(params) {
                        return stripe.setupIntents.create(params, connection);
                    },
                }),
                paymentIntents: stripeAttempt({
                    async retrieve(id) {
                        return stripe.paymentIntents.retrieve(id, connection);
                    },
                    async create(params) {
                        return stripe.paymentIntents.create(params, connection);
                    },
                }),
                subscriptions: stripeAttempt({
                    async list(params) {
                        return stripe.subscriptions.list(params, connection);
                    },
                    async create(params) {
                        return stripe.subscriptions.create(params, connection);
                    },
                    async retrieve(id) {
                        return stripe.subscriptions.retrieve(id, connection);
                    },
                    async update(id, params) {
                        return stripe.subscriptions.update(id, params, connection);
                    },
                }),
                subscriptionItems: stripeAttempt({
                    async del(id, params) {
                        return stripe.subscriptionItems.del(id, params, connection);
                    },
                }),
                checkout: {
                    sessions: stripeAttempt({
                        async create(params) {
                            return stripe.checkout.sessions.create(params, connection);
                        },
                    }),
                },
            };
        }
    };
}
//# sourceMappingURL=stripe-liaison.js.map