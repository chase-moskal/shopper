import { find } from "dbmage";
import { stripeResponse } from "./stripe-response.js";
export function prepareStandardRestResource({ generateId }) {
    return function makeStandardRestResource() {
        const throwAnError = () => {
            throw new Error("not implemented");
        };
        return function ({ table, handleCreate = throwAnError, handleUpdate = throwAnError, }) {
            return {
                async create(params) {
                    const { resource, afterResourceIsAddedToTable } = await handleCreate(params);
                    const finalResource = {
                        id: generateId(),
                        ...resource,
                    };
                    await table.create(finalResource);
                    if (afterResourceIsAddedToTable)
                        await afterResourceIsAddedToTable();
                    return stripeResponse(finalResource);
                },
                async update(id, params) {
                    await table.update({
                        ...find({ id }),
                        write: ignoreUndefined(await handleUpdate(id, params)),
                    });
                    const resource = await table.readOne(find({ id }));
                    return stripeResponse(resource);
                },
                async retrieve(id) {
                    const resource = await table.readOne(find({ id }));
                    return stripeResponse(resource);
                },
                async del(id) {
                    await table.delete(find({ id }));
                    return stripeResponse({});
                },
            };
        };
    };
}
function ignoreUndefined(input) {
    const output = {};
    for (const [key, value] of Object.entries(input)) {
        if (value !== undefined)
            output[key] = value;
    }
    return output;
}
//# sourceMappingURL=standard-rest-resource.js.map