import Stripe from "stripe";
import { StoreDatabaseRaw } from "../database/types/schema.js";
import { Logger } from "../../../../toolbox/logger/interfaces.js";
import { ConfigStripe } from "../../../../assembly/backend/types/config-stripe.js";
import { PrepareRoleManager } from "../../../auth/aspects/permissions/interactions/types.js";
export declare function realStripeCircuit({ logger, storeDatabaseRaw, stripeConfig, prepareRoleManager, }: {
    logger: Logger;
    stripeConfig: ConfigStripe;
    storeDatabaseRaw: StoreDatabaseRaw;
    prepareRoleManager: PrepareRoleManager;
}): {
    stripe: Stripe;
    stripeLiaison: {
        accounts: {
            create(params: Stripe.AccountCreateParams): Promise<Stripe.Response<Stripe.Account>>;
            retrieve(id: string): Promise<Stripe.Response<Stripe.Account>>;
            createLoginLink(id: string): Promise<Stripe.Response<Stripe.LoginLink>>;
        };
        accountLinks: {
            create(params: Stripe.AccountLinkCreateParams): Promise<Stripe.Response<Stripe.AccountLink>>;
        };
        account(stripeAccount: string): {
            billingPortal: {
                create(params: Stripe.BillingPortal.SessionCreateParams): Promise<Stripe.Response<Stripe.BillingPortal.Session>>;
            };
            customers: {
                create(params: Stripe.CustomerCreateParams): Promise<Stripe.Response<Stripe.Customer>>;
                retrieve(id: string): Promise<Stripe.Response<Stripe.Customer | Stripe.DeletedCustomer>>;
                update(id: string, params: Stripe.CustomerUpdateParams): Promise<Stripe.Response<Stripe.Customer>>;
                listPaymentMethods(customer: string, params: Stripe.CustomerListPaymentMethodsParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.PaymentMethod>>>;
            };
            products: {
                create(params: Stripe.ProductCreateParams): Promise<Stripe.Response<Stripe.Product>>;
                retrieve(id: string): Promise<Stripe.Response<Stripe.Product>>;
                update(id: string, params: Stripe.ProductUpdateParams): Promise<Stripe.Response<Stripe.Product>>;
            };
            prices: {
                list(params: Stripe.PriceListParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.Price>>>;
                create(params: Stripe.PriceCreateParams): Promise<Stripe.Response<Stripe.Price>>;
                retrieve(id: string): Promise<Stripe.Response<Stripe.Price>>;
                update(id: string, params: Stripe.PriceUpdateParams): Promise<Stripe.Response<Stripe.Price>>;
            };
            paymentMethods: {
                create(params: Stripe.PaymentMethodCreateParams): Promise<Stripe.Response<Stripe.PaymentMethod>>;
                retrieve(id: string): Promise<Stripe.Response<Stripe.PaymentMethod>>;
                detach(id: string): Promise<Stripe.Response<Stripe.PaymentMethod>>;
            };
            setupIntents: {
                retrieve(id: string): Promise<Stripe.Response<Stripe.SetupIntent>>;
                create(params: Stripe.SetupIntentCreateParams): Promise<Stripe.Response<Stripe.SetupIntent>>;
            };
            paymentIntents: {
                retrieve(id: string): Promise<Stripe.Response<Stripe.PaymentIntent>>;
                create(params: Stripe.PaymentIntentCreateParams): Promise<Stripe.Response<Stripe.PaymentIntent>>;
            };
            subscriptions: {
                list(params: Stripe.SubscriptionListParams): Promise<Stripe.Response<Stripe.ApiList<Stripe.Subscription>>>;
                create(params: Stripe.SubscriptionCreateParams): Promise<Stripe.Response<Stripe.Subscription>>;
                retrieve(id: string): Promise<Stripe.Response<Stripe.Subscription>>;
                update(id: string, params: Stripe.SubscriptionUpdateParams): Promise<Stripe.Response<Stripe.Subscription>>;
            };
            subscriptionItems: {
                del(id: string, params: Stripe.SubscriptionItemDeleteParams): Promise<Stripe.Response<Stripe.DeletedSubscriptionItem>>;
            };
            checkout: {
                sessions: {
                    create(params: Stripe.Checkout.SessionCreateParams): Promise<Stripe.Response<Stripe.Checkout.Session>>;
                };
            };
        };
    };
    stripeWebhooks: {
        "account.updated": (event: Stripe.Event) => Promise<any>;
        "customer.subscription.updated": (event: Stripe.Event) => Promise<any>;
        "invoice.paid": (event: Stripe.Event) => Promise<any>;
    };
    mockStripeOperations: {
        linkStripeAccount(stripeAccountId: string): Promise<void>;
        linkStripeAccountThatIsIncomplete(stripeAccountId: string): Promise<void>;
        checkoutSubscriptionTier(stripeAccountId: string, stripeSessionId: string): Promise<void>;
        createNewDefaultPaymentMethod({ stripeAccountId, customer, isFailing, }: {
            stripeAccountId: string;
            customer: string;
            isFailing: boolean;
        }): Promise<Stripe.Response<Stripe.PaymentMethod>>;
        removeAllPaymentMethods(customer: string): Promise<void>;
        wipeAll: {
            customers(): Promise<void>;
            products(): Promise<void>;
        };
    };
};
