import { openPopupAndWaitForResult } from "./popup-core/open-popup-and-wait-for-result.js";
export function mockStripePopups({ mockStripeOperations }) {
    return {
        async connect({ popupId, stripeAccountId, stripeAccountSetupLink }) {
            return openPopupAndWaitForResult({
                popupId,
                url: stripeAccountSetupLink,
                handleSecretMockCommand: mockStripeOperations
                    ? async (command) => {
                        if (command.type === "complete")
                            await mockStripeOperations.linkStripeAccount(stripeAccountId);
                        else if (command.type === "incomplete")
                            await mockStripeOperations.linkStripeAccountThatIsIncomplete(stripeAccountId);
                    }
                    : async () => { },
            });
        },
        async login({ popupId, stripeAccountId, stripeLoginLink }) {
            return openPopupAndWaitForResult({
                popupId,
                url: stripeLoginLink,
                handleSecretMockCommand: mockStripeOperations
                    ? async (command) => {
                        if (command.type === "complete")
                            await mockStripeOperations.linkStripeAccount(stripeAccountId);
                        else if (command.type === "incomplete")
                            await mockStripeOperations.linkStripeAccountThatIsIncomplete(stripeAccountId);
                    }
                    : async () => { },
            });
        },
        async checkoutSubscription({ popupId, stripeSessionUrl, stripeSessionId, stripeAccountId }) {
            return openPopupAndWaitForResult({
                popupId,
                url: stripeSessionUrl,
                handleSecretMockCommand: mockStripeOperations
                    ? async (command) => {
                        if (command.type === "success")
                            await mockStripeOperations.checkoutSubscriptionTier(stripeAccountId, stripeSessionId);
                    }
                    : async () => { },
            });
        },
        async openStoreCustomerPortal({ popupId, customer, stripeAccountId, stripeSessionUrl }) {
            return openPopupAndWaitForResult({
                popupId,
                url: stripeSessionUrl,
                handleSecretMockCommand: mockStripeOperations
                    ? async (command) => {
                        if (command.type === "success") {
                            const isFailing = false;
                            await mockStripeOperations.createNewDefaultPaymentMethod({
                                customer, isFailing, stripeAccountId
                            });
                        }
                        else if (command.type === "failure") {
                            const isFailing = true;
                            await mockStripeOperations.createNewDefaultPaymentMethod({
                                customer, isFailing, stripeAccountId
                            });
                        }
                        else if (command.type === "detach") {
                            await mockStripeOperations.removeAllPaymentMethods(customer);
                        }
                    }
                    : async () => { },
            });
        },
    };
}
//# sourceMappingURL=mock-stripe-popups.js.map