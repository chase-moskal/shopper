export function makeSecretMockCommandSystem() {
    let commandId = 0;
    const waitingForResponses = new Map();
    window.addEventListener("message", event => {
        var _a;
        const isFromParent = event.source === window.opener;
        const isSecretMockCommand = event.data.secretMockCommand === true;
        if (isFromParent && isSecretMockCommand) {
            const resolve = (_a = waitingForResponses.get(event.data.commandId)) !== null && _a !== void 0 ? _a : (() => { });
            resolve();
        }
    });
    return {
        async postCommand(type) {
            const currentCommandId = commandId++;
            window.opener.postMessage({
                type,
                commandId: currentCommandId,
                secretMockCommand: true,
            }, "*");
            return new Promise(resolve => waitingForResponses.set(currentCommandId, resolve));
        }
    };
}
//# sourceMappingURL=secret-command-system.js.map