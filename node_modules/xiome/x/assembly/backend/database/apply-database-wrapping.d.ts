import * as dbmage from "dbmage";
import { DatabaseSchema } from "../types/database.js";
export declare function applyDatabaseWrapping(database: dbmage.Database<DatabaseSchema>): dbmage.DatabaseLike<{
    apps: dbmage.SchemaToTables<{
        registrations: {
            appId: dbmage.Id;
            label: string;
            home: string;
            origins: string;
            archived: boolean;
        };
        owners: {
            appId: dbmage.Id;
            userId: dbmage.Id;
        };
    }>;
    auth: import("../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
        users: {
            accounts: {
                userId: dbmage.Id;
                created: number;
            };
            profiles: {
                userId: dbmage.Id;
                nickname: string;
                tagline: string;
                avatar: string;
            };
            emails: {
                userId: dbmage.Id;
                email: string;
            };
            latestLogins: {
                userId: dbmage.Id;
                time: number;
            };
        };
        permissions: {
            role: {
                roleId: dbmage.Id;
                label: string;
                time: number;
                hard: boolean;
                public: boolean;
                assignable: boolean;
            };
            privilege: {
                privilegeId: dbmage.Id;
                label: string;
                hard: boolean;
                time: number;
            };
            userHasRole: {
                userId: dbmage.Id;
                roleId: dbmage.Id;
                timeframeStart: number;
                timeframeEnd: number;
                public: boolean;
                hard: boolean;
                time: number;
            };
            roleHasPrivilege: {
                roleId: dbmage.Id;
                privilegeId: dbmage.Id;
                immutable: boolean;
                active: boolean;
                time: number;
            };
        };
    }>;
    notes: import("../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
        notes: import("../../../features/notes/types/notes-concepts.js").Database.NoteBase;
        questionDetails: import("../../../features/notes/types/notes-concepts.js").Database.NoteDetails.Question;
    }>;
    store: import("../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<import("../../../features/store/backend/database/types/schema.js").StoreSchemaUnconnected>;
    videos: import("../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
        dacastAccountLinks: import("../../../features/videos/types/dacast-link.js").DacastLinkRow;
        viewPrivileges: {
            label: string;
            privilegeId: dbmage.Id;
        };
        viewDacast: {
            label: string;
            dacastId: string;
            type: import("../../../features/videos/dacast/types/dacast-data.js").DacastData.ContentType;
        };
    }>;
    example: import("../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
        examplePosts: {
            exampleId: dbmage.Id;
            something: string;
        };
    }>;
    questions: import("../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
        questionPosts: {
            questionId: dbmage.Id;
            authorUserId: dbmage.Id;
            board: string;
            content: string;
            archive: boolean;
            timePosted: number;
        };
        answerPosts: import("../../../features/questions/api/types/questions-schema.js").AnswerPostRow;
        likes: {
            userId: dbmage.Id;
            itemId: dbmage.Id;
        };
        reports: {
            userId: dbmage.Id;
            itemId: dbmage.Id;
        };
    }>;
}>;
