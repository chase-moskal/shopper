import { Await } from "../../../types/await.js";
export type ZipSpec = [string[], any][];
export declare function unzip(object: {}): ZipSpec;
export declare function waitSpec(spec: ZipSpec): Promise<ZipSpec>;
export declare function applyProperty(object: {}, path: string[], value: any): void;
export declare function zip<X extends {}>(spec: ZipSpec): X;
export type PromiseStructure = {
    [key: string]: PromiseStructure | Promise<any> | any;
};
export type WaitForProperties<X extends PromiseStructure> = {
    [P in keyof X]: X[P] extends PromiseLike<any> ? Await<X[P]> : X[P] extends PromiseStructure ? WaitForProperties<X[P]> : never;
};
export declare function waitForProperties<X extends PromiseStructure>(input: X): Promise<WaitForProperties<X>>;
