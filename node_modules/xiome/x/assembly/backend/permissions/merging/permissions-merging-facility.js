import { Id } from "dbmage";
import { appPermissions, platformPermissions } from "../standard-permissions.js";
export function permissionsMergingFacility({ isPlatform }) {
    const hardPermissions = isPlatform
        ? platformPermissions
        : appPermissions;
    function getHardPrivilegeDetails(...roleIds) {
        const results = [];
        for (const roleId of roleIds) {
            const found = Object.entries(hardPermissions.roles)
                .find(([, role2]) => role2.roleId === roleId);
            if (found) {
                const [, role] = found;
                for (const [label, has] of Object.entries(role.hasPrivileges)) {
                    const privilegeId = hardPermissions.privileges[label];
                    const already = results.find(detail => detail.roleId === roleId &&
                        detail.privilegeId === privilegeId);
                    if (!already) {
                        results.push({
                            privilegeId,
                            roleId,
                            active: has.active,
                            immutable: has.immutable,
                        });
                    }
                }
            }
        }
        return results;
    }
    function mergeRoleHasPrivileges({ hard, soft }) {
        const results = [];
        function rowMatch(hardy, softy) {
            return hardy.roleId === softy.roleId.toString()
                && hardy.privilegeId === softy.privilegeId.toString();
        }
        function toSofty(hardy) {
            return {
                roleId: Id.fromString(hardy.roleId),
                privilegeId: Id.fromString(hardy.privilegeId),
                active: hardy.active,
                immutable: hardy.immutable,
                time: 0,
            };
        }
        for (const softy of soft) {
            const hardy = hard.find(h => rowMatch(h, softy));
            results.push(hardy && hardy.immutable
                ? toSofty(hardy)
                : softy);
        }
        for (const hardy of hard) {
            const alreadyIncluded = !!results.find(softy => rowMatch(hardy, softy));
            if (!alreadyIncluded)
                results.push(toSofty(hardy));
        }
        return results;
    }
    function getActivePrivilegeIds(roleHasPrivileges) {
        return roleHasPrivileges
            .filter(row => row.active)
            .map(row => row.privilegeId);
    }
    return {
        hardPermissions,
        mergeRoleHasPrivileges,
        getActivePrivilegeIds,
        getHardPrivilegeDetails,
    };
}
//# sourceMappingURL=permissions-merging-facility.js.map