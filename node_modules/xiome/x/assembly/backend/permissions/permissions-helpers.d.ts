type HasPrivilege = {
    active: boolean;
    immutable: boolean;
};
type Role<xPrivileges extends Privileges> = {
    roleId: string;
    public: boolean;
    assignable: boolean;
    hasPrivileges: Partial<{
        [P in keyof xPrivileges]: HasPrivilege;
    }>;
};
export type Privileges = {
    [key: string]: string;
};
export type Roles<xPrivileges extends Privileges> = {
    [key: string]: Role<xPrivileges>;
};
export type Permissions<xPrivileges extends Privileges, xRoles extends Roles<xPrivileges>> = {
    privileges: xPrivileges;
    roles: xRoles;
};
export type AnyPermissions = Permissions<Privileges, Roles<Privileges>>;
export declare function asPermissions<xPrivileges extends Privileges, xRoles extends Roles<xPrivileges>>(permissions: Permissions<xPrivileges, xRoles>): Permissions<xPrivileges, xRoles>;
export declare function has<xPrivileges extends Privileges>(privileges: xPrivileges, hasPrivilege: HasPrivilege): { [P in keyof xPrivileges]: HasPrivilege; };
export declare function mutable<xPrivileges extends Privileges>(active: boolean, privileges: xPrivileges): { [P in keyof xPrivileges]: HasPrivilege; };
export declare function immutable<xPrivileges extends Privileges>(active: boolean, privileges: xPrivileges): { [P in keyof xPrivileges]: HasPrivilege; };
export {};
