import { getRando } from "dbmage";
import { mockBrowser } from "../frontend/mocks/mock-browser.js";
import { assimilateApi } from "./assimilators/assimilate-api.js";
import { assimilateEmails } from "./assimilators/assimilate-emails.js";
import { assimilateCrypto } from "./assimilators/assimilate-crypto.js";
import { assimilateStripe } from "./assimilators/assimilate-stripe.js";
import { assimilateDacast } from "./assimilators/assimilate-dacast.js";
import { assimilateDatabase } from "./assimilators/assimilate-database.js";
import { UnconstrainedTable } from "../../framework/api/unconstrained-table.js";
import { makeNotesDepositBox } from "../../features/notes/api/notes-deposit-box.js";
import { mockStripePopups } from "../../features/store/popups/mock-stripe-popups.js";
export function prepareBackend(configurators) {
    return async function configureApi(config) {
        const rando = await getRando();
        const options = { ...configurators, config, rando };
        const emails = assimilateEmails(options);
        const { databaseRaw, mockStorage } = await assimilateDatabase(options);
        const { signToken, verifyToken } = assimilateCrypto(options);
        const { stripeLiaison, mockStripeOperations } = (await assimilateStripe({
            ...options,
            databaseRaw,
            mockStorage,
        }));
        const stripePopups = mockStripePopups({ mockStripeOperations });
        const dacastSdk = assimilateDacast(options);
        const api = await assimilateApi({
            ...options,
            dacastSdk,
            databaseRaw,
            stripeLiaison,
            signToken,
            verifyToken,
            sendLoginEmail: emails.sendLoginEmail,
        });
        return {
            rando,
            api,
            config,
            emails,
            databaseRaw,
            stripeLiaison,
            stripePopups,
            platformAppId: config.platform.appDetails.appId,
            prepareNotesDepositBox: (appId) => makeNotesDepositBox({
                rando,
                database: UnconstrainedTable.constrainDatabaseForApp({
                    appId,
                    database: databaseRaw,
                }),
            }),
            mockBrowser: async ({ appOrigin }) => mockBrowser({
                api,
                appOrigin,
                mockStripeOperations,
            }),
        };
    };
}
//# sourceMappingURL=prepare-backend.js.map