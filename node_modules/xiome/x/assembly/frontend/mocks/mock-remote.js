import * as renraku from "renraku";
import { prepareApiShape } from "../auth/prepare-api-shape.js";
import { stopwatch } from "../../../toolbox/goodtimes/stopwatch.js";
export function mockRemote({ api, appId, storage, headers, logging, }) {
    const { metaMap, installAuthMediator } = prepareApiShape({
        appId,
        storage,
    });
    let mockLatency;
    function setMockLatency(value) {
        mockLatency = value;
    }
    const spike = async (method, func, ...params) => {
        const [mockTime] = await stopwatch(renraku.waitForMockLatency(mockLatency));
        const [executionTime, result] = await stopwatch(func(...params));
        if (logging)
            console.log(`ðŸ“¡ ${method}() ${executionTime}ms + mock ${mockTime}ms`);
        return result;
    };
    const remote = renraku.mock({ spike })
        .forApi(api)
        .withMetaMap(metaMap, async () => headers);
    const authMediator = installAuthMediator({
        greenService: remote.auth.users.greenService,
    });
    return { remote, authMediator, setMockLatency };
}
//# sourceMappingURL=mock-remote.js.map