/// <reference types="stripe/types/crypto/crypto.js" />
/// <reference types="stripe/types/shared.js" />
/// <reference types="stripe/types/Errors.js" />
/// <reference types="stripe/types/OAuth.js" />
/// <reference types="stripe/types/Webhooks.js" />
/// <reference types="stripe/types/UpcomingInvoices.js" />
/// <reference types="stripe/types/AccountLinksResource.js" />
/// <reference types="stripe/types/AccountsResource.js" />
/// <reference types="stripe/types/ApplePayDomainsResource.js" />
/// <reference types="stripe/types/ApplicationFeesResource.js" />
/// <reference types="stripe/types/Apps/SecretsResource.js" />
/// <reference types="stripe/types/BalanceResource.js" />
/// <reference types="stripe/types/BalanceTransactionsResource.js" />
/// <reference types="stripe/types/BillingPortal/ConfigurationsResource.js" />
/// <reference types="stripe/types/BillingPortal/SessionsResource.js" />
/// <reference types="stripe/types/ChargesResource.js" />
/// <reference types="stripe/types/Checkout/SessionsResource.js" />
/// <reference types="stripe/types/CountrySpecsResource.js" />
/// <reference types="stripe/types/CouponsResource.js" />
/// <reference types="stripe/types/CreditNotesResource.js" />
/// <reference types="stripe/types/CustomersResource.js" />
/// <reference types="stripe/types/DisputesResource.js" />
/// <reference types="stripe/types/EphemeralKeysResource.js" />
/// <reference types="stripe/types/EventsResource.js" />
/// <reference types="stripe/types/ExchangeRatesResource.js" />
/// <reference types="stripe/types/FileLinksResource.js" />
/// <reference types="stripe/types/FilesResource.js" />
/// <reference types="stripe/types/FinancialConnections/AccountsResource.js" />
/// <reference types="stripe/types/FinancialConnections/SessionsResource.js" />
/// <reference types="stripe/types/Identity/VerificationReportsResource.js" />
/// <reference types="stripe/types/Identity/VerificationSessionsResource.js" />
/// <reference types="stripe/types/InvoiceItemsResource.js" />
/// <reference types="stripe/types/InvoicesResource.js" />
/// <reference types="stripe/types/Issuing/AuthorizationsResource.js" />
/// <reference types="stripe/types/Issuing/CardholdersResource.js" />
/// <reference types="stripe/types/Issuing/CardsResource.js" />
/// <reference types="stripe/types/Issuing/DisputesResource.js" />
/// <reference types="stripe/types/Issuing/TransactionsResource.js" />
/// <reference types="stripe/types/MandatesResource.js" />
/// <reference types="stripe/types/PaymentIntentsResource.js" />
/// <reference types="stripe/types/PaymentLinksResource.js" />
/// <reference types="stripe/types/PaymentMethodsResource.js" />
/// <reference types="stripe/types/PayoutsResource.js" />
/// <reference types="stripe/types/PlansResource.js" />
/// <reference types="stripe/types/PricesResource.js" />
/// <reference types="stripe/types/ProductsResource.js" />
/// <reference types="stripe/types/PromotionCodesResource.js" />
/// <reference types="stripe/types/QuotesResource.js" />
/// <reference types="stripe/types/Radar/EarlyFraudWarningsResource.js" />
/// <reference types="stripe/types/Radar/ValueListItemsResource.js" />
/// <reference types="stripe/types/Radar/ValueListsResource.js" />
/// <reference types="stripe/types/RefundsResource.js" />
/// <reference types="stripe/types/Reporting/ReportRunsResource.js" />
/// <reference types="stripe/types/Reporting/ReportTypesResource.js" />
/// <reference types="stripe/types/ReviewsResource.js" />
/// <reference types="stripe/types/SetupAttemptsResource.js" />
/// <reference types="stripe/types/SetupIntentsResource.js" />
/// <reference types="stripe/types/ShippingRatesResource.js" />
/// <reference types="stripe/types/Sigma/ScheduledQueryRunsResource.js" />
/// <reference types="stripe/types/SourcesResource.js" />
/// <reference types="stripe/types/SubscriptionItemsResource.js" />
/// <reference types="stripe/types/SubscriptionSchedulesResource.js" />
/// <reference types="stripe/types/SubscriptionsResource.js" />
/// <reference types="stripe/types/Tax/CalculationsResource.js" />
/// <reference types="stripe/types/Tax/TransactionsResource.js" />
/// <reference types="stripe/types/TaxCodesResource.js" />
/// <reference types="stripe/types/TaxRatesResource.js" />
/// <reference types="stripe/types/Terminal/ConfigurationsResource.js" />
/// <reference types="stripe/types/Terminal/ConnectionTokensResource.js" />
/// <reference types="stripe/types/Terminal/LocationsResource.js" />
/// <reference types="stripe/types/Terminal/ReadersResource.js" />
/// <reference types="stripe/types/TestHelpers/CustomersResource.js" />
/// <reference types="stripe/types/TestHelpers/Issuing/CardsResource.js" />
/// <reference types="stripe/types/TestHelpers/RefundsResource.js" />
/// <reference types="stripe/types/TestHelpers/Terminal/ReadersResource.js" />
/// <reference types="stripe/types/TestHelpers/TestClocksResource.js" />
/// <reference types="stripe/types/TestHelpers/Treasury/InboundTransfersResource.js" />
/// <reference types="stripe/types/TestHelpers/Treasury/OutboundPaymentsResource.js" />
/// <reference types="stripe/types/TestHelpers/Treasury/OutboundTransfersResource.js" />
/// <reference types="stripe/types/TestHelpers/Treasury/ReceivedCreditsResource.js" />
/// <reference types="stripe/types/TestHelpers/Treasury/ReceivedDebitsResource.js" />
/// <reference types="stripe/types/TokensResource.js" />
/// <reference types="stripe/types/TopupsResource.js" />
/// <reference types="stripe/types/TransfersResource.js" />
/// <reference types="stripe/types/Treasury/CreditReversalsResource.js" />
/// <reference types="stripe/types/Treasury/DebitReversalsResource.js" />
/// <reference types="stripe/types/Treasury/FinancialAccountsResource.js" />
/// <reference types="stripe/types/Treasury/InboundTransfersResource.js" />
/// <reference types="stripe/types/Treasury/OutboundPaymentsResource.js" />
/// <reference types="stripe/types/Treasury/OutboundTransfersResource.js" />
/// <reference types="stripe/types/Treasury/ReceivedCreditsResource.js" />
/// <reference types="stripe/types/Treasury/ReceivedDebitsResource.js" />
/// <reference types="stripe/types/Treasury/TransactionEntriesResource.js" />
/// <reference types="stripe/types/Treasury/TransactionsResource.js" />
/// <reference types="stripe/types/WebhookEndpointsResource.js" />
/// <reference types="stripe/types/AccountLinks.js" />
/// <reference types="stripe/types/Accounts.js" />
/// <reference types="stripe/types/ApplePayDomains.js" />
/// <reference types="stripe/types/ApplicationFees.js" />
/// <reference types="stripe/types/Applications.js" />
/// <reference types="stripe/types/Apps/Secrets.js" />
/// <reference types="stripe/types/Balance.js" />
/// <reference types="stripe/types/BalanceTransactions.js" />
/// <reference types="stripe/types/BankAccounts.js" />
/// <reference types="stripe/types/BillingPortal/Configurations.js" />
/// <reference types="stripe/types/BillingPortal/Sessions.js" />
/// <reference types="stripe/types/Capabilities.js" />
/// <reference types="stripe/types/Cards.js" />
/// <reference types="stripe/types/CashBalances.js" />
/// <reference types="stripe/types/Charges.js" />
/// <reference types="stripe/types/Checkout/Sessions.js" />
/// <reference types="stripe/types/ConnectCollectionTransfers.js" />
/// <reference types="stripe/types/CountrySpecs.js" />
/// <reference types="stripe/types/Coupons.js" />
/// <reference types="stripe/types/CreditNoteLineItems.js" />
/// <reference types="stripe/types/CreditNotes.js" />
/// <reference types="stripe/types/CustomerBalanceTransactions.js" />
/// <reference types="stripe/types/CustomerCashBalanceTransactions.js" />
/// <reference types="stripe/types/Customers.js" />
/// <reference types="stripe/types/Discounts.js" />
/// <reference types="stripe/types/Disputes.js" />
/// <reference types="stripe/types/EphemeralKeys.js" />
/// <reference types="stripe/types/Events.js" />
/// <reference types="stripe/types/ExchangeRates.js" />
/// <reference types="stripe/types/FeeRefunds.js" />
/// <reference types="stripe/types/FileLinks.js" />
/// <reference types="stripe/types/Files.js" />
/// <reference types="stripe/types/FinancialConnections/AccountOwners.js" />
/// <reference types="stripe/types/FinancialConnections/AccountOwnerships.js" />
/// <reference types="stripe/types/FinancialConnections/Accounts.js" />
/// <reference types="stripe/types/FinancialConnections/Sessions.js" />
/// <reference types="stripe/types/FundingInstructions.js" />
/// <reference types="stripe/types/Identity/VerificationReports.js" />
/// <reference types="stripe/types/Identity/VerificationSessions.js" />
/// <reference types="stripe/types/InvoiceItems.js" />
/// <reference types="stripe/types/InvoiceLineItems.js" />
/// <reference types="stripe/types/Invoices.js" />
/// <reference types="stripe/types/Issuing/Authorizations.js" />
/// <reference types="stripe/types/Issuing/Cardholders.js" />
/// <reference types="stripe/types/Issuing/Cards.js" />
/// <reference types="stripe/types/Issuing/Disputes.js" />
/// <reference types="stripe/types/Issuing/Transactions.js" />
/// <reference types="stripe/types/LineItems.js" />
/// <reference types="stripe/types/LoginLinks.js" />
/// <reference types="stripe/types/Mandates.js" />
/// <reference types="stripe/types/PaymentIntents.js" />
/// <reference types="stripe/types/PaymentLinks.js" />
/// <reference types="stripe/types/PaymentMethods.js" />
/// <reference types="stripe/types/Payouts.js" />
/// <reference types="stripe/types/Persons.js" />
/// <reference types="stripe/types/Plans.js" />
/// <reference types="stripe/types/PlatformTaxFees.js" />
/// <reference types="stripe/types/Prices.js" />
/// <reference types="stripe/types/Products.js" />
/// <reference types="stripe/types/PromotionCodes.js" />
/// <reference types="stripe/types/Quotes.js" />
/// <reference types="stripe/types/Radar/EarlyFraudWarnings.js" />
/// <reference types="stripe/types/Radar/ValueListItems.js" />
/// <reference types="stripe/types/Radar/ValueLists.js" />
/// <reference types="stripe/types/Refunds.js" />
/// <reference types="stripe/types/Reporting/ReportRuns.js" />
/// <reference types="stripe/types/Reporting/ReportTypes.js" />
/// <reference types="stripe/types/ReserveTransactions.js" />
/// <reference types="stripe/types/Reviews.js" />
/// <reference types="stripe/types/SetupAttempts.js" />
/// <reference types="stripe/types/SetupIntents.js" />
/// <reference types="stripe/types/ShippingRates.js" />
/// <reference types="stripe/types/Sigma/ScheduledQueryRuns.js" />
/// <reference types="stripe/types/SourceMandateNotifications.js" />
/// <reference types="stripe/types/SourceTransactions.js" />
/// <reference types="stripe/types/Sources.js" />
/// <reference types="stripe/types/SubscriptionItems.js" />
/// <reference types="stripe/types/SubscriptionSchedules.js" />
/// <reference types="stripe/types/Subscriptions.js" />
/// <reference types="stripe/types/Tax/CalculationLineItems.js" />
/// <reference types="stripe/types/Tax/Calculations.js" />
/// <reference types="stripe/types/Tax/TransactionLineItems.js" />
/// <reference types="stripe/types/Tax/Transactions.js" />
/// <reference types="stripe/types/TaxCodes.js" />
/// <reference types="stripe/types/TaxDeductedAtSources.js" />
/// <reference types="stripe/types/TaxIds.js" />
/// <reference types="stripe/types/TaxRates.js" />
/// <reference types="stripe/types/Terminal/Configurations.js" />
/// <reference types="stripe/types/Terminal/ConnectionTokens.js" />
/// <reference types="stripe/types/Terminal/Locations.js" />
/// <reference types="stripe/types/Terminal/Readers.js" />
/// <reference types="stripe/types/TestHelpers/TestClocks.js" />
/// <reference types="stripe/types/Tokens.js" />
/// <reference types="stripe/types/Topups.js" />
/// <reference types="stripe/types/TransferReversals.js" />
/// <reference types="stripe/types/Transfers.js" />
/// <reference types="stripe/types/Treasury/CreditReversals.js" />
/// <reference types="stripe/types/Treasury/DebitReversals.js" />
/// <reference types="stripe/types/Treasury/FinancialAccountFeatures.js" />
/// <reference types="stripe/types/Treasury/FinancialAccounts.js" />
/// <reference types="stripe/types/Treasury/InboundTransfers.js" />
/// <reference types="stripe/types/Treasury/OutboundPayments.js" />
/// <reference types="stripe/types/Treasury/OutboundTransfers.js" />
/// <reference types="stripe/types/Treasury/ReceivedCredits.js" />
/// <reference types="stripe/types/Treasury/ReceivedDebits.js" />
/// <reference types="stripe/types/Treasury/TransactionEntries.js" />
/// <reference types="stripe/types/Treasury/Transactions.js" />
/// <reference types="stripe/types/UsageRecordSummaries.js" />
/// <reference types="stripe/types/UsageRecords.js" />
/// <reference types="stripe/types/WebhookEndpoints.js" />
/// <reference types="stripe" />
/// <reference types="stripe/types/lib.js" />
/// <reference types="stripe/types/net/net.js" />
import { XiomeMockConfig } from "../../types/xiome-config-mock.js";
export declare function mockConnect(config: XiomeMockConfig): Promise<{
    appId: string;
    remote: import("renraku").ApiRemote<{
        auth: {
            apps: {
                appService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").PlatformUserMeta, import("../../../../features/auth/types/auth-metas.js").PlatformUserAuth, {
                    listApps({ ownerUserId: ownerUserIdString }: {
                        ownerUserId: string;
                    }): Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay[]>;
                    registerApp({ appDraft, ownerUserId }: {
                        appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                        ownerUserId: string;
                    }): Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay>;
                }>;
                appEditService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AppOwnerMeta, import("../../../../features/auth/types/auth-metas.js").AppOwnerAuth, {
                    updateApp({ appId: appIdString, appDraft }: {
                        appId: string;
                        appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                    }): Promise<void>;
                    deleteApp({ appId: appIdString }: {
                        appId: string;
                    }): Promise<void>;
                    listAdmins({ appId: appIdString }: {
                        appId: string;
                    }): Promise<import("../../../../features/auth/aspects/apps/types/admin-email-display.js").AdminEmailDisplay[]>;
                    assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                        appId: string;
                        platformUserId: string;
                    }): Promise<void>;
                    assignAdmin({ appId: appIdString, email }: {
                        appId: string;
                        email: string;
                    }): Promise<void>;
                    revokeAdmin({ appId: appIdString, userId: userIdString }: {
                        appId: string;
                        userId: string;
                    }): Promise<void>;
                }>;
            };
            users: {
                greenService: import("renraku").Service<undefined, import("../../../../features/auth/types/auth-metas.js").GreenAuth, {
                    authorize({ scope, refreshToken, appId: appIdString, }: {
                        scope: import("../../../../features/auth/types/auth-tokens.js").CoreScope;
                        appId: string;
                        refreshToken?: string;
                    }): Promise<string>;
                }>;
                loginService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/auth/types/auth-metas.js").LoginAuth, {
                    sendLoginLink(inputs: {
                        email: string;
                    }): Promise<void>;
                    authenticateViaLoginToken({ loginToken }: {
                        loginToken: string;
                    }): Promise<import("../../../../toolbox/concurrent.js").AwaitProps<{
                        accessToken: Promise<string>;
                        refreshToken: Promise<string>;
                    }>>;
                }>;
                userService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/auth/types/auth-metas.js").LoginAuth, {
                    getUser({ userId }: {
                        userId: string;
                    }): Promise<{
                        userId: string;
                        profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                        roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                    }>;
                }>;
                personalService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/auth/types/auth-metas.js").UserAuth, {
                    setProfile({ userId: userIdString, profileDraft }: {
                        userId: string;
                        profileDraft: import("../../../../features/auth/aspects/users/routines/personal/types/profile-draft.js").ProfileDraft;
                    }): Promise<void>;
                }>;
            };
            permissions: {
                permissionsService: import("renraku").Service<import("../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                    engine: {
                        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                            userIds: string[];
                            onlyGetPublicRoles: boolean;
                        }) => Promise<{
                            userId: string;
                            userHasRoles: {
                                userId: import("dbmage").Id;
                                roleId: import("dbmage").Id;
                                timeframeStart: number;
                                timeframeEnd: number;
                                public: boolean;
                                hard: boolean;
                                time: number;
                            }[];
                        }[]>;
                        getAnonymousPrivileges: () => Promise<string[]>;
                        getPrivilegesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            privileges: string[];
                        }[]>;
                        getPublicRolesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        }[]>;
                        getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        getPrivileges: (privilegeIds: string[]) => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getAllPrivileges: () => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getUserPrivileges: (userId: string) => Promise<string[]>;
                    };
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    database: import("../../../backend/types/database.js").DatabaseSafe;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                }, {
                    fetchPermissions(): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    createRole({ label }: {
                        label: string;
                    }): Promise<void>;
                    deleteRole({ roleId: roleIdString }: {
                        roleId: string;
                    }): Promise<void>;
                    assignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                        roleId: string;
                        privilegeId: string;
                    }): Promise<void>;
                    unassignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                        roleId: string;
                        privilegeId: string;
                    }): Promise<void>;
                    createPrivilege({ label }: {
                        label: string;
                    }): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
                    deletePrivilege({ privilegeId: privilegeIdString }: {
                        privilegeId: string;
                    }): Promise<void>;
                }>;
            };
        };
        administrative: {
            roleAssignmentService: import("renraku").Service<import("../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                engine: {
                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                        userIds: string[];
                        onlyGetPublicRoles: boolean;
                    }) => Promise<{
                        userId: string;
                        userHasRoles: {
                            userId: import("dbmage").Id;
                            roleId: import("dbmage").Id;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        }[];
                    }[]>;
                    getAnonymousPrivileges: () => Promise<string[]>;
                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        privileges: string[];
                    }[]>;
                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    }[]>;
                    getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    getPrivileges: (privilegeIds: string[]) => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getAllPrivileges: () => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getUserPrivileges: (userId: string) => Promise<string[]>;
                };
                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                database: import("../../../backend/types/database.js").DatabaseSafe;
                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
            }, {
                fetchPermissions(): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                searchUsers(options: {
                    term: string;
                }): Promise<{
                    user: {
                        userId: string;
                        profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                        roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                    };
                    roleIds: string[];
                }[]>;
                assignRoleToUser(options: {
                    roleId: string;
                    userId: string;
                    isPublic: boolean;
                    timeframeEnd: number;
                    timeframeStart: number;
                }): Promise<void>;
                revokeRoleFromUser(options: {
                    roleId: string;
                    userId: string;
                }): Promise<void>;
            }>;
        };
        questions: {
            questionsReadingService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsAnonAuth, {
                fetchQuestions({ board }: {
                    board: string;
                }): Promise<{
                    users: {
                        userId: string;
                        profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                        roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                    }[];
                    questions: {
                        answers: import("../../../../features/questions/api/types/questions-and-answers.js").Answer[];
                        questionId: string;
                        authorUserId: string;
                        board: string;
                        content: string;
                        archive: boolean;
                        timePosted: number;
                        liked: boolean;
                        likes: number;
                        reports: number;
                        reported: boolean;
                    }[];
                }>;
            }>;
            questionsPostingService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                postQuestion(inputs: {
                    questionDraft: import("../../../../features/questions/api/types/question-draft.js").QuestionDraft;
                }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Question>;
                archiveQuestion(inputs: {
                    archive: boolean;
                    questionId: string;
                }): Promise<void>;
                likeQuestion(inputs: {
                    like: boolean;
                    questionId: string;
                }): Promise<void>;
                reportQuestion(inputs: {
                    report: boolean;
                    questionId: string;
                }): Promise<void>;
            }>;
            questionsAnsweringService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                postAnswer(inputs: {
                    questionId: string;
                    answerDraft: import("../../../../features/questions/api/types/answer-draft.js").AnswerDraft;
                }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Answer>;
                archiveAnswer(inputs: {
                    archive: boolean;
                    answerId: string;
                }): Promise<void>;
                likeAnswer(inputs: {
                    like: boolean;
                    answerId: string;
                }): Promise<void>;
                reportAnswer(inputs: {
                    report: boolean;
                    answerId: string;
                }): Promise<void>;
            }>;
            questionsModerationService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                archiveBoard({ board }: {
                    board: string;
                }): Promise<void>;
                fetchReportedQuestions(): Promise<void>;
            }>;
        };
        example: {
            exampleService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, {
                database: import("dbmage").DatabaseLike<import("dbmage").SchemaToTables<{
                    examplePosts: {
                        exampleId: import("dbmage").Id;
                        something: string;
                    };
                }>>;
                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
            }, {
                exampleFunction({ something }: {
                    something: string;
                }): Promise<void>;
            }>;
        };
        videos: {
            dacastService: import("renraku").Service<import("../../../../features/videos/types/video-auth.js").VideoMeta, {
                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    "view all videos": string;
                    "moderate videos": string;
                }>;
                engine: {
                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                        userIds: string[];
                        onlyGetPublicRoles: boolean;
                    }) => Promise<{
                        userId: string;
                        userHasRoles: {
                            userId: import("dbmage").Id;
                            roleId: import("dbmage").Id;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        }[];
                    }[]>;
                    getAnonymousPrivileges: () => Promise<string[]>;
                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        privileges: string[];
                    }[]>;
                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    }[]>;
                    getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    getPrivileges: (privilegeIds: string[]) => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getAllPrivileges: () => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getUserPrivileges: (userId: string) => Promise<string[]>;
                };
                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                database: import("../../../backend/types/database.js").DatabaseSafe;
            }, {
                getLink(): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                setLink(inputs: {
                    apiKey: string;
                }): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                clearLink(): Promise<void>;
            }>;
            contentService: import("renraku").Service<import("../../../../features/videos/types/video-auth.js").VideoMeta, {
                engine: {
                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                        userIds: string[];
                        onlyGetPublicRoles: boolean;
                    }) => Promise<{
                        userId: string;
                        userHasRoles: {
                            userId: import("dbmage").Id;
                            roleId: import("dbmage").Id;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        }[];
                    }[]>;
                    getAnonymousPrivileges: () => Promise<string[]>;
                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        privileges: string[];
                    }[]>;
                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    }[]>;
                    getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    getPrivileges: (privilegeIds: string[]) => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getAllPrivileges: () => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getUserPrivileges: (userId: string) => Promise<string[]>;
                };
                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    "view all videos": string;
                    "moderate videos": string;
                }>;
                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                database: import("../../../backend/types/database.js").DatabaseSafe;
            }, {
                fetchModerationData(): Promise<import("../../../../features/videos/types/video-concepts.js").VideoModerationData>;
                writeView({ label, privileges, reference, }: {
                    label: string;
                    privileges: string[];
                    reference: import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastReference;
                }): Promise<void>;
                deleteView({ label }: {
                    label: string;
                }): Promise<void>;
                getShows({ labels }: {
                    labels: string[];
                }): Promise<import("../../../../features/videos/types/video-concepts.js").VideoShow[]>;
            }>;
        };
        notes: {
            notesService: import("renraku").Service<import("../../../../features/notes/api/types/notes-auth.js").NotesMeta, {
                notesDatabase: import("dbmage").Database<{
                    notes: import("../../../../features/notes/types/notes-concepts.js").Database.NoteBase;
                    questionDetails: import("../../../../features/notes/types/notes-concepts.js").Database.NoteDetails.Question;
                }>;
                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                database: import("../../../backend/types/database.js").DatabaseSafe;
                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
            }, {
                getNotesStats(): Promise<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                getNewNotes(pagination: import("../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                getOldNotes(pagination: import("../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                markAllNotesOld(): Promise<void>;
                markNotesNewOrOld(input: {
                    old: boolean;
                    noteIds: string[];
                }): Promise<void>;
            }>;
        };
        store: {
            connect: import("renraku").Service<any, import("../../../../features/store/backend/policies/types.js").StoreAuth, {
                loadConnectDetails(): Promise<{
                    connectDetails: import("../../../../features/store/isomorphic/concepts.js").StripeConnectDetails;
                    connectStatus: import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus;
                }>;
                generatePopupForStripeAccountOnboarding(): Promise<{
                    popupId: string;
                    stripeAccountId: string;
                    stripeAccountSetupLink: string;
                }>;
                generateStripeLoginLink(): Promise<{
                    stripeLoginLink: string;
                    popupId: string;
                }>;
                pause(): Promise<void>;
                resume(): Promise<void>;
                loadConnectStatus(): Promise<import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus>;
            }>;
            billing: import("renraku").Service<unknown, {
                stripeCustomerId: string;
                connectId: import("dbmage").Id;
                stripeAccountId: string;
                stripeLiaisonAccount: {
                    billingPortal: {
                        create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                    };
                    customers: {
                        create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                        update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                        listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                    };
                    products: {
                        create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                    };
                    prices: {
                        list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                        create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                    };
                    paymentMethods: {
                        create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                    };
                    setupIntents: {
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                        create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                    };
                    paymentIntents: {
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                        create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                    };
                    subscriptions: {
                        list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                        create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                    };
                    subscriptionItems: {
                        del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                    };
                    checkout: {
                        sessions: {
                            create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                        };
                    };
                };
                storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                stripeLiaison: {
                    accounts: {
                        create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                        createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                    };
                    accountLinks: {
                        create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                    };
                    account(stripeAccount: string): {
                        billingPortal: {
                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                        };
                        customers: {
                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                        };
                        products: {
                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        };
                        prices: {
                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        };
                        paymentMethods: {
                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        };
                        setupIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                        };
                        paymentIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                        };
                        subscriptions: {
                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        };
                        subscriptionItems: {
                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                        };
                        checkout: {
                            sessions: {
                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                            };
                        };
                    };
                };
                roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
            }, {
                getDefaultPaymentMethod(): Promise<import("../../../../features/store/isomorphic/concepts.js").PaymentMethod>;
                generateCustomerPortalLink(): Promise<{
                    popupId: string;
                    customer: string;
                    stripeSessionUrl: string;
                    stripeAccountId: string;
                }>;
            }>;
            subscriptions: {
                listing: import("renraku").Service<unknown, {
                    connectId: import("dbmage").Id;
                    stripeAccountId: string;
                    stripeLiaisonAccount: {
                        billingPortal: {
                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                        };
                        customers: {
                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                        };
                        products: {
                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        };
                        prices: {
                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        };
                        paymentMethods: {
                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        };
                        setupIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                        };
                        paymentIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                        };
                        subscriptions: {
                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        };
                        subscriptionItems: {
                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                        };
                        checkout: {
                            sessions: {
                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                            };
                        };
                    };
                    storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                    stripeLiaison: {
                        accounts: {
                            create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                        };
                        accountLinks: {
                            create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                        };
                        account(stripeAccount: string): {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                    };
                    roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                    storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                }, {
                    listPlans(): Promise<{
                        archived: boolean;
                        label: string;
                        planId: string;
                        time: number;
                        tiers: import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier[];
                    }[]>;
                }>;
                planning: import("renraku").Service<unknown, {
                    helpers: {
                        createPlanAndTier({ planLabel, tier }: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPlanDraft): Promise<{
                            planId: import("dbmage").Id;
                            tierId: import("dbmage").Id;
                            stripePriceId: string;
                            tierRoleId: import("dbmage").Id;
                            time: number;
                        }>;
                        createTierForPlan({ planId, label, pricing }: {
                            planId: string;
                            label: string;
                            pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                        }): Promise<{
                            tierId: import("dbmage").Id;
                            roleId: import("dbmage").Id;
                            time: number;
                            stripePriceId: string;
                        }>;
                        updatePlan({ planId: planIdString, label, archived }: {
                            planId: string;
                            label: string;
                            archived: boolean;
                        }): Promise<void>;
                        updateTier({ tierId: tierIdString, label, active, pricing }: {
                            tierId: string;
                            label: string;
                            active: boolean;
                            pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                        }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                    };
                    connectId: import("dbmage").Id;
                    stripeAccountId: string;
                    stripeLiaisonAccount: {
                        billingPortal: {
                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                        };
                        customers: {
                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                        };
                        products: {
                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        };
                        prices: {
                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        };
                        paymentMethods: {
                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        };
                        setupIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                        };
                        paymentIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                        };
                        subscriptions: {
                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        };
                        subscriptionItems: {
                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                        };
                        checkout: {
                            sessions: {
                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                            };
                        };
                    };
                    storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                    stripeLiaison: {
                        accounts: {
                            create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                        };
                        accountLinks: {
                            create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                        };
                        account(stripeAccount: string): {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                    };
                    roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                    storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                }, {
                    addPlan(inputs: {
                        planLabel: string;
                        tier: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                    }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan>;
                    addTier(inputs: {
                        label: string;
                        planId: string;
                        pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                    }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                    editPlan(inputs: {
                        planId: string;
                        label: string;
                        archived: boolean;
                    }): Promise<void>;
                    editTier(inputs: {
                        label: string;
                        tierId: string;
                        active: boolean;
                        pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                    }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                }>;
                shopping: import("renraku").Service<unknown, {
                    stripeCustomerId: string;
                    connectId: import("dbmage").Id;
                    stripeAccountId: string;
                    stripeLiaisonAccount: {
                        billingPortal: {
                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                        };
                        customers: {
                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                        };
                        products: {
                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        };
                        prices: {
                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        };
                        paymentMethods: {
                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        };
                        setupIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                        };
                        paymentIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                        };
                        subscriptions: {
                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        };
                        subscriptionItems: {
                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                        };
                        checkout: {
                            sessions: {
                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                            };
                        };
                    };
                    storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                    stripeLiaison: {
                        accounts: {
                            create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                        };
                        accountLinks: {
                            create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                        };
                        account(stripeAccount: string): {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                    };
                    roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                    storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                }, {
                    fetchDetailsAboutMySubscriptions(): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionDetails[]>;
                    buy(stripePriceId: string): Promise<{
                        checkoutDetails?: import("../../../../features/store/backend/types/checkout-popup-details.js").CheckoutPopupDetails;
                    }>;
                    cancel(tierId: string): Promise<void>;
                    uncancel(tierId: string): Promise<void>;
                }>;
            };
        };
    }>;
    storage: import("dbmage").FlexStorage;
    authMediator: {
        subscribeToAccessChange: import("../../../../toolbox/pubsub.js").Subscribe<import("../../../../features/auth/mediator/types/access-event-listener.js").AccessEventListener>;
        subscribeToTokenChange: import("../../../../toolbox/pubsub.js").Subscribe<() => void | Promise<void>>;
        initialize(): Promise<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        getValidAccess(): Promise<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        getValidAccessToken(): Promise<string>;
        login(tokens: import("../../../../features/auth/types/auth-tokens.js").AuthTokens): Promise<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        logout(): Promise<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        reauthorize(): Promise<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
    };
    backend: {
        rando: {
            random: () => number;
            compare: (a: string, b: string) => boolean;
            randomId: () => import("dbmage").Id;
            randomBuffer: (bytes: number) => ArrayBuffer;
            randomSample: <T>(palette: T[]) => T;
            randomSequence: (length: number, palette: string[]) => string;
        };
        api: {
            auth: {
                apps: {
                    appService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").PlatformUserMeta, import("../../../../features/auth/types/auth-metas.js").PlatformUserAuth, {
                        listApps({ ownerUserId: ownerUserIdString }: {
                            ownerUserId: string;
                        }): Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay[]>;
                        registerApp({ appDraft, ownerUserId }: {
                            appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                            ownerUserId: string;
                        }): Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay>;
                    }>;
                    appEditService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AppOwnerMeta, import("../../../../features/auth/types/auth-metas.js").AppOwnerAuth, {
                        updateApp({ appId: appIdString, appDraft }: {
                            appId: string;
                            appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                        }): Promise<void>;
                        deleteApp({ appId: appIdString }: {
                            appId: string;
                        }): Promise<void>;
                        listAdmins({ appId: appIdString }: {
                            appId: string;
                        }): Promise<import("../../../../features/auth/aspects/apps/types/admin-email-display.js").AdminEmailDisplay[]>;
                        assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                            appId: string;
                            platformUserId: string;
                        }): Promise<void>;
                        assignAdmin({ appId: appIdString, email }: {
                            appId: string;
                            email: string;
                        }): Promise<void>;
                        revokeAdmin({ appId: appIdString, userId: userIdString }: {
                            appId: string;
                            userId: string;
                        }): Promise<void>;
                    }>;
                };
                users: {
                    greenService: import("renraku").Service<undefined, import("../../../../features/auth/types/auth-metas.js").GreenAuth, {
                        authorize({ scope, refreshToken, appId: appIdString, }: {
                            scope: import("../../../../features/auth/types/auth-tokens.js").CoreScope;
                            appId: string;
                            refreshToken?: string;
                        }): Promise<string>;
                    }>;
                    loginService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/auth/types/auth-metas.js").LoginAuth, {
                        sendLoginLink(inputs: {
                            email: string;
                        }): Promise<void>;
                        authenticateViaLoginToken({ loginToken }: {
                            loginToken: string;
                        }): Promise<import("../../../../toolbox/concurrent.js").AwaitProps<{
                            accessToken: Promise<string>;
                            refreshToken: Promise<string>;
                        }>>;
                    }>;
                    userService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/auth/types/auth-metas.js").LoginAuth, {
                        getUser({ userId }: {
                            userId: string;
                        }): Promise<{
                            userId: string;
                            profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                            roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                            stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                        }>;
                    }>;
                    personalService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/auth/types/auth-metas.js").UserAuth, {
                        setProfile({ userId: userIdString, profileDraft }: {
                            userId: string;
                            profileDraft: import("../../../../features/auth/aspects/users/routines/personal/types/profile-draft.js").ProfileDraft;
                        }): Promise<void>;
                    }>;
                };
                permissions: {
                    permissionsService: import("renraku").Service<import("../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                        engine: {
                            getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                                userIds: string[];
                                onlyGetPublicRoles: boolean;
                            }) => Promise<{
                                userId: string;
                                userHasRoles: {
                                    userId: import("dbmage").Id;
                                    roleId: import("dbmage").Id;
                                    timeframeStart: number;
                                    timeframeEnd: number;
                                    public: boolean;
                                    hard: boolean;
                                    time: number;
                                }[];
                            }[]>;
                            getAnonymousPrivileges: () => Promise<string[]>;
                            getPrivilegesForUsers: (userIds: string[]) => Promise<{
                                userId: string;
                                privileges: string[];
                            }[]>;
                            getPublicRolesForUsers: (userIds: string[]) => Promise<{
                                userId: string;
                                publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                            }[]>;
                            getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                            getPrivileges: (privilegeIds: string[]) => Promise<{
                                hard: boolean;
                                label: string;
                                time: number;
                                privilegeId: string;
                            }[]>;
                            getAllPrivileges: () => Promise<{
                                hard: boolean;
                                label: string;
                                time: number;
                                privilegeId: string;
                            }[]>;
                            getUserPrivileges: (userId: string) => Promise<string[]>;
                        };
                        access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                        database: import("../../../backend/types/database.js").DatabaseSafe;
                        checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                            universal: string;
                            banned: string;
                            "moderate all chats": string;
                            "control stripe account": string;
                            "manage store": string;
                            "give away freebies": string;
                            "view all videos": string;
                            "moderate videos": string;
                            "edit any profile": string;
                            "customize permissions": string;
                            "answer questions": string;
                            "moderate questions": string;
                            "view stats": string;
                            "administrate user roles": string;
                            "view all chats": string;
                            "participate in all chats": string;
                            "read questions": string;
                            "post questions": string;
                            "like questions": string;
                            "report questions": string;
                        }>;
                    }, {
                        fetchPermissions(): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        createRole({ label }: {
                            label: string;
                        }): Promise<void>;
                        deleteRole({ roleId: roleIdString }: {
                            roleId: string;
                        }): Promise<void>;
                        assignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                            roleId: string;
                            privilegeId: string;
                        }): Promise<void>;
                        unassignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                            roleId: string;
                            privilegeId: string;
                        }): Promise<void>;
                        createPrivilege({ label }: {
                            label: string;
                        }): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
                        deletePrivilege({ privilegeId: privilegeIdString }: {
                            privilegeId: string;
                        }): Promise<void>;
                    }>;
                };
            };
            administrative: {
                roleAssignmentService: import("renraku").Service<import("../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                    engine: {
                        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                            userIds: string[];
                            onlyGetPublicRoles: boolean;
                        }) => Promise<{
                            userId: string;
                            userHasRoles: {
                                userId: import("dbmage").Id;
                                roleId: import("dbmage").Id;
                                timeframeStart: number;
                                timeframeEnd: number;
                                public: boolean;
                                hard: boolean;
                                time: number;
                            }[];
                        }[]>;
                        getAnonymousPrivileges: () => Promise<string[]>;
                        getPrivilegesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            privileges: string[];
                        }[]>;
                        getPublicRolesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        }[]>;
                        getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        getPrivileges: (privilegeIds: string[]) => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getAllPrivileges: () => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getUserPrivileges: (userId: string) => Promise<string[]>;
                    };
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    database: import("../../../backend/types/database.js").DatabaseSafe;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                }, {
                    fetchPermissions(): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    searchUsers(options: {
                        term: string;
                    }): Promise<{
                        user: {
                            userId: string;
                            profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                            roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                            stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                        };
                        roleIds: string[];
                    }[]>;
                    assignRoleToUser(options: {
                        roleId: string;
                        userId: string;
                        isPublic: boolean;
                        timeframeEnd: number;
                        timeframeStart: number;
                    }): Promise<void>;
                    revokeRoleFromUser(options: {
                        roleId: string;
                        userId: string;
                    }): Promise<void>;
                }>;
            };
            questions: {
                questionsReadingService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsAnonAuth, {
                    fetchQuestions({ board }: {
                        board: string;
                    }): Promise<{
                        users: {
                            userId: string;
                            profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                            roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                            stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                        }[];
                        questions: {
                            answers: import("../../../../features/questions/api/types/questions-and-answers.js").Answer[];
                            questionId: string;
                            authorUserId: string;
                            board: string;
                            content: string;
                            archive: boolean;
                            timePosted: number;
                            liked: boolean;
                            likes: number;
                            reports: number;
                            reported: boolean;
                        }[];
                    }>;
                }>;
                questionsPostingService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                    postQuestion(inputs: {
                        questionDraft: import("../../../../features/questions/api/types/question-draft.js").QuestionDraft;
                    }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Question>;
                    archiveQuestion(inputs: {
                        archive: boolean;
                        questionId: string;
                    }): Promise<void>;
                    likeQuestion(inputs: {
                        like: boolean;
                        questionId: string;
                    }): Promise<void>;
                    reportQuestion(inputs: {
                        report: boolean;
                        questionId: string;
                    }): Promise<void>;
                }>;
                questionsAnsweringService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                    postAnswer(inputs: {
                        questionId: string;
                        answerDraft: import("../../../../features/questions/api/types/answer-draft.js").AnswerDraft;
                    }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Answer>;
                    archiveAnswer(inputs: {
                        archive: boolean;
                        answerId: string;
                    }): Promise<void>;
                    likeAnswer(inputs: {
                        like: boolean;
                        answerId: string;
                    }): Promise<void>;
                    reportAnswer(inputs: {
                        report: boolean;
                        answerId: string;
                    }): Promise<void>;
                }>;
                questionsModerationService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                    archiveBoard({ board }: {
                        board: string;
                    }): Promise<void>;
                    fetchReportedQuestions(): Promise<void>;
                }>;
            };
            example: {
                exampleService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, {
                    database: import("dbmage").DatabaseLike<import("dbmage").SchemaToTables<{
                        examplePosts: {
                            exampleId: import("dbmage").Id;
                            something: string;
                        };
                    }>>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                }, {
                    exampleFunction({ something }: {
                        something: string;
                    }): Promise<void>;
                }>;
            };
            videos: {
                dacastService: import("renraku").Service<import("../../../../features/videos/types/video-auth.js").VideoMeta, {
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        "view all videos": string;
                        "moderate videos": string;
                    }>;
                    engine: {
                        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                            userIds: string[];
                            onlyGetPublicRoles: boolean;
                        }) => Promise<{
                            userId: string;
                            userHasRoles: {
                                userId: import("dbmage").Id;
                                roleId: import("dbmage").Id;
                                timeframeStart: number;
                                timeframeEnd: number;
                                public: boolean;
                                hard: boolean;
                                time: number;
                            }[];
                        }[]>;
                        getAnonymousPrivileges: () => Promise<string[]>;
                        getPrivilegesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            privileges: string[];
                        }[]>;
                        getPublicRolesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        }[]>;
                        getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        getPrivileges: (privilegeIds: string[]) => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getAllPrivileges: () => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getUserPrivileges: (userId: string) => Promise<string[]>;
                    };
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    database: import("../../../backend/types/database.js").DatabaseSafe;
                }, {
                    getLink(): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                    setLink(inputs: {
                        apiKey: string;
                    }): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                    clearLink(): Promise<void>;
                }>;
                contentService: import("renraku").Service<import("../../../../features/videos/types/video-auth.js").VideoMeta, {
                    engine: {
                        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                            userIds: string[];
                            onlyGetPublicRoles: boolean;
                        }) => Promise<{
                            userId: string;
                            userHasRoles: {
                                userId: import("dbmage").Id;
                                roleId: import("dbmage").Id;
                                timeframeStart: number;
                                timeframeEnd: number;
                                public: boolean;
                                hard: boolean;
                                time: number;
                            }[];
                        }[]>;
                        getAnonymousPrivileges: () => Promise<string[]>;
                        getPrivilegesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            privileges: string[];
                        }[]>;
                        getPublicRolesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        }[]>;
                        getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        getPrivileges: (privilegeIds: string[]) => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getAllPrivileges: () => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getUserPrivileges: (userId: string) => Promise<string[]>;
                    };
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        "view all videos": string;
                        "moderate videos": string;
                    }>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    database: import("../../../backend/types/database.js").DatabaseSafe;
                }, {
                    fetchModerationData(): Promise<import("../../../../features/videos/types/video-concepts.js").VideoModerationData>;
                    writeView({ label, privileges, reference, }: {
                        label: string;
                        privileges: string[];
                        reference: import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastReference;
                    }): Promise<void>;
                    deleteView({ label }: {
                        label: string;
                    }): Promise<void>;
                    getShows({ labels }: {
                        labels: string[];
                    }): Promise<import("../../../../features/videos/types/video-concepts.js").VideoShow[]>;
                }>;
            };
            notes: {
                notesService: import("renraku").Service<import("../../../../features/notes/api/types/notes-auth.js").NotesMeta, {
                    notesDatabase: import("dbmage").Database<{
                        notes: import("../../../../features/notes/types/notes-concepts.js").Database.NoteBase;
                        questionDetails: import("../../../../features/notes/types/notes-concepts.js").Database.NoteDetails.Question;
                    }>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    database: import("../../../backend/types/database.js").DatabaseSafe;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                }, {
                    getNotesStats(): Promise<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                    getNewNotes(pagination: import("../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                    getOldNotes(pagination: import("../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                    markAllNotesOld(): Promise<void>;
                    markNotesNewOrOld(input: {
                        old: boolean;
                        noteIds: string[];
                    }): Promise<void>;
                }>;
            };
            store: {
                connect: import("renraku").Service<any, import("../../../../features/store/backend/policies/types.js").StoreAuth, {
                    loadConnectDetails(): Promise<{
                        connectDetails: import("../../../../features/store/isomorphic/concepts.js").StripeConnectDetails;
                        connectStatus: import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus;
                    }>;
                    generatePopupForStripeAccountOnboarding(): Promise<{
                        popupId: string;
                        stripeAccountId: string;
                        stripeAccountSetupLink: string;
                    }>;
                    generateStripeLoginLink(): Promise<{
                        stripeLoginLink: string;
                        popupId: string;
                    }>;
                    pause(): Promise<void>;
                    resume(): Promise<void>;
                    loadConnectStatus(): Promise<import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus>;
                }>;
                billing: import("renraku").Service<unknown, {
                    stripeCustomerId: string;
                    connectId: import("dbmage").Id;
                    stripeAccountId: string;
                    stripeLiaisonAccount: {
                        billingPortal: {
                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                        };
                        customers: {
                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                        };
                        products: {
                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                        };
                        prices: {
                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                        };
                        paymentMethods: {
                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                        };
                        setupIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                        };
                        paymentIntents: {
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                        };
                        subscriptions: {
                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                        };
                        subscriptionItems: {
                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                        };
                        checkout: {
                            sessions: {
                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                            };
                        };
                    };
                    storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                    stripeLiaison: {
                        accounts: {
                            create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                            createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                        };
                        accountLinks: {
                            create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                        };
                        account(stripeAccount: string): {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                    };
                    roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                    storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                    checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                    access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                }, {
                    getDefaultPaymentMethod(): Promise<import("../../../../features/store/isomorphic/concepts.js").PaymentMethod>;
                    generateCustomerPortalLink(): Promise<{
                        popupId: string;
                        customer: string;
                        stripeSessionUrl: string;
                        stripeAccountId: string;
                    }>;
                }>;
                subscriptions: {
                    listing: import("renraku").Service<unknown, {
                        connectId: import("dbmage").Id;
                        stripeAccountId: string;
                        stripeLiaisonAccount: {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                        storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                        stripeLiaison: {
                            accounts: {
                                create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                            };
                            accountLinks: {
                                create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                            };
                            account(stripeAccount: string): {
                                billingPortal: {
                                    create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                };
                                customers: {
                                    create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                    update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                };
                                products: {
                                    create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                };
                                prices: {
                                    list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                    create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                };
                                paymentMethods: {
                                    create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                };
                                setupIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                };
                                paymentIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                };
                                subscriptions: {
                                    list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                    create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                };
                                subscriptionItems: {
                                    del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                };
                                checkout: {
                                    sessions: {
                                        create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                    };
                                };
                            };
                        };
                        roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                        storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                        checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                            universal: string;
                            banned: string;
                            "moderate all chats": string;
                            "control stripe account": string;
                            "manage store": string;
                            "give away freebies": string;
                            "view all videos": string;
                            "moderate videos": string;
                            "edit any profile": string;
                            "customize permissions": string;
                            "answer questions": string;
                            "moderate questions": string;
                            "view stats": string;
                            "administrate user roles": string;
                            "view all chats": string;
                            "participate in all chats": string;
                            "read questions": string;
                            "post questions": string;
                            "like questions": string;
                            "report questions": string;
                        }>;
                        access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    }, {
                        listPlans(): Promise<{
                            archived: boolean;
                            label: string;
                            planId: string;
                            time: number;
                            tiers: import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier[];
                        }[]>;
                    }>;
                    planning: import("renraku").Service<unknown, {
                        helpers: {
                            createPlanAndTier({ planLabel, tier }: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPlanDraft): Promise<{
                                planId: import("dbmage").Id;
                                tierId: import("dbmage").Id;
                                stripePriceId: string;
                                tierRoleId: import("dbmage").Id;
                                time: number;
                            }>;
                            createTierForPlan({ planId, label, pricing }: {
                                planId: string;
                                label: string;
                                pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                            }): Promise<{
                                tierId: import("dbmage").Id;
                                roleId: import("dbmage").Id;
                                time: number;
                                stripePriceId: string;
                            }>;
                            updatePlan({ planId: planIdString, label, archived }: {
                                planId: string;
                                label: string;
                                archived: boolean;
                            }): Promise<void>;
                            updateTier({ tierId: tierIdString, label, active, pricing }: {
                                tierId: string;
                                label: string;
                                active: boolean;
                                pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                            }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                        };
                        connectId: import("dbmage").Id;
                        stripeAccountId: string;
                        stripeLiaisonAccount: {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                        storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                        stripeLiaison: {
                            accounts: {
                                create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                            };
                            accountLinks: {
                                create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                            };
                            account(stripeAccount: string): {
                                billingPortal: {
                                    create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                };
                                customers: {
                                    create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                    update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                };
                                products: {
                                    create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                };
                                prices: {
                                    list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                    create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                };
                                paymentMethods: {
                                    create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                };
                                setupIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                };
                                paymentIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                };
                                subscriptions: {
                                    list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                    create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                };
                                subscriptionItems: {
                                    del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                };
                                checkout: {
                                    sessions: {
                                        create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                    };
                                };
                            };
                        };
                        roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                        storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                        checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                            universal: string;
                            banned: string;
                            "moderate all chats": string;
                            "control stripe account": string;
                            "manage store": string;
                            "give away freebies": string;
                            "view all videos": string;
                            "moderate videos": string;
                            "edit any profile": string;
                            "customize permissions": string;
                            "answer questions": string;
                            "moderate questions": string;
                            "view stats": string;
                            "administrate user roles": string;
                            "view all chats": string;
                            "participate in all chats": string;
                            "read questions": string;
                            "post questions": string;
                            "like questions": string;
                            "report questions": string;
                        }>;
                        access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    }, {
                        addPlan(inputs: {
                            planLabel: string;
                            tier: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                        }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan>;
                        addTier(inputs: {
                            label: string;
                            planId: string;
                            pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                        }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                        editPlan(inputs: {
                            planId: string;
                            label: string;
                            archived: boolean;
                        }): Promise<void>;
                        editTier(inputs: {
                            label: string;
                            tierId: string;
                            active: boolean;
                            pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                        }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                    }>;
                    shopping: import("renraku").Service<unknown, {
                        stripeCustomerId: string;
                        connectId: import("dbmage").Id;
                        stripeAccountId: string;
                        stripeLiaisonAccount: {
                            billingPortal: {
                                create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                            };
                            customers: {
                                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                            };
                            products: {
                                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                            };
                            prices: {
                                list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                            };
                            paymentMethods: {
                                create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                            };
                            setupIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                            };
                            paymentIntents: {
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                            };
                            subscriptions: {
                                list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                            };
                            subscriptionItems: {
                                del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                            };
                            checkout: {
                                sessions: {
                                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                };
                            };
                        };
                        storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                        stripeLiaison: {
                            accounts: {
                                create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                            };
                            accountLinks: {
                                create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                            };
                            account(stripeAccount: string): {
                                billingPortal: {
                                    create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                };
                                customers: {
                                    create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                    update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                };
                                products: {
                                    create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                };
                                prices: {
                                    list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                    create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                };
                                paymentMethods: {
                                    create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                };
                                setupIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                };
                                paymentIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                };
                                subscriptions: {
                                    list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                    create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                };
                                subscriptionItems: {
                                    del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                };
                                checkout: {
                                    sessions: {
                                        create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                    };
                                };
                            };
                        };
                        roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                        storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                        checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                            universal: string;
                            banned: string;
                            "moderate all chats": string;
                            "control stripe account": string;
                            "manage store": string;
                            "give away freebies": string;
                            "view all videos": string;
                            "moderate videos": string;
                            "edit any profile": string;
                            "customize permissions": string;
                            "answer questions": string;
                            "moderate questions": string;
                            "view stats": string;
                            "administrate user roles": string;
                            "view all chats": string;
                            "participate in all chats": string;
                            "read questions": string;
                            "post questions": string;
                            "like questions": string;
                            "report questions": string;
                        }>;
                        access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    }, {
                        fetchDetailsAboutMySubscriptions(): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionDetails[]>;
                        buy(stripePriceId: string): Promise<{
                            checkoutDetails?: import("../../../../features/store/backend/types/checkout-popup-details.js").CheckoutPopupDetails;
                        }>;
                        cancel(tierId: string): Promise<void>;
                        uncancel(tierId: string): Promise<void>;
                    }>;
                };
            };
        };
        config: import("../../../backend/types/secret-config.js").SecretConfig;
        emails: {
            sendEmail: import("../../../../features/auth/types/emails/send-email.js").SendEmail;
            enableEmails: () => void;
            disableEmails: () => void;
            sendLoginEmail: (details: import("../../../../features/auth/aspects/users/types/emails/login-email-details.js").LoginEmailDetails) => Promise<void>;
            recallLatestLoginEmail: () => import("../../../../features/auth/aspects/users/types/emails/login-email-details.js").LoginEmailDetails;
        };
        databaseRaw: import("dbmage").DatabaseLike<{
            apps: import("dbmage").SchemaToTables<{
                registrations: {
                    appId: import("dbmage").Id;
                    label: string;
                    home: string;
                    origins: string;
                    archived: boolean;
                };
                owners: {
                    appId: import("dbmage").Id;
                    userId: import("dbmage").Id;
                };
            }>;
            auth: import("../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
                users: {
                    accounts: {
                        userId: import("dbmage").Id;
                        created: number;
                    };
                    profiles: {
                        userId: import("dbmage").Id;
                        nickname: string;
                        tagline: string;
                        avatar: string;
                    };
                    emails: {
                        userId: import("dbmage").Id;
                        email: string;
                    };
                    latestLogins: {
                        userId: import("dbmage").Id;
                        time: number;
                    };
                };
                permissions: {
                    role: {
                        roleId: import("dbmage").Id;
                        label: string;
                        time: number;
                        hard: boolean;
                        public: boolean;
                        assignable: boolean;
                    };
                    privilege: {
                        privilegeId: import("dbmage").Id;
                        label: string;
                        hard: boolean;
                        time: number;
                    };
                    userHasRole: {
                        userId: import("dbmage").Id;
                        roleId: import("dbmage").Id;
                        timeframeStart: number;
                        timeframeEnd: number;
                        public: boolean;
                        hard: boolean;
                        time: number;
                    };
                    roleHasPrivilege: {
                        roleId: import("dbmage").Id;
                        privilegeId: import("dbmage").Id;
                        immutable: boolean;
                        active: boolean;
                        time: number;
                    };
                };
            }>;
            notes: import("../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
                notes: import("../../../../features/notes/types/notes-concepts.js").Database.NoteBase;
                questionDetails: import("../../../../features/notes/types/notes-concepts.js").Database.NoteDetails.Question;
            }>;
            store: import("../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<import("../../../../features/store/backend/database/types/schema.js").StoreSchemaUnconnected>;
            videos: import("../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
                dacastAccountLinks: import("../../../../features/videos/types/dacast-link.js").DacastLinkRow;
                viewPrivileges: {
                    label: string;
                    privilegeId: import("dbmage").Id;
                };
                viewDacast: {
                    label: string;
                    dacastId: string;
                    type: import("../../../../features/videos/dacast/types/dacast-data.js").DacastData.ContentType;
                };
            }>;
            example: import("../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
                examplePosts: {
                    exampleId: import("dbmage").Id;
                    something: string;
                };
            }>;
            questions: import("../../../../framework/api/types/unconstrained-tables.js").SchemaToUnconstrainedTables<{
                questionPosts: {
                    questionId: import("dbmage").Id;
                    authorUserId: import("dbmage").Id;
                    board: string;
                    content: string;
                    archive: boolean;
                    timePosted: number;
                };
                answerPosts: import("../../../../features/questions/api/types/questions-schema.js").AnswerPostRow;
                likes: {
                    userId: import("dbmage").Id;
                    itemId: import("dbmage").Id;
                };
                reports: {
                    userId: import("dbmage").Id;
                    itemId: import("dbmage").Id;
                };
            }>;
        }>;
        stripeLiaison: {
            accounts: {
                create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
            };
            accountLinks: {
                create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
            };
            account(stripeAccount: string): {
                billingPortal: {
                    create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                };
                customers: {
                    create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                    update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                    listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                };
                products: {
                    create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                    update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                };
                prices: {
                    list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                    create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                    update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                };
                paymentMethods: {
                    create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                    detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                };
                setupIntents: {
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                    create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                };
                paymentIntents: {
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                    create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                };
                subscriptions: {
                    list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                    create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                    update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                };
                subscriptionItems: {
                    del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                };
                checkout: {
                    sessions: {
                        create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                    };
                };
            };
        };
        stripePopups: {
            connect({ popupId, stripeAccountId, stripeAccountSetupLink }: {
                popupId: string;
                stripeAccountId: string;
                stripeAccountSetupLink: string;
            }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<{
                status: "return" | "refresh";
            }>>;
            login({ popupId, stripeAccountId, stripeLoginLink }: {
                popupId: string;
                stripeAccountId: string;
                stripeLoginLink: string;
            }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<void>>;
            checkoutSubscription({ popupId, stripeSessionUrl, stripeSessionId, stripeAccountId }: {
                popupId: string;
                stripeSessionId: string;
                stripeAccountId: string;
                stripeSessionUrl: string;
            }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<{
                status: "cancel" | "success";
            }>>;
            openStoreCustomerPortal({ popupId, customer, stripeAccountId, stripeSessionUrl }: {
                popupId: string;
                customer: string;
                stripeAccountId: string;
                stripeSessionUrl: string;
            }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<{
                status: "detach" | "cancel" | "success";
            }>>;
        };
        platformAppId: string;
        prepareNotesDepositBox: (appId: import("dbmage").Id) => {
            sendNotes: (drafts: import("../../../../features/notes/types/notes-concepts.js").DraftForNote<import("../../../../features/notes/types/notes-concepts.js").Notes.Any>[]) => Promise<{
                noteId: string;
            }[]>;
            sendNote: (draft: import("../../../../features/notes/types/notes-concepts.js").DraftForNote<import("../../../../features/notes/types/notes-concepts.js").Notes.Any>) => Promise<{
                noteId: string;
            }>;
        };
        mockBrowser: ({ appOrigin }: {
            appOrigin: string;
        }) => Promise<{
            mockAppWindow: ({ appId }: {
                appId: string;
            }) => Promise<{
                models: {
                    exampleModel: {
                        state: {
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                        }>) => () => void;
                        updateAccessOp: (op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>) => void;
                    };
                    appsModel: {
                        state: {
                            active: boolean;
                            appRecords: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/apps/models/types/app-records.js").AppRecords>;
                            addingNewApp: import("../../../../framework/ops.js").Op<null>;
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            active: boolean;
                            appRecords: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/apps/models/types/app-records.js").AppRecords>;
                            addingNewApp: import("../../../../framework/ops.js").Op<null>;
                        }>) => () => void;
                        appEditService: {
                            updateApp({ appId: appIdString, appDraft }: {
                                appId: string;
                                appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                            }): Promise<void>;
                            deleteApp({ appId: appIdString }: {
                                appId: string;
                            }): Promise<void>;
                            listAdmins({ appId: appIdString }: {
                                appId: string;
                            }): Promise<import("../../../../features/auth/aspects/apps/types/admin-email-display.js").AdminEmailDisplay[]>;
                            assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                                appId: string;
                                platformUserId: string;
                            }): Promise<void>;
                            assignAdmin({ appId: appIdString, email }: {
                                appId: string;
                                email: string;
                            }): Promise<void>;
                            revokeAdmin({ appId: appIdString, userId: userIdString }: {
                                appId: string;
                                userId: string;
                            }): Promise<void>;
                        };
                        getApp: (appId: string) => import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay;
                        loadApps: () => Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay[]>;
                        deleteApp: (appId: string) => Promise<void>;
                        updateApp: (appId: string, appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft) => Promise<void>;
                        registerApp: (appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft) => Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay>;
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    };
                    chatModel: {
                        state: {
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../../framework/ops.js").Op<import("../../../../features/chat/common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../../../../features/chat/common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: import("../../../../features/chat/common/types/chat-concepts.js").ChatStatus;
                                        posts: import("../../../../features/chat/common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            connectionOp: import("../../../../framework/ops.js").Op<import("../../../../features/chat/common/types/chat-concepts.js").ChatConnection>;
                            cache: {
                                mutedUserIds: string[];
                                roomStats: import("../../../../features/chat/common/types/chat-concepts.js").ChatStats;
                                rooms: {
                                    [key: string]: {
                                        status: import("../../../../features/chat/common/types/chat-concepts.js").ChatStatus;
                                        posts: import("../../../../features/chat/common/types/chat-concepts.js").ChatPost[];
                                    };
                                };
                            };
                        }>) => () => void;
                        subscribeToChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                        readonly allowance: {
                            moderateAllChats: boolean;
                            participateInAllChats: boolean;
                            viewAllChats: boolean;
                            banned: boolean;
                        };
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        session: (label: string) => Promise<{
                            dispose: () => void;
                            room: {
                                readonly posts: import("../../../../features/chat/common/types/chat-concepts.js").ChatPost[];
                                readonly status: import("../../../../features/chat/common/types/chat-concepts.js").ChatStatus;
                                readonly muted: string[];
                                readonly weAreMuted: boolean;
                                readonly weAreBanned: boolean;
                                setRoomStatus(status: import("../../../../features/chat/common/types/chat-concepts.js").ChatStatus): void;
                                post(draft: import("../../../../features/chat/common/types/chat-concepts.js").ChatDraft): void;
                                remove(postIds: string[]): void;
                                clear(): void;
                                mute(userId: string): void;
                                unmute(userId: string): void;
                                unmuteAll(): void;
                            };
                        }>;
                        disconnect: () => Promise<void>;
                        reconnect: () => Promise<import("../../../../features/chat/common/types/chat-concepts.js").ChatConnection>;
                    };
                    accessModel: {
                        subscribe: (...listeners: ((accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>) => void | Promise<void>)[]) => () => void;
                        getAccessOp(): import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                        getAccess(): import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                        getValidAccess(): Promise<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                        useExistingLogin(): Promise<void>;
                        sendLoginLink(email: string): Promise<void>;
                        login(loginToken: string): Promise<void>;
                        logout(): Promise<void>;
                        reauthorize(): Promise<void>;
                    };
                    videoModels: {
                        dacastModel: {
                            state: {
                                accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                                linkedAccountOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                                linkedAccountOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                            }>) => () => void;
                            onLinkChange: (listener: (context: import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay) => void) => () => void;
                            updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            initialize(): Promise<void>;
                            readonly linkedAccount: import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay;
                            linkAccount({ apiKey }: {
                                apiKey: string;
                            }): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                            unlinkAccount(): Promise<void>;
                        };
                        contentModel: {
                            state: {
                                accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                                catalogOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastContent[]>;
                                viewsOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/video-concepts.js").VideoView[]>;
                                privilegesOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                                showsOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/video-concepts.js").VideoShow[]>;
                            };
                            subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                                catalogOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastContent[]>;
                                viewsOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/video-concepts.js").VideoView[]>;
                                privilegesOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[]>;
                                showsOp: import("../../../../framework/ops.js").Op<import("../../../../features/videos/types/video-concepts.js").VideoShow[]>;
                            }>) => () => void;
                            updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                            onVideoHostingUpdate(): Promise<void>;
                            initializeForModerationData(): Promise<void>;
                            initializeForVideo(label: string): Promise<void>;
                            readonly allowance: {
                                canModerateVideos: boolean;
                                canViewAllVideos: boolean;
                            };
                            readonly catalog: import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastContent[];
                            readonly views: import("../../../../features/videos/types/video-concepts.js").VideoView[];
                            readonly privileges: import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay[];
                            readonly shows: import("../../../../features/videos/types/video-concepts.js").VideoShow[];
                            getView(label: string): import("../../../../features/videos/types/video-concepts.js").VideoView;
                            getPrivilege(id: string): import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay;
                            getShow(label: string): import("../../../../features/videos/types/video-concepts.js").VideoShow;
                            setView(view: {
                                label: string;
                                privileges: string[];
                                reference: import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastReference;
                            }): Promise<void>;
                            deleteView(label: string): Promise<void>;
                        };
                        updateAccessOp(accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): void;
                    };
                    notesModel: {
                        initialize: () => Promise<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                        state: {
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            statsOp: import("../../../../framework/ops.js").Op<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                        };
                        stateSubscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            statsOp: import("../../../../framework/ops.js").Op<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                        }>) => () => void;
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        readonly isLoggedIn: boolean;
                        readonly stats: import("../../../../features/notes/types/notes-concepts.js").NotesStats;
                        propagateChangeToOtherTabs: import("../../../../toolbox/subbies.js").Subbie<undefined>;
                        loadStats: () => Promise<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                        overwriteStatsOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/notes/types/notes-concepts.js").NotesStats>): void;
                        createNotesCacheDetails: () => {
                            cache: {
                                subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                                    old: boolean;
                                    pageNumber: number;
                                    pageSize: number;
                                    notesOp: import("../../../../framework/ops.js").Op<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                                }>) => () => void;
                                cacheState: {
                                    old: boolean;
                                    pageNumber: number;
                                    pageSize: number;
                                    notesOp: import("../../../../framework/ops.js").Op<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                                };
                                loginStatusChanged(): Promise<void>;
                                readonly notes: import("../../../../features/notes/types/notes-concepts.js").Notes.Any[];
                                fetchAppropriateNotes: () => Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                                switchTabNew(): Promise<void>;
                                switchTabOld(): Promise<void>;
                                readonly isNextPageAvailable: boolean;
                                readonly isPreviousPageAvailable: boolean;
                                nextPage(): Promise<void>;
                                previousPage(): Promise<void>;
                                markAllNotesOld(): Promise<void>;
                                markSpecificNoteOld(noteId: string): Promise<void>;
                                markSpecificNoteNew(noteId: string): Promise<void>;
                                readonly totalPages: number;
                            };
                            setup: () => () => void;
                        };
                    };
                    storeModel: {
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                        load: () => Promise<void>;
                        initialize: () => Promise<void>;
                        refresh: () => Promise<void>;
                        subscriptions: {
                            addPlan(options: {
                                planLabel: string;
                                tier: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                            }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan>;
                            addTier(options: {
                                label: string;
                                planId: string;
                                pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                            }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                            editPlan({ planId, label, archived }: {
                                planId: string;
                                label: string;
                                archived: boolean;
                            }): Promise<void>;
                            editTier({ planId, tierId, label, active, pricing }: {
                                planId: string;
                                tierId: string;
                                label: string;
                                active: boolean;
                                pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                            }): Promise<void>;
                            purchase({ stripePriceId, showLoadingSpinner }: {
                                stripePriceId: string;
                                showLoadingSpinner?: boolean;
                            }): Promise<void>;
                            cancel(tierId: string): Promise<void>;
                            uncancel(tierId: string): Promise<void>;
                            load: () => Promise<void>;
                        };
                        billing: {
                            load: () => Promise<void>;
                            allowance: {
                                readonly manageStore: boolean;
                                readonly connectStripeAccount: boolean;
                                readonly giveAwayFreebies: boolean;
                            };
                            customerPortal: () => Promise<void>;
                        };
                        connect: {
                            load: () => Promise<void>;
                            readonly isOnboardingNeeded: boolean;
                            readonly isAllowedToOnboard: boolean;
                            stripeAccountOnboarding(): Promise<void>;
                            stripeLogin(): Promise<void>;
                            pause(): Promise<void>;
                            resume(): Promise<void>;
                        };
                        snap: import("@chasemoskal/snapstate").Snapstate<{
                            user: {
                                accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            };
                            stripeConnect: {
                                connectStatusOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus>;
                                connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").StripeConnectDetails>;
                            };
                            subscriptions: {
                                subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan[]>;
                                mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").SubscriptionDetails[]>;
                            };
                            billing: {
                                paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").PaymentMethod>;
                            };
                        }>;
                        state: {
                            user: {
                                accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            };
                            stripeConnect: {
                                connectStatusOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus>;
                                connectDetailsOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").StripeConnectDetails>;
                            };
                            subscriptions: {
                                subscriptionPlansOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan[]>;
                                mySubscriptionDetailsOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").SubscriptionDetails[]>;
                            };
                            billing: {
                                paymentMethodOp: import("../../../../framework/ops.js").Op<import("../../../../features/store/isomorphic/concepts.js").PaymentMethod>;
                            };
                        };
                        allowance: {
                            readonly manageStore: boolean;
                            readonly connectStripeAccount: boolean;
                            readonly giveAwayFreebies: boolean;
                        };
                        get: {
                            is: {
                                readonly storeActive: boolean;
                                readonly userLoggedIn: boolean;
                            };
                            user: {
                                readonly access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            };
                            connect: {
                                readonly status: import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus;
                                readonly details: import("../../../../features/store/isomorphic/concepts.js").StripeConnectDetails;
                            };
                            subscriptions: {
                                readonly plans: import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan[];
                                readonly mySubscriptionDetails: import("../../../../features/store/isomorphic/concepts.js").SubscriptionDetails[];
                            };
                            billing: {
                                readonly paymentMethod: import("../../../../features/store/isomorphic/concepts.js").PaymentMethod;
                            };
                        };
                    };
                    personalModel: {
                        track: <X>(observer: import("@chasemoskal/snapstate").Observer<{
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            submitDraftOp: import("../../../../framework/ops.js").Op<void>;
                        }, X>, reaction?: import("@chasemoskal/snapstate").Reaction<X>, options?: {
                            flip?: boolean;
                        }) => () => void;
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            submitDraftOp: import("../../../../framework/ops.js").Op<void>;
                        }>) => () => void;
                        readable: {
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            submitDraftOp: import("../../../../framework/ops.js").Op<void>;
                        };
                        saveProfile(profileDraft: import("../../../../features/auth/aspects/users/routines/personal/types/profile-draft.js").ProfileDraft): Promise<void>;
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): void;
                    };
                    questionsModel: {
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            users: import("../../../../features/auth/aspects/users/types/user.js").User[];
                            questions: import("../../../../features/questions/api/types/questions-and-answers.js").Question[];
                            boardOps: {
                                [key: string]: import("../../../../framework/ops.js").Op<void>;
                            };
                            postingOp: import("../../../../framework/ops.js").Op<void>;
                        }>) => () => void;
                        makeBoardModel: (board: string) => {
                            getPermissions(): {
                                readonly "read questions": boolean;
                                readonly "post questions": boolean;
                                readonly "moderate questions": boolean;
                                readonly "answer questions": boolean;
                                readonly "like questions": boolean;
                                readonly "report questions": boolean;
                            };
                            getBoardName(): string;
                            getAccess(): import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            getBoardOp(): import("../../../../framework/ops.js").Op<void>;
                            getPostingOp(): import("../../../../framework/ops.js").Op<void>;
                            getQuestions(): {
                                answers: import("../../../../features/questions/api/types/questions-and-answers.js").Answer[];
                                questionId: string;
                                authorUserId: string;
                                board: string;
                                content: string;
                                archive: boolean;
                                timePosted: number;
                                liked: boolean;
                                likes: number;
                                reports: number;
                                reported: boolean;
                            }[];
                            getUser(userId: string): import("../../../../features/auth/aspects/users/types/user.js").User;
                            loadQuestions(): Promise<void>;
                            postQuestion({ content }: {
                                content: string;
                            }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Question>;
                            postAnswer(questionId: string, answerDraft: import("../../../../features/questions/api/types/answer-draft.js").AnswerDraft): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Answer>;
                            likeQuestion(questionId: string, like: boolean): Promise<void>;
                            likeAnswer(questionId: string, answerId: string, like: boolean): Promise<void>;
                            reportQuestion(questionId: string, report: boolean): Promise<void>;
                            reportAnswer(questionId: string, answerId: string, report: boolean): Promise<void>;
                            archiveQuestion(questionId: string, archive: boolean): Promise<void>;
                            archiveAnswer(questionId: string, answerId: string, archive: boolean): Promise<void>;
                            archiveBoard(): Promise<void>;
                        };
                        accessChange: (access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload) => void;
                    };
                    permissionsModel: {
                        readable: {
                            active: boolean;
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            permissionsDisplay: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            active: boolean;
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            permissionsDisplay: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        }>) => () => void;
                        track: <X_1>(observer: import("@chasemoskal/snapstate").Observer<{
                            active: boolean;
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            permissionsDisplay: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        }, X_1>, reaction?: import("@chasemoskal/snapstate").Reaction<X_1>, options?: {
                            flip?: boolean;
                        }) => () => void;
                        getAccess: () => import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                        initialize: () => Promise<void>;
                        getUserCanCustomizePermissions: () => boolean;
                        createRole: ({ label }: {
                            label: string;
                        }) => Promise<void>;
                        deleteRole: ({ roleId: roleIdString }: {
                            roleId: string;
                        }) => Promise<void>;
                        assignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                            roleId: string;
                            privilegeId: string;
                        }) => Promise<void>;
                        unassignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                            roleId: string;
                            privilegeId: string;
                        }) => Promise<void>;
                        deletePrivilege: ({ privilegeId: privilegeIdString }: {
                            privilegeId: string;
                        }) => Promise<void>;
                        createPrivilege: ({ label }: {
                            label: string;
                        }) => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    };
                    administrativeModel: {
                        state: {
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            permissionsOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        };
                        subscribe: (subscription: import("@chasemoskal/snapstate").Subscription<{
                            accessOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>;
                            permissionsOp: import("../../../../framework/ops.js").Op<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        }>) => () => void;
                        getAccess: () => import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                        initialize: () => Promise<void>;
                        readonly isAllowed: (privilege: "universal" | "banned" | "view all chats" | "participate in all chats" | "read questions" | "post questions" | "like questions" | "report questions" | "moderate all chats" | "control stripe account" | "manage store" | "give away freebies" | "view all videos" | "moderate videos" | "edit any profile" | "customize permissions" | "answer questions" | "moderate questions" | "view stats" | "administrate user roles") => boolean;
                        reauthorize: () => Promise<void>;
                        searchUsers: (options: {
                            term: string;
                        }) => Promise<{
                            user: {
                                userId: string;
                                profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                                roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                            };
                            roleIds: string[];
                        }[]>;
                        assignRoleToUser: (options: {
                            roleId: string;
                            userId: string;
                            isPublic: boolean;
                            timeframeEnd: number;
                            timeframeStart: number;
                        }) => Promise<void>;
                        revokeRoleFromUser: (options: {
                            roleId: string;
                            userId: string;
                        }) => Promise<void>;
                        updateAccessOp(op: import("../../../../framework/ops.js").Op<import("../../../../features/auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
                    };
                };
                remote: import("renraku").ApiRemote<{
                    auth: {
                        apps: {
                            appService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").PlatformUserMeta, import("../../../../features/auth/types/auth-metas.js").PlatformUserAuth, {
                                listApps({ ownerUserId: ownerUserIdString }: {
                                    ownerUserId: string;
                                }): Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay[]>;
                                registerApp({ appDraft, ownerUserId }: {
                                    appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                                    ownerUserId: string;
                                }): Promise<import("../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay>;
                            }>;
                            appEditService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AppOwnerMeta, import("../../../../features/auth/types/auth-metas.js").AppOwnerAuth, {
                                updateApp({ appId: appIdString, appDraft }: {
                                    appId: string;
                                    appDraft: import("../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                                }): Promise<void>;
                                deleteApp({ appId: appIdString }: {
                                    appId: string;
                                }): Promise<void>;
                                listAdmins({ appId: appIdString }: {
                                    appId: string;
                                }): Promise<import("../../../../features/auth/aspects/apps/types/admin-email-display.js").AdminEmailDisplay[]>;
                                assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                                    appId: string;
                                    platformUserId: string;
                                }): Promise<void>;
                                assignAdmin({ appId: appIdString, email }: {
                                    appId: string;
                                    email: string;
                                }): Promise<void>;
                                revokeAdmin({ appId: appIdString, userId: userIdString }: {
                                    appId: string;
                                    userId: string;
                                }): Promise<void>;
                            }>;
                        };
                        users: {
                            greenService: import("renraku").Service<undefined, import("../../../../features/auth/types/auth-metas.js").GreenAuth, {
                                authorize({ scope, refreshToken, appId: appIdString, }: {
                                    scope: import("../../../../features/auth/types/auth-tokens.js").CoreScope;
                                    appId: string;
                                    refreshToken?: string;
                                }): Promise<string>;
                            }>;
                            loginService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/auth/types/auth-metas.js").LoginAuth, {
                                sendLoginLink(inputs: {
                                    email: string;
                                }): Promise<void>;
                                authenticateViaLoginToken({ loginToken }: {
                                    loginToken: string;
                                }): Promise<import("../../../../toolbox/concurrent.js").AwaitProps<{
                                    accessToken: Promise<string>;
                                    refreshToken: Promise<string>;
                                }>>;
                            }>;
                            userService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/auth/types/auth-metas.js").LoginAuth, {
                                getUser({ userId }: {
                                    userId: string;
                                }): Promise<{
                                    userId: string;
                                    profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                                    roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                    stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                                }>;
                            }>;
                            personalService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/auth/types/auth-metas.js").UserAuth, {
                                setProfile({ userId: userIdString, profileDraft }: {
                                    userId: string;
                                    profileDraft: import("../../../../features/auth/aspects/users/routines/personal/types/profile-draft.js").ProfileDraft;
                                }): Promise<void>;
                            }>;
                        };
                        permissions: {
                            permissionsService: import("renraku").Service<import("../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                                engine: {
                                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                                        userIds: string[];
                                        onlyGetPublicRoles: boolean;
                                    }) => Promise<{
                                        userId: string;
                                        userHasRoles: {
                                            userId: import("dbmage").Id;
                                            roleId: import("dbmage").Id;
                                            timeframeStart: number;
                                            timeframeEnd: number;
                                            public: boolean;
                                            hard: boolean;
                                            time: number;
                                        }[];
                                    }[]>;
                                    getAnonymousPrivileges: () => Promise<string[]>;
                                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                                        userId: string;
                                        privileges: string[];
                                    }[]>;
                                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                                        userId: string;
                                        publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                    }[]>;
                                    getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                                    getPrivileges: (privilegeIds: string[]) => Promise<{
                                        hard: boolean;
                                        label: string;
                                        time: number;
                                        privilegeId: string;
                                    }[]>;
                                    getAllPrivileges: () => Promise<{
                                        hard: boolean;
                                        label: string;
                                        time: number;
                                        privilegeId: string;
                                    }[]>;
                                    getUserPrivileges: (userId: string) => Promise<string[]>;
                                };
                                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                                database: import("../../../backend/types/database.js").DatabaseSafe;
                                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                    universal: string;
                                    banned: string;
                                    "moderate all chats": string;
                                    "control stripe account": string;
                                    "manage store": string;
                                    "give away freebies": string;
                                    "view all videos": string;
                                    "moderate videos": string;
                                    "edit any profile": string;
                                    "customize permissions": string;
                                    "answer questions": string;
                                    "moderate questions": string;
                                    "view stats": string;
                                    "administrate user roles": string;
                                    "view all chats": string;
                                    "participate in all chats": string;
                                    "read questions": string;
                                    "post questions": string;
                                    "like questions": string;
                                    "report questions": string;
                                }>;
                            }, {
                                fetchPermissions(): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                                createRole({ label }: {
                                    label: string;
                                }): Promise<void>;
                                deleteRole({ roleId: roleIdString }: {
                                    roleId: string;
                                }): Promise<void>;
                                assignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                                    roleId: string;
                                    privilegeId: string;
                                }): Promise<void>;
                                unassignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                                    roleId: string;
                                    privilegeId: string;
                                }): Promise<void>;
                                createPrivilege({ label }: {
                                    label: string;
                                }): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
                                deletePrivilege({ privilegeId: privilegeIdString }: {
                                    privilegeId: string;
                                }): Promise<void>;
                            }>;
                        };
                    };
                    administrative: {
                        roleAssignmentService: import("renraku").Service<import("../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                            engine: {
                                getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                                    userIds: string[];
                                    onlyGetPublicRoles: boolean;
                                }) => Promise<{
                                    userId: string;
                                    userHasRoles: {
                                        userId: import("dbmage").Id;
                                        roleId: import("dbmage").Id;
                                        timeframeStart: number;
                                        timeframeEnd: number;
                                        public: boolean;
                                        hard: boolean;
                                        time: number;
                                    }[];
                                }[]>;
                                getAnonymousPrivileges: () => Promise<string[]>;
                                getPrivilegesForUsers: (userIds: string[]) => Promise<{
                                    userId: string;
                                    privileges: string[];
                                }[]>;
                                getPublicRolesForUsers: (userIds: string[]) => Promise<{
                                    userId: string;
                                    publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                }[]>;
                                getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                                getPrivileges: (privilegeIds: string[]) => Promise<{
                                    hard: boolean;
                                    label: string;
                                    time: number;
                                    privilegeId: string;
                                }[]>;
                                getAllPrivileges: () => Promise<{
                                    hard: boolean;
                                    label: string;
                                    time: number;
                                    privilegeId: string;
                                }[]>;
                                getUserPrivileges: (userId: string) => Promise<string[]>;
                            };
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            database: import("../../../backend/types/database.js").DatabaseSafe;
                            checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                universal: string;
                                banned: string;
                                "moderate all chats": string;
                                "control stripe account": string;
                                "manage store": string;
                                "give away freebies": string;
                                "view all videos": string;
                                "moderate videos": string;
                                "edit any profile": string;
                                "customize permissions": string;
                                "answer questions": string;
                                "moderate questions": string;
                                "view stats": string;
                                "administrate user roles": string;
                                "view all chats": string;
                                "participate in all chats": string;
                                "read questions": string;
                                "post questions": string;
                                "like questions": string;
                                "report questions": string;
                            }>;
                        }, {
                            fetchPermissions(): Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                            searchUsers(options: {
                                term: string;
                            }): Promise<{
                                user: {
                                    userId: string;
                                    profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                                    roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                    stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                                };
                                roleIds: string[];
                            }[]>;
                            assignRoleToUser(options: {
                                roleId: string;
                                userId: string;
                                isPublic: boolean;
                                timeframeEnd: number;
                                timeframeStart: number;
                            }): Promise<void>;
                            revokeRoleFromUser(options: {
                                roleId: string;
                                userId: string;
                            }): Promise<void>;
                        }>;
                    };
                    questions: {
                        questionsReadingService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsAnonAuth, {
                            fetchQuestions({ board }: {
                                board: string;
                            }): Promise<{
                                users: {
                                    userId: string;
                                    profile: import("../../../../features/auth/aspects/users/types/profile.js").Profile;
                                    roles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                    stats: import("../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                                }[];
                                questions: {
                                    answers: import("../../../../features/questions/api/types/questions-and-answers.js").Answer[];
                                    questionId: string;
                                    authorUserId: string;
                                    board: string;
                                    content: string;
                                    archive: boolean;
                                    timePosted: number;
                                    liked: boolean;
                                    likes: number;
                                    reports: number;
                                    reported: boolean;
                                }[];
                            }>;
                        }>;
                        questionsPostingService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                            postQuestion(inputs: {
                                questionDraft: import("../../../../features/questions/api/types/question-draft.js").QuestionDraft;
                            }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Question>;
                            archiveQuestion(inputs: {
                                archive: boolean;
                                questionId: string;
                            }): Promise<void>;
                            likeQuestion(inputs: {
                                like: boolean;
                                questionId: string;
                            }): Promise<void>;
                            reportQuestion(inputs: {
                                report: boolean;
                                questionId: string;
                            }): Promise<void>;
                        }>;
                        questionsAnsweringService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                            postAnswer(inputs: {
                                questionId: string;
                                answerDraft: import("../../../../features/questions/api/types/answer-draft.js").AnswerDraft;
                            }): Promise<import("../../../../features/questions/api/types/questions-and-answers.js").Answer>;
                            archiveAnswer(inputs: {
                                archive: boolean;
                                answerId: string;
                            }): Promise<void>;
                            likeAnswer(inputs: {
                                like: boolean;
                                answerId: string;
                            }): Promise<void>;
                            reportAnswer(inputs: {
                                report: boolean;
                                answerId: string;
                            }): Promise<void>;
                        }>;
                        questionsModerationService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../features/questions/api/types/questions-metas-and-auths.js").QuestionsUserAuth, {
                            archiveBoard({ board }: {
                                board: string;
                            }): Promise<void>;
                            fetchReportedQuestions(): Promise<void>;
                        }>;
                    };
                    example: {
                        exampleService: import("renraku").Service<import("../../../../features/auth/types/auth-metas.js").UserMeta, {
                            database: import("dbmage").DatabaseLike<import("dbmage").SchemaToTables<{
                                examplePosts: {
                                    exampleId: import("dbmage").Id;
                                    something: string;
                                };
                            }>>;
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                universal: string;
                                banned: string;
                                "moderate all chats": string;
                                "control stripe account": string;
                                "manage store": string;
                                "give away freebies": string;
                                "view all videos": string;
                                "moderate videos": string;
                                "edit any profile": string;
                                "customize permissions": string;
                                "answer questions": string;
                                "moderate questions": string;
                                "view stats": string;
                                "administrate user roles": string;
                                "view all chats": string;
                                "participate in all chats": string;
                                "read questions": string;
                                "post questions": string;
                                "like questions": string;
                                "report questions": string;
                            }>;
                        }, {
                            exampleFunction({ something }: {
                                something: string;
                            }): Promise<void>;
                        }>;
                    };
                    videos: {
                        dacastService: import("renraku").Service<import("../../../../features/videos/types/video-auth.js").VideoMeta, {
                            checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                "view all videos": string;
                                "moderate videos": string;
                            }>;
                            engine: {
                                getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                                    userIds: string[];
                                    onlyGetPublicRoles: boolean;
                                }) => Promise<{
                                    userId: string;
                                    userHasRoles: {
                                        userId: import("dbmage").Id;
                                        roleId: import("dbmage").Id;
                                        timeframeStart: number;
                                        timeframeEnd: number;
                                        public: boolean;
                                        hard: boolean;
                                        time: number;
                                    }[];
                                }[]>;
                                getAnonymousPrivileges: () => Promise<string[]>;
                                getPrivilegesForUsers: (userIds: string[]) => Promise<{
                                    userId: string;
                                    privileges: string[];
                                }[]>;
                                getPublicRolesForUsers: (userIds: string[]) => Promise<{
                                    userId: string;
                                    publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                }[]>;
                                getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                                getPrivileges: (privilegeIds: string[]) => Promise<{
                                    hard: boolean;
                                    label: string;
                                    time: number;
                                    privilegeId: string;
                                }[]>;
                                getAllPrivileges: () => Promise<{
                                    hard: boolean;
                                    label: string;
                                    time: number;
                                    privilegeId: string;
                                }[]>;
                                getUserPrivileges: (userId: string) => Promise<string[]>;
                            };
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            database: import("../../../backend/types/database.js").DatabaseSafe;
                        }, {
                            getLink(): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                            setLink(inputs: {
                                apiKey: string;
                            }): Promise<import("../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                            clearLink(): Promise<void>;
                        }>;
                        contentService: import("renraku").Service<import("../../../../features/videos/types/video-auth.js").VideoMeta, {
                            engine: {
                                getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                                    userIds: string[];
                                    onlyGetPublicRoles: boolean;
                                }) => Promise<{
                                    userId: string;
                                    userHasRoles: {
                                        userId: import("dbmage").Id;
                                        roleId: import("dbmage").Id;
                                        timeframeStart: number;
                                        timeframeEnd: number;
                                        public: boolean;
                                        hard: boolean;
                                        time: number;
                                    }[];
                                }[]>;
                                getAnonymousPrivileges: () => Promise<string[]>;
                                getPrivilegesForUsers: (userIds: string[]) => Promise<{
                                    userId: string;
                                    privileges: string[];
                                }[]>;
                                getPublicRolesForUsers: (userIds: string[]) => Promise<{
                                    userId: string;
                                    publicUserRoles: import("../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                                }[]>;
                                getPermissionsDisplay: () => Promise<import("../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                                getPrivileges: (privilegeIds: string[]) => Promise<{
                                    hard: boolean;
                                    label: string;
                                    time: number;
                                    privilegeId: string;
                                }[]>;
                                getAllPrivileges: () => Promise<{
                                    hard: boolean;
                                    label: string;
                                    time: number;
                                    privilegeId: string;
                                }[]>;
                                getUserPrivileges: (userId: string) => Promise<string[]>;
                            };
                            checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                "view all videos": string;
                                "moderate videos": string;
                            }>;
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            database: import("../../../backend/types/database.js").DatabaseSafe;
                        }, {
                            fetchModerationData(): Promise<import("../../../../features/videos/types/video-concepts.js").VideoModerationData>;
                            writeView({ label, privileges, reference, }: {
                                label: string;
                                privileges: string[];
                                reference: import("../../../../features/videos/types/video-concepts.js").VideoHosting.DacastReference;
                            }): Promise<void>;
                            deleteView({ label }: {
                                label: string;
                            }): Promise<void>;
                            getShows({ labels }: {
                                labels: string[];
                            }): Promise<import("../../../../features/videos/types/video-concepts.js").VideoShow[]>;
                        }>;
                    };
                    notes: {
                        notesService: import("renraku").Service<import("../../../../features/notes/api/types/notes-auth.js").NotesMeta, {
                            notesDatabase: import("dbmage").Database<{
                                notes: import("../../../../features/notes/types/notes-concepts.js").Database.NoteBase;
                                questionDetails: import("../../../../features/notes/types/notes-concepts.js").Database.NoteDetails.Question;
                            }>;
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            database: import("../../../backend/types/database.js").DatabaseSafe;
                            checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                universal: string;
                                banned: string;
                                "moderate all chats": string;
                                "control stripe account": string;
                                "manage store": string;
                                "give away freebies": string;
                                "view all videos": string;
                                "moderate videos": string;
                                "edit any profile": string;
                                "customize permissions": string;
                                "answer questions": string;
                                "moderate questions": string;
                                "view stats": string;
                                "administrate user roles": string;
                                "view all chats": string;
                                "participate in all chats": string;
                                "read questions": string;
                                "post questions": string;
                                "like questions": string;
                                "report questions": string;
                            }>;
                        }, {
                            getNotesStats(): Promise<import("../../../../features/notes/types/notes-concepts.js").NotesStats>;
                            getNewNotes(pagination: import("../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                            getOldNotes(pagination: import("../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                            markAllNotesOld(): Promise<void>;
                            markNotesNewOrOld(input: {
                                old: boolean;
                                noteIds: string[];
                            }): Promise<void>;
                        }>;
                    };
                    store: {
                        connect: import("renraku").Service<any, import("../../../../features/store/backend/policies/types.js").StoreAuth, {
                            loadConnectDetails(): Promise<{
                                connectDetails: import("../../../../features/store/isomorphic/concepts.js").StripeConnectDetails;
                                connectStatus: import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus;
                            }>;
                            generatePopupForStripeAccountOnboarding(): Promise<{
                                popupId: string;
                                stripeAccountId: string;
                                stripeAccountSetupLink: string;
                            }>;
                            generateStripeLoginLink(): Promise<{
                                stripeLoginLink: string;
                                popupId: string;
                            }>;
                            pause(): Promise<void>;
                            resume(): Promise<void>;
                            loadConnectStatus(): Promise<import("../../../../features/store/isomorphic/concepts.js").StripeConnectStatus>;
                        }>;
                        billing: import("renraku").Service<unknown, {
                            stripeCustomerId: string;
                            connectId: import("dbmage").Id;
                            stripeAccountId: string;
                            stripeLiaisonAccount: {
                                billingPortal: {
                                    create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                };
                                customers: {
                                    create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                    update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                    listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                };
                                products: {
                                    create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                };
                                prices: {
                                    list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                    create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                };
                                paymentMethods: {
                                    create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                };
                                setupIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                };
                                paymentIntents: {
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                };
                                subscriptions: {
                                    list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                    create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                };
                                subscriptionItems: {
                                    del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                };
                                checkout: {
                                    sessions: {
                                        create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                    };
                                };
                            };
                            storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                            stripeLiaison: {
                                accounts: {
                                    create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                    retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                    createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                                };
                                accountLinks: {
                                    create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                                };
                                account(stripeAccount: string): {
                                    billingPortal: {
                                        create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                    };
                                    customers: {
                                        create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                        update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                    };
                                    products: {
                                        create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    };
                                    prices: {
                                        list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                        create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    };
                                    paymentMethods: {
                                        create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    };
                                    setupIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    };
                                    paymentIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    };
                                    subscriptions: {
                                        list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                        create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    };
                                    subscriptionItems: {
                                        del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                    };
                                    checkout: {
                                        sessions: {
                                            create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                        };
                                    };
                                };
                            };
                            roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                            storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                            checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                universal: string;
                                banned: string;
                                "moderate all chats": string;
                                "control stripe account": string;
                                "manage store": string;
                                "give away freebies": string;
                                "view all videos": string;
                                "moderate videos": string;
                                "edit any profile": string;
                                "customize permissions": string;
                                "answer questions": string;
                                "moderate questions": string;
                                "view stats": string;
                                "administrate user roles": string;
                                "view all chats": string;
                                "participate in all chats": string;
                                "read questions": string;
                                "post questions": string;
                                "like questions": string;
                                "report questions": string;
                            }>;
                            access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                        }, {
                            getDefaultPaymentMethod(): Promise<import("../../../../features/store/isomorphic/concepts.js").PaymentMethod>;
                            generateCustomerPortalLink(): Promise<{
                                popupId: string;
                                customer: string;
                                stripeSessionUrl: string;
                                stripeAccountId: string;
                            }>;
                        }>;
                        subscriptions: {
                            listing: import("renraku").Service<unknown, {
                                connectId: import("dbmage").Id;
                                stripeAccountId: string;
                                stripeLiaisonAccount: {
                                    billingPortal: {
                                        create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                    };
                                    customers: {
                                        create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                        update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                    };
                                    products: {
                                        create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    };
                                    prices: {
                                        list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                        create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    };
                                    paymentMethods: {
                                        create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    };
                                    setupIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    };
                                    paymentIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    };
                                    subscriptions: {
                                        list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                        create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    };
                                    subscriptionItems: {
                                        del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                    };
                                    checkout: {
                                        sessions: {
                                            create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                        };
                                    };
                                };
                                storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                                stripeLiaison: {
                                    accounts: {
                                        create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                        createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                                    };
                                    accountLinks: {
                                        create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                                    };
                                    account(stripeAccount: string): {
                                        billingPortal: {
                                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                        };
                                        customers: {
                                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                        };
                                        products: {
                                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        };
                                        prices: {
                                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        };
                                        paymentMethods: {
                                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        };
                                        setupIntents: {
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        };
                                        paymentIntents: {
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        };
                                        subscriptions: {
                                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        };
                                        subscriptionItems: {
                                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                        };
                                        checkout: {
                                            sessions: {
                                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                            };
                                        };
                                    };
                                };
                                roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                                storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                    universal: string;
                                    banned: string;
                                    "moderate all chats": string;
                                    "control stripe account": string;
                                    "manage store": string;
                                    "give away freebies": string;
                                    "view all videos": string;
                                    "moderate videos": string;
                                    "edit any profile": string;
                                    "customize permissions": string;
                                    "answer questions": string;
                                    "moderate questions": string;
                                    "view stats": string;
                                    "administrate user roles": string;
                                    "view all chats": string;
                                    "participate in all chats": string;
                                    "read questions": string;
                                    "post questions": string;
                                    "like questions": string;
                                    "report questions": string;
                                }>;
                                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            }, {
                                listPlans(): Promise<{
                                    archived: boolean;
                                    label: string;
                                    planId: string;
                                    time: number;
                                    tiers: import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier[];
                                }[]>;
                            }>;
                            planning: import("renraku").Service<unknown, {
                                helpers: {
                                    createPlanAndTier({ planLabel, tier }: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPlanDraft): Promise<{
                                        planId: import("dbmage").Id;
                                        tierId: import("dbmage").Id;
                                        stripePriceId: string;
                                        tierRoleId: import("dbmage").Id;
                                        time: number;
                                    }>;
                                    createTierForPlan({ planId, label, pricing }: {
                                        planId: string;
                                        label: string;
                                        pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                                    }): Promise<{
                                        tierId: import("dbmage").Id;
                                        roleId: import("dbmage").Id;
                                        time: number;
                                        stripePriceId: string;
                                    }>;
                                    updatePlan({ planId: planIdString, label, archived }: {
                                        planId: string;
                                        label: string;
                                        archived: boolean;
                                    }): Promise<void>;
                                    updateTier({ tierId: tierIdString, label, active, pricing }: {
                                        tierId: string;
                                        label: string;
                                        active: boolean;
                                        pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                                    }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                                };
                                connectId: import("dbmage").Id;
                                stripeAccountId: string;
                                stripeLiaisonAccount: {
                                    billingPortal: {
                                        create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                    };
                                    customers: {
                                        create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                        update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                    };
                                    products: {
                                        create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    };
                                    prices: {
                                        list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                        create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    };
                                    paymentMethods: {
                                        create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    };
                                    setupIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    };
                                    paymentIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    };
                                    subscriptions: {
                                        list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                        create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    };
                                    subscriptionItems: {
                                        del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                    };
                                    checkout: {
                                        sessions: {
                                            create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                        };
                                    };
                                };
                                storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                                stripeLiaison: {
                                    accounts: {
                                        create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                        createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                                    };
                                    accountLinks: {
                                        create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                                    };
                                    account(stripeAccount: string): {
                                        billingPortal: {
                                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                        };
                                        customers: {
                                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                        };
                                        products: {
                                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        };
                                        prices: {
                                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        };
                                        paymentMethods: {
                                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        };
                                        setupIntents: {
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        };
                                        paymentIntents: {
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        };
                                        subscriptions: {
                                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        };
                                        subscriptionItems: {
                                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                        };
                                        checkout: {
                                            sessions: {
                                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                            };
                                        };
                                    };
                                };
                                roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                                storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                    universal: string;
                                    banned: string;
                                    "moderate all chats": string;
                                    "control stripe account": string;
                                    "manage store": string;
                                    "give away freebies": string;
                                    "view all videos": string;
                                    "moderate videos": string;
                                    "edit any profile": string;
                                    "customize permissions": string;
                                    "answer questions": string;
                                    "moderate questions": string;
                                    "view stats": string;
                                    "administrate user roles": string;
                                    "view all chats": string;
                                    "participate in all chats": string;
                                    "read questions": string;
                                    "post questions": string;
                                    "like questions": string;
                                    "report questions": string;
                                }>;
                                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            }, {
                                addPlan(inputs: {
                                    planLabel: string;
                                    tier: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionTierDraft;
                                }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionPlan>;
                                addTier(inputs: {
                                    label: string;
                                    planId: string;
                                    pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                                }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                                editPlan(inputs: {
                                    planId: string;
                                    label: string;
                                    archived: boolean;
                                }): Promise<void>;
                                editTier(inputs: {
                                    label: string;
                                    tierId: string;
                                    active: boolean;
                                    pricing: import("../../../../features/store/backend/services/subscriptions/types/drafts.js").SubscriptionPricingDraft;
                                }): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionTier>;
                            }>;
                            shopping: import("renraku").Service<unknown, {
                                stripeCustomerId: string;
                                connectId: import("dbmage").Id;
                                stripeAccountId: string;
                                stripeLiaisonAccount: {
                                    billingPortal: {
                                        create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                    };
                                    customers: {
                                        create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                        update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                        listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                    };
                                    products: {
                                        create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                    };
                                    prices: {
                                        list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                        create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                    };
                                    paymentMethods: {
                                        create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                    };
                                    setupIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                    };
                                    paymentIntents: {
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                    };
                                    subscriptions: {
                                        list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                        create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                    };
                                    subscriptionItems: {
                                        del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                    };
                                    checkout: {
                                        sessions: {
                                            create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                        };
                                    };
                                };
                                storeDatabase: import("../../../../features/store/backend/database/types/schema.js").StoreDatabase;
                                stripeLiaison: {
                                    accounts: {
                                        create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                        retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
                                        createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
                                    };
                                    accountLinks: {
                                        create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
                                    };
                                    account(stripeAccount: string): {
                                        billingPortal: {
                                            create(params: import("stripe").Stripe.BillingPortal.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.BillingPortal.Session>>;
                                        };
                                        customers: {
                                            create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                                            update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                                            listPaymentMethods(customer: string, params: import("stripe").Stripe.CustomerListPaymentMethodsParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.PaymentMethod>>>;
                                        };
                                        products: {
                                            create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                            update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                                        };
                                        prices: {
                                            list(params: import("stripe").Stripe.PriceListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Price>>>;
                                            create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                            update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                                        };
                                        paymentMethods: {
                                            create(params: import("stripe").Stripe.PaymentMethodCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                            detach(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
                                        };
                                        setupIntents: {
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                            create(params: import("stripe").Stripe.SetupIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
                                        };
                                        paymentIntents: {
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                            create(params: import("stripe").Stripe.PaymentIntentCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentIntent>>;
                                        };
                                        subscriptions: {
                                            list(params: import("stripe").Stripe.SubscriptionListParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.ApiList<import("stripe").Stripe.Subscription>>>;
                                            create(params: import("stripe").Stripe.SubscriptionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                            update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                                        };
                                        subscriptionItems: {
                                            del(id: string, params: import("stripe").Stripe.SubscriptionItemDeleteParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.DeletedSubscriptionItem>>;
                                        };
                                        checkout: {
                                            sessions: {
                                                create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                                            };
                                        };
                                    };
                                };
                                roleManager: import("../../../../features/auth/aspects/permissions/interactions/types.js").RoleManager;
                                storeDatabaseUnconnected: import("../../../../features/store/backend/database/types/schema.js").StoreDatabaseUnconnected;
                                checker: import("../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                                    universal: string;
                                    banned: string;
                                    "moderate all chats": string;
                                    "control stripe account": string;
                                    "manage store": string;
                                    "give away freebies": string;
                                    "view all videos": string;
                                    "moderate videos": string;
                                    "edit any profile": string;
                                    "customize permissions": string;
                                    "answer questions": string;
                                    "moderate questions": string;
                                    "view stats": string;
                                    "administrate user roles": string;
                                    "view all chats": string;
                                    "participate in all chats": string;
                                    "read questions": string;
                                    "post questions": string;
                                    "like questions": string;
                                    "report questions": string;
                                }>;
                                access: import("../../../../features/auth/types/auth-tokens.js").AccessPayload;
                            }, {
                                fetchDetailsAboutMySubscriptions(): Promise<import("../../../../features/store/isomorphic/concepts.js").SubscriptionDetails[]>;
                                buy(stripePriceId: string): Promise<{
                                    checkoutDetails?: import("../../../../features/store/backend/types/checkout-popup-details.js").CheckoutPopupDetails;
                                }>;
                                cancel(tierId: string): Promise<void>;
                                uncancel(tierId: string): Promise<void>;
                            }>;
                        };
                    };
                }>;
                nextModalResults: {
                    confirm: boolean;
                    prompt: {
                        value: any;
                    };
                };
            }>;
        }>;
    };
    stripePopups: {
        connect({ popupId, stripeAccountId, stripeAccountSetupLink }: {
            popupId: string;
            stripeAccountId: string;
            stripeAccountSetupLink: string;
        }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<{
            status: "return" | "refresh";
        }>>;
        login({ popupId, stripeAccountId, stripeLoginLink }: {
            popupId: string;
            stripeAccountId: string;
            stripeLoginLink: string;
        }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<void>>;
        checkoutSubscription({ popupId, stripeSessionUrl, stripeSessionId, stripeAccountId }: {
            popupId: string;
            stripeSessionId: string;
            stripeAccountId: string;
            stripeSessionUrl: string;
        }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<{
            status: "cancel" | "success";
        }>>;
        openStoreCustomerPortal({ popupId, customer, stripeAccountId, stripeSessionUrl }: {
            popupId: string;
            customer: string;
            stripeAccountId: string;
            stripeSessionUrl: string;
        }): Promise<import("../../../../features/store/popups/types.js").Popups.Result<{
            status: "detach" | "cancel" | "success";
        }>>;
    };
    setMockLatency: (value: import("renraku").MockLatency) => void;
    chatConnect: import("../../../../features/chat/common/types/chat-concepts.js").ChatConnect;
}>;
