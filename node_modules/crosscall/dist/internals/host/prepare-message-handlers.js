import { getEventMediator, getMethodExecutor, enforcePermissions, getExposure, getListenerData, } from "./validation.js";
export const prepareMessageHandlers = ({ state, exposures, sendMessage, }) => ({
    /**
     * Call request
     * - a client wants to execute some exposed host functionality
     * - the results are sent back to the client
     */
    [2 /* Signal.CallRequest */]: async ({ message, origin }) => {
        const { id: associate, topic, func, params } = message;
        const exposure = getExposure({ topic, exposures });
        enforcePermissions({ origin, exposure });
        const execute = getMethodExecutor({ func, params, exposure });
        sendMessage({
            origin,
            message: {
                associate,
                result: await execute(),
                signal: 3 /* Signal.CallResponse */,
            }
        });
    },
    /**
     * Event listen request
     * - a client is asking to subscribe to a host event
     * - we send back the generated listener id
     */
    [5 /* Signal.EventListenRequest */]: async ({ message, origin }) => {
        const { topic, eventName, id: associate } = message;
        const exposure = getExposure({ topic, exposures });
        enforcePermissions({ origin, exposure });
        const mediator = getEventMediator({ eventName, exposure });
        // create the listener
        const listenerId = state.listenerId++;
        const listener = eventPayload => sendMessage({
            origin,
            message: {
                listenerId,
                eventPayload,
                signal: 4 /* Signal.Event */,
            }
        });
        const cleanup = () => {
            mediator.unlisten(listener);
            state.listeners.delete(listenerId);
        };
        // start listening
        state.listeners.set(listenerId, { exposure, cleanup });
        mediator.listen(listener);
        sendMessage({
            origin,
            message: {
                associate,
                listenerId,
                signal: 6 /* Signal.EventListenResponse */,
            }
        });
    },
    /**
     * Event unlisten request
     * - a client wants to cancel an event subscription
     */
    [7 /* Signal.EventUnlistenRequest */]: async ({ message, origin }) => {
        const { listeners } = state;
        const { listenerId, id: associate } = message;
        const { exposure, cleanup } = getListenerData({ listenerId, listeners, origin });
        enforcePermissions({ origin, exposure });
        cleanup();
        sendMessage({
            origin,
            message: {
                associate,
                signal: 8 /* Signal.EventUnlistenResponse */
            }
        });
    }
});
//# sourceMappingURL=prepare-message-handlers.js.map